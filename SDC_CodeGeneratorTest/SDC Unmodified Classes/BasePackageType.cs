// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[XmlInclude(typeof(RetrieveFormPackageType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("BasePackageType")]
public partial class BasePackageType : ExtensionBaseType
{
    #region Private fields
    private bool _shouldSerializenewData;
    private bool _shouldSerializechangedData;
    private bool _shouldSerializeinstanceVersionPrev;
    private bool _shouldSerializeinstanceVersion;
    private TemplateAdminType _admin;
    private string _packageID;
    private string _pkgTitle;
    private string _baseURI;
    private string _filename;
    private string _basedOnURI;
    private string _lineage;
    private string _version;
    private string _fullURI;
    private string _instanceID;
    private System.DateTime _instanceVersion;
    private string _instanceVersionURI;
    private System.DateTime _instanceVersionPrev;
    private bool _changedData;
    private bool _newData;
    #endregion
    
    /// <summary>
    /// Admin contains information about a package, including a description of the package contents and purpose (PackageDescription), information about the registry that contains the package file (RegistryData), and information about the package file characteristics (TemplateFile).
    /// </summary>
    [XmlElement(Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual TemplateAdminType Admin
    {
        get
        {
            return _admin;
        }
        set
        {
            if ((_admin == value))
            {
                return;
            }
            if (((_admin == null) 
                        || (_admin.Equals(value) != true)))
            {
                _admin = value;
                OnPropertyChanged("Admin", value);
            }
        }
    }
    
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string packageID
    {
        get
        {
            return _packageID;
        }
        set
        {
            if ((_packageID == value))
            {
                return;
            }
            if (((_packageID == null) 
                        || (_packageID.Equals(value) != true)))
            {
                _packageID = value;
                OnPropertyChanged("packageID", value);
            }
        }
    }
    
    /// <summary>
    /// NEW Feb 2019
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string pkgTitle
    {
        get
        {
            return _pkgTitle;
        }
        set
        {
            if ((_pkgTitle == value))
            {
                return;
            }
            if (((_pkgTitle == null) 
                        || (_pkgTitle.Equals(value) != true)))
            {
                _pkgTitle = value;
                OnPropertyChanged("pkgTitle", value);
            }
        }
    }
    
    /// <summary>
    /// @baseURI is required in the SDCPackage element but is optional elsewhere.  It identifies the organization that is responsible for designing and maintaining the Package contents.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string baseURI
    {
        get
        {
            return _baseURI;
        }
        set
        {
            if ((_baseURI == value))
            {
                return;
            }
            if (((_baseURI == null) 
                        || (_baseURI.Equals(value) != true)))
            {
                _baseURI = value;
                OnPropertyChanged("baseURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: filename to use when the current package instance is saved as a file.
    /// For package containing responses, the filename may include the pkgInstanceVersionURI,
    /// but the naming convention may be use-case-specific.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string filename
    {
        get
        {
            return _filename;
        }
        set
        {
            if ((_filename == value))
            {
                return;
            }
            if (((_filename == null) 
                        || (_filename.Equals(value) != true)))
            {
                _filename = value;
                OnPropertyChanged("filename", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: URI used to identify the package that that this package is based upon.  In most cases, this should be a standard package that is modified and/or extended by the current package.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string basedOnURI
    {
        get
        {
            return _basedOnURI;
        }
        set
        {
            if ((_basedOnURI == value))
            {
                return;
            }
            if (((_basedOnURI == null) 
                        || (_basedOnURI.Equals(value) != true)))
            {
                _basedOnURI = value;
                OnPropertyChanged("basedOnURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: A text identifier that is used to group multiple versions of a single package.  The lineage is constant for all versions of a single kind of package.
    /// 
    /// When appended to @baseURI, it can be used to retrieve all versions of one particular package.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string lineage
    {
        get
        {
            return _lineage;
        }
        set
        {
            if ((_lineage == value))
            {
                return;
            }
            if (((_lineage == null) 
                        || (_lineage.Equals(value) != true)))
            {
                _lineage = value;
                OnPropertyChanged("lineage", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: @version contains the version text for the current package.  It is designed to be used in conjunction with @baseURI and @lineage.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string version
    {
        get
        {
            return _version;
        }
        set
        {
            if ((_version == value))
            {
                return;
            }
            if (((_version == null) 
                        || (_version.Equals(value) != true)))
            {
                _version = value;
                OnPropertyChanged("version", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: The full URI that uniquely identifies the current package instance.  This URI does not vary with updated versions of the package instance.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string fullURI
    {
        get
        {
            return _fullURI;
        }
        set
        {
            if ((_fullURI == value))
            {
                return;
            }
            if (((_fullURI == null) 
                        || (_fullURI.Equals(value) != true)))
            {
                _fullURI = value;
                OnPropertyChanged("fullURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: For packages containing FormDesign responses. Unique string used to identify a set of packaged versions (the package instance) over time. Used for tracking changed package responses across time and across multiple episodes of editing (versions) by end-users.  This string does not change for each edit session (version) of a package instance.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string instanceID
    {
        get
        {
            return _instanceID;
        }
        set
        {
            if ((_instanceID == value))
            {
                return;
            }
            if (((_instanceID == null) 
                        || (_instanceID.Equals(value) != true)))
            {
                _instanceID = value;
                OnPropertyChanged("instanceID", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: For packages containing FormDesign responses. Timestamp used to identify a unique instance of a package.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This field must change for each edit session of a form instance.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime instanceVersion
    {
        get
        {
            return _instanceVersion;
        }
        set
        {
            if ((_instanceVersion.Equals(value) != true))
            {
                _instanceVersion = value;
                OnPropertyChanged("instanceVersion", value);
            }
            _shouldSerializeinstanceVersion = true;
        }
    }
    
    /// <summary>
    /// NEW: For packages containing FormDesign responses. Globally-unique URI used to identify a unique instance of a Pkg with saved FDF-R responses.  It is used for tracking Pkg responses across time and across multiple episodes of editing by end-users.  The instanceVersionURI must change for each edit/save session of a Pkg instance (defined by instanceVersion).
    /// 
    /// The instanceVersionURI should be formatted similarly to the fullURI but must include values for instanceID and instanceVersion.  The instanceVersion value is the release date/time for the new version, in W3C datetime format.
    /// 
    /// An example instanceVersionURI is:
    /// instanceVersionURI="_baseURI=cap.org&_lineage=Lung.Bmk.227&_version=1.001.011.RC1 &_instanceID=Abc1dee2fg987&_instanceVersion=2019-07-16T19:20:30+01:00&_docType=sdcFDFR "
    /// 
    /// It is possible to create a shorter URI without the _baseURI, _lineage and _version parameters, as long as the URI is able to globally and uniquely identify and retrieve the instance and version of the Pkg that was transmitted:
    /// instanceVersionURI="_instanceID=Abc1dee2fg987&_instanceVersion=2019-07-16T19:20:30+01:00&_docType=sdcFDFR"
    /// 
    /// Note that the FR webservice endpoint URI is not provided in the instanceVersionURI.  The FR endpoint and its security settings may be found in the SDC Package that contains the FDF-R, at SDCPackage/SubmissionRule.  An FR may also be provided in a custom FDF Property if desired.
    /// 
    /// The docType for instanceVersionURI is sdcFDFR for a single FDF-R transaction.  The docType for for a Pkg with multiple FDF-R and/or other content is sdcPkg.  The specific order of components shown in the URI examples is not required, but the component order shown above is suggested for consistency and readability.
    /// 
    /// The instanceVersionURI is not required, and is not allowed in an FDF.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string instanceVersionURI
    {
        get
        {
            return _instanceVersionURI;
        }
        set
        {
            if ((_instanceVersionURI == value))
            {
                return;
            }
            if (((_instanceVersionURI == null) 
                        || (_instanceVersionURI.Equals(value) != true)))
            {
                _instanceVersionURI = value;
                OnPropertyChanged("instanceVersionURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique dateTime used to identify the immediate previous instance of a package.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This field must change for each edit session of a form instance.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime instanceVersionPrev
    {
        get
        {
            return _instanceVersionPrev;
        }
        set
        {
            if ((_instanceVersionPrev.Equals(value) != true))
            {
                _instanceVersionPrev = value;
                OnPropertyChanged("instanceVersionPrev", value);
            }
            _shouldSerializeinstanceVersionPrev = true;
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool changedData
    {
        get
        {
            return _changedData;
        }
        set
        {
            if ((_changedData.Equals(value) != true))
            {
                _changedData = value;
                OnPropertyChanged("changedData", value);
            }
            _shouldSerializechangedData = true;
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool newData
    {
        get
        {
            return _newData;
        }
        set
        {
            if ((_newData.Equals(value) != true))
            {
                _newData = value;
                OnPropertyChanged("newData", value);
            }
            _shouldSerializenewData = true;
        }
    }
    
    /// <summary>
    /// Test whether instanceVersion should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceVersion()
    {
        if (_shouldSerializeinstanceVersion)
        {
            return true;
        }
        return (_instanceVersion != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether instanceVersionPrev should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceVersionPrev()
    {
        if (_shouldSerializeinstanceVersionPrev)
        {
            return true;
        }
        return (_instanceVersionPrev != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether changedData should be serialized
    /// </summary>
    public virtual bool ShouldSerializechangedData()
    {
        if (_shouldSerializechangedData)
        {
            return true;
        }
        return (_changedData != default(bool));
    }
    
    /// <summary>
    /// Test whether newData should be serialized
    /// </summary>
    public virtual bool ShouldSerializenewData()
    {
        if (_shouldSerializenewData)
        {
            return true;
        }
        return (_newData != default(bool));
    }
    
    /// <summary>
    /// Test whether Admin should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAdmin()
    {
        return (_admin != null);
    }
    
    /// <summary>
    /// Test whether packageID should be serialized
    /// </summary>
    public virtual bool ShouldSerializepackageID()
    {
        return !string.IsNullOrEmpty(packageID);
    }
    
    /// <summary>
    /// Test whether pkgTitle should be serialized
    /// </summary>
    public virtual bool ShouldSerializepkgTitle()
    {
        return !string.IsNullOrEmpty(pkgTitle);
    }
    
    /// <summary>
    /// Test whether baseURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebaseURI()
    {
        return !string.IsNullOrEmpty(baseURI);
    }
    
    /// <summary>
    /// Test whether filename should be serialized
    /// </summary>
    public virtual bool ShouldSerializefilename()
    {
        return !string.IsNullOrEmpty(filename);
    }
    
    /// <summary>
    /// Test whether basedOnURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebasedOnURI()
    {
        return !string.IsNullOrEmpty(basedOnURI);
    }
    
    /// <summary>
    /// Test whether lineage should be serialized
    /// </summary>
    public virtual bool ShouldSerializelineage()
    {
        return !string.IsNullOrEmpty(lineage);
    }
    
    /// <summary>
    /// Test whether version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeversion()
    {
        return !string.IsNullOrEmpty(version);
    }
    
    /// <summary>
    /// Test whether fullURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializefullURI()
    {
        return !string.IsNullOrEmpty(fullURI);
    }
    
    /// <summary>
    /// Test whether instanceID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceID()
    {
        return !string.IsNullOrEmpty(instanceID);
    }
    
    /// <summary>
    /// Test whether instanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceVersionURI()
    {
        return !string.IsNullOrEmpty(instanceVersionURI);
    }
}
}
#pragma warning restore

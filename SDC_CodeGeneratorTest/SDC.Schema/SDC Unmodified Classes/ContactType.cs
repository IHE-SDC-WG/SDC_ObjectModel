// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// A model structure for a Person or Organization that generally performs a particular stated role.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("ContactType")]
public partial class ContactType : ExtensionBaseType
{
    #region Private fields
    private PersonType _person;
    private OrganizationType _organization;
    #endregion
    
    [XmlElement(Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual PersonType Person
    {
        get
        {
            return _person;
        }
        set
        {
            if ((_person == value))
            {
                return;
            }
            if (((_person == null) 
                        || (_person.Equals(value) != true)))
            {
                _person = value;
                OnPropertyChanged("Person", value);
            }
        }
    }
    
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual OrganizationType Organization
    {
        get
        {
            return _organization;
        }
        set
        {
            if ((_organization == value))
            {
                return;
            }
            if (((_organization == null) 
                        || (_organization.Equals(value) != true)))
            {
                _organization = value;
                OnPropertyChanged("Organization", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Person should be serialized
    /// </summary>
    public virtual bool ShouldSerializePerson()
    {
        return (_person != null);
    }
    
    /// <summary>
    /// Test whether Organization should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOrganization()
    {
        return (_organization != null);
    }
}
}
#pragma warning restore

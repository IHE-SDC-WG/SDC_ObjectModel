// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// A model structure for an Organization object.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("OrganizationType")]
public partial class OrganizationType : ExtensionBaseType
{
    #region Private fields
    private string_Stype _orgName;
    private string_Stype _department;
    private List<AddressType> _streetAddress;
    private List<EmailType> _email;
    private List<PhoneType> _phone;
    private List<anyURI_Stype> _webURL;
    private List<string_Stype> _role;
    private List<PersonType> _contactPerson;
    private List<IdentifierType> _identifier;
    private string_Stype _usage;
    #endregion
    
    [XmlElement(IsNullable=true, Order=0)]
    [RequiredAttribute()]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype OrgName
    {
        get
        {
            return _orgName;
        }
        set
        {
            if ((_orgName == value))
            {
                return;
            }
            if (((_orgName == null) 
                        || (_orgName.Equals(value) != true)))
            {
                ValidationContext validatorPropContext = new ValidationContext(this, null, null);
                validatorPropContext.MemberName = "OrgName";
                Validator.ValidateProperty(value, validatorPropContext);
                _orgName = value;
                OnPropertyChanged("OrgName", value);
            }
        }
    }
    
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Department
    {
        get
        {
            return _department;
        }
        set
        {
            if ((_department == value))
            {
                return;
            }
            if (((_department == null) 
                        || (_department.Equals(value) != true)))
            {
                _department = value;
                OnPropertyChanged("Department", value);
            }
        }
    }
    
    [XmlElement("StreetAddress", Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<AddressType> StreetAddress
    {
        get
        {
            return _streetAddress;
        }
        set
        {
            if ((_streetAddress == value))
            {
                return;
            }
            if (((_streetAddress == null) 
                        || (_streetAddress.Equals(value) != true)))
            {
                _streetAddress = value;
                OnPropertyChanged("StreetAddress", value);
            }
        }
    }
    
    [XmlElement("Email", Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<EmailType> Email
    {
        get
        {
            return _email;
        }
        set
        {
            if ((_email == value))
            {
                return;
            }
            if (((_email == null) 
                        || (_email.Equals(value) != true)))
            {
                _email = value;
                OnPropertyChanged("Email", value);
            }
        }
    }
    
    [XmlElement("Phone", Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<PhoneType> Phone
    {
        get
        {
            return _phone;
        }
        set
        {
            if ((_phone == value))
            {
                return;
            }
            if (((_phone == null) 
                        || (_phone.Equals(value) != true)))
            {
                _phone = value;
                OnPropertyChanged("Phone", value);
            }
        }
    }
    
    [XmlElement("WebURL", Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<anyURI_Stype> WebURL
    {
        get
        {
            return _webURL;
        }
        set
        {
            if ((_webURL == value))
            {
                return;
            }
            if (((_webURL == null) 
                        || (_webURL.Equals(value) != true)))
            {
                _webURL = value;
                OnPropertyChanged("WebURL", value);
            }
        }
    }
    
    /// <summary>
    /// Role of the organization, e.g., creator, copyright
    /// holder, accreditor, certifier, curator, etc.
    /// </summary>
    [XmlElement("Role", Order=6)]
    [JsonProperty(Order=6, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<string_Stype> Role
    {
        get
        {
            return _role;
        }
        set
        {
            if ((_role == value))
            {
                return;
            }
            if (((_role == null) 
                        || (_role.Equals(value) != true)))
            {
                _role = value;
                OnPropertyChanged("Role", value);
            }
        }
    }
    
    [XmlElement("ContactPerson", Order=7)]
    [JsonProperty(Order=7, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<PersonType> ContactPerson
    {
        get
        {
            return _contactPerson;
        }
        set
        {
            if ((_contactPerson == value))
            {
                return;
            }
            if (((_contactPerson == null) 
                        || (_contactPerson.Equals(value) != true)))
            {
                _contactPerson = value;
                OnPropertyChanged("ContactPerson", value);
            }
        }
    }
    
    [XmlElement("Identifier", Order=8)]
    [JsonProperty(Order=8, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<IdentifierType> Identifier
    {
        get
        {
            return _identifier;
        }
        set
        {
            if ((_identifier == value))
            {
                return;
            }
            if (((_identifier == null) 
                        || (_identifier.Equals(value) != true)))
            {
                _identifier = value;
                OnPropertyChanged("Identifier", value);
            }
        }
    }
    
    /// <summary>
    /// When this organization should be
    /// contacted.
    /// </summary>
    [XmlElement(Order=9)]
    [JsonProperty(Order=9, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Usage
    {
        get
        {
            return _usage;
        }
        set
        {
            if ((_usage == value))
            {
                return;
            }
            if (((_usage == null) 
                        || (_usage.Equals(value) != true)))
            {
                _usage = value;
                OnPropertyChanged("Usage", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether StreetAddress should be serialized
    /// </summary>
    public virtual bool ShouldSerializeStreetAddress()
    {
        return StreetAddress != null && StreetAddress.Count > 0;
    }
    
    /// <summary>
    /// Test whether Email should be serialized
    /// </summary>
    public virtual bool ShouldSerializeEmail()
    {
        return Email != null && Email.Count > 0;
    }
    
    /// <summary>
    /// Test whether Phone should be serialized
    /// </summary>
    public virtual bool ShouldSerializePhone()
    {
        return Phone != null && Phone.Count > 0;
    }
    
    /// <summary>
    /// Test whether WebURL should be serialized
    /// </summary>
    public virtual bool ShouldSerializeWebURL()
    {
        return WebURL != null && WebURL.Count > 0;
    }
    
    /// <summary>
    /// Test whether Role should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRole()
    {
        return Role != null && Role.Count > 0;
    }
    
    /// <summary>
    /// Test whether ContactPerson should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContactPerson()
    {
        return ContactPerson != null && ContactPerson.Count > 0;
    }
    
    /// <summary>
    /// Test whether Identifier should be serialized
    /// </summary>
    public virtual bool ShouldSerializeIdentifier()
    {
        return Identifier != null && Identifier.Count > 0;
    }
    
    /// <summary>
    /// Test whether OrgName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOrgName()
    {
        return (_orgName != null);
    }
    
    /// <summary>
    /// Test whether Department should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDepartment()
    {
        return (_department != null);
    }
    
    /// <summary>
    /// Test whether Usage should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsage()
    {
        return (_usage != null);
    }
}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type represents any object that is designed to have a visual
/// presence on a form, e.g., Sections, Questions, ListItems, Notes and Blobs. (Other
/// items not inheriting this type may use an optional styleClass
/// attribute.)
/// </summary>
[XmlInclude(typeof(ButtonItemType))]
[XmlInclude(typeof(ListItemBaseType))]
[XmlInclude(typeof(ListItemType))]
[XmlInclude(typeof(RepeatingType))]
[XmlInclude(typeof(QuestionItemBaseType))]
[XmlInclude(typeof(QuestionItemType))]
[XmlInclude(typeof(SectionBaseType))]
[XmlInclude(typeof(SectionItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("DisplayedType")]
public partial class DisplayedType : IdentifiedExtensionType
{
    #region Private fields
    protected internal bool _shouldSerializeshowInReport;
    protected internal bool _shouldSerializemustImplement;
    protected internal bool _shouldSerializevisible;
    protected internal bool _shouldSerializeenabled;
    private List<LinkType> _link;
    private List<BlobType> _blobContent;
    private List<ContactType> _contact;
    private List<CodingType> _codedValue;
    private List<EventType> _onEnter;
    private List<EventType> _onExit;
    private List<OnEventType> _onEvent;
    private PredGuardType _activateIf;
    private PredGuardType _deActivateIf;
    private string _title;
    private bool _enabled;
    private bool _visible;
    private bool _mustImplement;
    private DisplayedTypeShowInReport _showInReport;
    #endregion
    
    ///// <summary>
    ///// DisplayedType class constructor
    ///// </summary>
    //public DisplayedType()
    //{
    //    _enabled = true;
    //    _visible = true;
    //    _mustImplement = true;
    //    _showInReport = DisplayedTypeShowInReport.True;
    //}
    
    /// <summary>
    /// Link to external information.
    /// </summary>
    [XmlElement("Link", Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<LinkType> Link
    {
        get
        {
            return _link;
        }
        set
        {
            if ((_link == value))
            {
                return;
            }
            if (((_link == null) 
                        || (_link.Equals(value) != true)))
            {
                _link = value;
                OnPropertyChanged("Link", value);
            }
        }
    }
    
    /// <summary>
    /// Blob information associated with the current
    /// DisplayedType. The blob may contain any type of special media, but
    /// must be base 64 encoded.
    /// </summary>
    [XmlElement("BlobContent", Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<BlobType> BlobContent
    {
        get
        {
            return _blobContent;
        }
        set
        {
            if ((_blobContent == value))
            {
                return;
            }
            if (((_blobContent == null) 
                        || (_blobContent.Equals(value) != true)))
            {
                _blobContent = value;
                OnPropertyChanged("BlobContent", value);
            }
        }
    }
    
    /// <summary>
    /// Any desired contact information regarding, e.g., the
    /// form item, authoring process, certifications, code or coding
    /// processs.
    /// </summary>
    [XmlElement("Contact", Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<ContactType> Contact
    {
        get
        {
            return _contact;
        }
        set
        {
            if ((_contact == value))
            {
                return;
            }
            if (((_contact == null) 
                        || (_contact.Equals(value) != true)))
            {
                _contact = value;
                OnPropertyChanged("Contact", value);
            }
        }
    }
    
    /// <summary>
    /// Coding, terminology, classification, keyword, or local
    /// values
    /// </summary>
    [XmlElement("CodedValue", Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<CodingType> CodedValue
    {
        get
        {
            return _codedValue;
        }
        set
        {
            if ((_codedValue == value))
            {
                return;
            }
            if (((_codedValue == null) 
                        || (_codedValue.Equals(value) != true)))
            {
                _codedValue = value;
                OnPropertyChanged("CodedValue", value);
            }
        }
    }
    
    [XmlElement("OnEnter", Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<EventType> OnEnter
    {
        get
        {
            return _onEnter;
        }
        set
        {
            if ((_onEnter == value))
            {
                return;
            }
            if (((_onEnter == null) 
                        || (_onEnter.Equals(value) != true)))
            {
                _onEnter = value;
                OnPropertyChanged("OnEnter", value);
            }
        }
    }
    
    [XmlElement("OnExit", Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<EventType> OnExit
    {
        get
        {
            return _onExit;
        }
        set
        {
            if ((_onExit == value))
            {
                return;
            }
            if (((_onExit == null) 
                        || (_onExit.Equals(value) != true)))
            {
                _onExit = value;
                OnPropertyChanged("OnExit", value);
            }
        }
    }
    
    /// <summary>
    /// Generic event handler - eventName must be
    /// specified.
    /// </summary>
    [XmlElement("OnEvent", Order=6)]
    [JsonProperty(Order=6, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<OnEventType> OnEvent
    {
        get
        {
            return _onEvent;
        }
        set
        {
            if ((_onEvent == value))
            {
                return;
            }
            if (((_onEvent == null) 
                        || (_onEvent.Equals(value) != true)))
            {
                _onEvent = value;
                OnPropertyChanged("OnEvent", value);
            }
        }
    }
    
    /// <summary>
    /// Activate the DisplayedType item if the guard
    /// conditions are met.
    /// </summary>
    [XmlElement(Order=7)]
    [JsonProperty(Order=7, NullValueHandling=NullValueHandling.Ignore)]
    public virtual PredGuardType ActivateIf
    {
        get
        {
            return _activateIf;
        }
        set
        {
            if ((_activateIf == value))
            {
                return;
            }
            if (((_activateIf == null) 
                        || (_activateIf.Equals(value) != true)))
            {
                _activateIf = value;
                OnPropertyChanged("ActivateIf", value);
            }
        }
    }
    
    /// <summary>
    /// DeActivate the DisplayedType item if the guard
    /// conditions are met.
    /// </summary>
    [XmlElement(Order=8)]
    [JsonProperty(Order=8, NullValueHandling=NullValueHandling.Ignore)]
    public virtual PredGuardType DeActivateIf
    {
        get
        {
            return _deActivateIf;
        }
        set
        {
            if ((_deActivateIf == value))
            {
                return;
            }
            if (((_deActivateIf == null) 
                        || (_deActivateIf.Equals(value) != true)))
            {
                _deActivateIf = value;
                OnPropertyChanged("DeActivateIf", value);
            }
        }
    }
    
    /// <summary>
    /// The primary text to show on the form. Also known as
    /// "prompt" or "label" or "visibleText" or "caption"
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string title
    {
        get
        {
            return _title;
        }
        set
        {
            if ((_title == value))
            {
                return;
            }
            if (((_title == null) 
                        || (_title.Equals(value) != true)))
            {
                _title = value;
                OnPropertyChanged("title", value);
            }
        }
    }
    
    /// <summary>
    /// Determines whether the user can interact with the
    /// displayed item when the form is first displayed. All disabled items are
    /// treated as read-only: they are visible but may not be edited. The
    /// attribute value is inherited by descendants.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(true)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool enabled
    {
        get
        {
            return _enabled;
        }
        set
        {
            if ((_enabled.Equals(value) != true))
            {
                _enabled = value;
                OnPropertyChanged("enabled", value);
            }
            _shouldSerializeenabled = true;
        }
    }
    
    /// <summary>
    /// Determines whether the item should be visible on a
    /// computer screen when the form is first displayed. The attribute value is
    /// inherited by descendants.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(true)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool visible
    {
        get
        {
            return _visible;
        }
        set
        {
            if ((_visible.Equals(value) != true))
            {
                _visible = value;
                OnPropertyChanged("visible", value);
            }
            _shouldSerializevisible = true;
        }
    }
    
    /// <summary>
    /// If this attribute is set to "true" (the default), then the
    /// form implementation must make this item available for use on the form.
    /// If this attribute is set to "false" on a parent or ancestor item, then
    /// all child/descendant items inherit this "false" setting, even if they
    /// have this attribute set to "true." In other words, the child/descendent
    /// items do not need to be implemented if any parent/ancestor item has this
    /// attribute set to false.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(true)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool mustImplement
    {
        get
        {
            return _mustImplement;
        }
        set
        {
            if ((_mustImplement.Equals(value) != true))
            {
                _mustImplement = value;
                OnPropertyChanged("mustImplement", value);
            }
            _shouldSerializemustImplement = true;
        }
    }
    
    /// <summary>
    /// CHANGED to T/F/Optional If @showInReport on a Question is
    /// false, then the Question and its ListItems (if any) should not be
    /// present in a typical report derived from this template. If this
    /// attribute appears on a ListItem, then the entire question and all
    /// ListItems should be omitted from the report. If this attribute appears
    /// on a Section, then the entire Section and all Section contents
    /// (descendents) should be omitted from the report. If @showInReport
    /// appears on a DisplayedItem, then the DisplayedItem should be omitted
    /// from the report. This attribute is usually set to false when a Question
    /// is used to control form behavior (e.g., skip logic), or when the
    /// Question provides unhelpful "negative" information about actions that
    /// did not occur or were not performed, or things that were not
    /// observed.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(DisplayedTypeShowInReport.True)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    [JsonConverter(typeof(StringEnumConverter))]
    public virtual DisplayedTypeShowInReport showInReport
    {
        get
        {
            return _showInReport;
        }
        set
        {
            if ((_showInReport.Equals(value) != true))
            {
                _showInReport = value;
                OnPropertyChanged("showInReport", value);
            }
            _shouldSerializeshowInReport = true;
        }
    }
    
    /// <summary>
    /// Test whether Link should be serialized
    /// </summary>
    public virtual bool ShouldSerializeLink()
    {
        return Link != null && Link.Count > 0;
    }
    
    /// <summary>
    /// Test whether BlobContent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBlobContent()
    {
        return BlobContent != null && BlobContent.Count > 0;
    }
    
    /// <summary>
    /// Test whether Contact should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContact()
    {
        return Contact != null && Contact.Count > 0;
    }
    
    /// <summary>
    /// Test whether CodedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodedValue()
    {
        return CodedValue != null && CodedValue.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEnter should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEnter()
    {
        return OnEnter != null && OnEnter.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnExit should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnExit()
    {
        return OnExit != null && OnExit.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEvent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEvent()
    {
        return OnEvent != null && OnEvent.Count > 0;
    }

		/// <summary>
		/// Test whether enabled should be serialized
		/// </summary>
		public virtual bool ShouldSerializeenabled()
		{

			if (_shouldSerializeenabled)
			{
			    return true;
			}
			return (_enabled != true);  //rm changed 2022_09_21
		}

		/// <summary>
		/// Test whether visible should be serialized
		/// </summary>
		public virtual bool ShouldSerializevisible()
		{
			if (_shouldSerializevisible)
			{
				return true;
			}
			return (_visible != true); // rm changed 2022_09_21
		}

		/// <summary>
		/// Test whether mustImplement should be serialized
		/// </summary>
		public virtual bool ShouldSerializemustImplement()
		{
			if (_shouldSerializemustImplement)
			{
				return true;
			}
			return (_mustImplement != true); // rm changed 2022_09_21
		}

		/// <summary>
		/// Test whether showInReport should be serialized
		/// </summary>
		public virtual bool ShouldSerializeshowInReport()
		{
			// rm changed 2022_09_21
			if (_shouldSerializeshowInReport)
			{
				return true;
			}
			return (_showInReport != default(DisplayedTypeShowInReport));
		}

		/// <summary>
		/// Test whether ActivateIf should be serialized
		/// </summary>
		public virtual bool ShouldSerializeActivateIf()
		{
			return (_activateIf != null);
		}

		/// <summary>
		/// Test whether DeActivateIf should be serialized
		/// </summary>
		public virtual bool ShouldSerializeDeActivateIf()
		{
			return (_deActivateIf != null);
		}

		/// <summary>
		/// Test whether title should be serialized
		/// </summary>
		public virtual bool ShouldSerializetitle()
		{
			return !string.IsNullOrEmpty(title);
		}
	}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("DataStoreType")]
public partial class DataStoreType : ExtensionBaseType
{
    #region Private fields
    private DataStoreTypeSecurityInfo _securityInfo;
    private string_Stype _dataStoreLocation;
    private string_Stype _databaseSoftware;
    private string_Stype _databaseName;
    private string_Stype _connectiontonString;
    private string_Stype _otherConnectionParameters;
    private bool _securityInfoSpecified;
    private bool _dataStoreLocationSpecified;
    private bool _databaseSoftwareSpecified;
    private bool _databaseNameSpecified;
    private bool _connectiontonStringSpecified;
    private bool _otherConnectionParametersSpecified;
    #endregion
    
    /// <summary>
    /// Logon credentials should be provided only if the connection is trusted, secure, and encrypted.  Whenever possible, this information should not be communicated in this manner, and another security model should be adopted.
    /// </summary>
    [XmlElement(Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual DataStoreTypeSecurityInfo SecurityInfo
    {
        get
        {
            return _securityInfo;
        }
        set
        {
            if ((_securityInfo == value))
            {
                return;
            }
            if (((_securityInfo == null) 
                        || (_securityInfo.Equals(value) != true)))
            {
                _securityInfo = value;
                OnPropertyChanged("SecurityInfo", value);
            }
        }
    }
    
    /// <summary>
    /// The path to the database server.
    /// </summary>
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype DataStoreLocation
    {
        get
        {
            return _dataStoreLocation;
        }
        set
        {
            if ((_dataStoreLocation == value))
            {
                return;
            }
            if (((_dataStoreLocation == null) 
                        || (_dataStoreLocation.Equals(value) != true)))
            {
                _dataStoreLocation = value;
                OnPropertyChanged("DataStoreLocation", value);
            }
        }
    }
    
    [XmlElement(Order=2)]
    [RequiredAttribute()]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype DatabaseSoftware
    {
        get
        {
            return _databaseSoftware;
        }
        set
        {
            if ((_databaseSoftware == value))
            {
                return;
            }
            if (((_databaseSoftware == null) 
                        || (_databaseSoftware.Equals(value) != true)))
            {
                ValidationContext validatorPropContext = new ValidationContext(this, null, null);
                validatorPropContext.MemberName = "DatabaseSoftware";
                Validator.ValidateProperty(value, validatorPropContext);
                _databaseSoftware = value;
                OnPropertyChanged("DatabaseSoftware", value);
            }
        }
    }
    
    [XmlElement(Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype DatabaseName
    {
        get
        {
            return _databaseName;
        }
        set
        {
            if ((_databaseName == value))
            {
                return;
            }
            if (((_databaseName == null) 
                        || (_databaseName.Equals(value) != true)))
            {
                _databaseName = value;
                OnPropertyChanged("DatabaseName", value);
            }
        }
    }
    
    [XmlElement(Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype ConnectiontonString
    {
        get
        {
            return _connectiontonString;
        }
        set
        {
            if ((_connectiontonString == value))
            {
                return;
            }
            if (((_connectiontonString == null) 
                        || (_connectiontonString.Equals(value) != true)))
            {
                _connectiontonString = value;
                OnPropertyChanged("ConnectiontonString", value);
            }
        }
    }
    
    [XmlElement(Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype OtherConnectionParameters
    {
        get
        {
            return _otherConnectionParameters;
        }
        set
        {
            if ((_otherConnectionParameters == value))
            {
                return;
            }
            if (((_otherConnectionParameters == null) 
                        || (_otherConnectionParameters.Equals(value) != true)))
            {
                _otherConnectionParameters = value;
                OnPropertyChanged("OtherConnectionParameters", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool SecurityInfoSpecified
    {
        get
        {
            return _securityInfoSpecified;
        }
        set
        {
            _securityInfoSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DataStoreLocationSpecified
    {
        get
        {
            return _dataStoreLocationSpecified;
        }
        set
        {
            _dataStoreLocationSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DatabaseSoftwareSpecified
    {
        get
        {
            return _databaseSoftwareSpecified;
        }
        set
        {
            _databaseSoftwareSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DatabaseNameSpecified
    {
        get
        {
            return _databaseNameSpecified;
        }
        set
        {
            _databaseNameSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool ConnectiontonStringSpecified
    {
        get
        {
            return _connectiontonStringSpecified;
        }
        set
        {
            _connectiontonStringSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool OtherConnectionParametersSpecified
    {
        get
        {
            return _otherConnectionParametersSpecified;
        }
        set
        {
            _otherConnectionParametersSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether SecurityInfo should be serialized
    /// </summary>
    public virtual bool ShouldSerializeSecurityInfo()
    {
        return (_securityInfo != null);
    }
    
    /// <summary>
    /// Test whether DataStoreLocation should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDataStoreLocation()
    {
        return (_dataStoreLocation != null);
    }
    
    /// <summary>
    /// Test whether DatabaseSoftware should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDatabaseSoftware()
    {
        return (_databaseSoftware != null);
    }
    
    /// <summary>
    /// Test whether DatabaseName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDatabaseName()
    {
        return (_databaseName != null);
    }
    
    /// <summary>
    /// Test whether ConnectiontonString should be serialized
    /// </summary>
    public virtual bool ShouldSerializeConnectiontonString()
    {
        return (_connectiontonString != null);
    }
    
    /// <summary>
    /// Test whether OtherConnectionParameters should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOtherConnectionParameters()
    {
        return (_otherConnectionParameters != null);
    }
}
}
#pragma warning restore

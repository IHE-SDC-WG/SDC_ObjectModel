// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
/// </summary>
[XmlInclude(typeof(ScriptCodeAnyType))]
[XmlInclude(typeof(ActSetAttrValueScriptType))]
[XmlInclude(typeof(ScriptCodeBoolType))]
[XmlInclude(typeof(ScriptBoolFuncActionType))]
[XmlInclude(typeof(ActSetBoolAttributeValueCodeType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("ScriptCodeBaseType")]
public abstract partial class ScriptCodeBaseType : ExtensionBaseType
{
    private bool _shouldSerializeallowNull;
    private bool _shouldSerializereturnList;
    private bool _returnList;
    private string _listDelimiter;
    private string _objectTypeName;
    private string _objectFormat;
    private bool _allowNull;
    private string _returnVal;
    private string _language;
    private string _code;
    private bool _returnListSpecified;
    private bool _listDelimiterSpecified;
    private bool _objectTypeNameSpecified;
    private bool _objectFormatSpecified;
    private bool _allowNullSpecified;
    private bool _returnValSpecified;
    private bool _languageSpecified;
    private bool _codeSpecified;
    /// <summary>
    /// ScriptCodeBaseType class constructor
    /// </summary>
    public ScriptCodeBaseType()
    {
        _returnList = false;
        _listDelimiter = "|";
        _allowNull = true;
    }
    
    [XmlAttribute]
    [DefaultValue(false)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool returnList
    {
        get
        {
            return _returnList;
        }
        set
        {
            if ((_returnList.Equals(value) != true))
            {
                _returnList = value;
                OnPropertyChanged("returnList", value);
            }
            _shouldSerializereturnList = true;
        }
    }
    
    [XmlAttribute]
    [DefaultValue("|")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string listDelimiter
    {
        get
        {
            return _listDelimiter;
        }
        set
        {
            if ((_listDelimiter == value))
            {
                return;
            }
            if (((_listDelimiter == null) 
                        || (_listDelimiter.Equals(value) != true)))
            {
                _listDelimiter = value;
                OnPropertyChanged("listDelimiter", value);
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string objectTypeName
    {
        get
        {
            return _objectTypeName;
        }
        set
        {
            if ((_objectTypeName == value))
            {
                return;
            }
            if (((_objectTypeName == null) 
                        || (_objectTypeName.Equals(value) != true)))
            {
                _objectTypeName = value;
                OnPropertyChanged("objectTypeName", value);
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string objectFormat
    {
        get
        {
            return _objectFormat;
        }
        set
        {
            if ((_objectFormat == value))
            {
                return;
            }
            if (((_objectFormat == null) 
                        || (_objectFormat.Equals(value) != true)))
            {
                _objectFormat = value;
                OnPropertyChanged("objectFormat", value);
            }
        }
    }
    
    [XmlAttribute]
    [DefaultValue(true)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool allowNull
    {
        get
        {
            return _allowNull;
        }
        set
        {
            if ((_allowNull.Equals(value) != true))
            {
                _allowNull = value;
                OnPropertyChanged("allowNull", value);
            }
            _shouldSerializeallowNull = true;
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string returnVal
    {
        get
        {
            return _returnVal;
        }
        set
        {
            if ((_returnVal == value))
            {
                return;
            }
            if (((_returnVal == null) 
                        || (_returnVal.Equals(value) != true)))
            {
                _returnVal = value;
                OnPropertyChanged("returnVal", value);
            }
        }
    }
    
    /// <summary>
    /// Programming language.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string language
    {
        get
        {
            return _language;
        }
        set
        {
            if ((_language == value))
            {
                return;
            }
            if (((_language == null) 
                        || (_language.Equals(value) != true)))
            {
                _language = value;
                OnPropertyChanged("language", value);
            }
        }
    }
    
    /// <summary>
    /// Script contents.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string code
    {
        get
        {
            return _code;
        }
        set
        {
            if ((_code == value))
            {
                return;
            }
            if (((_code == null) 
                        || (_code.Equals(value) != true)))
            {
                _code = value;
                OnPropertyChanged("code", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool returnListSpecified
    {
        get
        {
            return _returnListSpecified;
        }
        set
        {
            _returnListSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool listDelimiterSpecified
    {
        get
        {
            return _listDelimiterSpecified;
        }
        set
        {
            _listDelimiterSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool objectTypeNameSpecified
    {
        get
        {
            return _objectTypeNameSpecified;
        }
        set
        {
            _objectTypeNameSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool objectFormatSpecified
    {
        get
        {
            return _objectFormatSpecified;
        }
        set
        {
            _objectFormatSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool allowNullSpecified
    {
        get
        {
            return _allowNullSpecified;
        }
        set
        {
            _allowNullSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool returnValSpecified
    {
        get
        {
            return _returnValSpecified;
        }
        set
        {
            _returnValSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool languageSpecified
    {
        get
        {
            return _languageSpecified;
        }
        set
        {
            _languageSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool codeSpecified
    {
        get
        {
            return _codeSpecified;
        }
        set
        {
            _codeSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether returnList should be serialized
    /// </summary>
    public virtual bool ShouldSerializereturnList()
    {
        if (_shouldSerializereturnList)
        {
            return true;
        }
        return (returnList != default(bool));
    }
    
    /// <summary>
    /// Test whether allowNull should be serialized
    /// </summary>
    public virtual bool ShouldSerializeallowNull()
    {
        if (_shouldSerializeallowNull)
        {
            return true;
        }
        return (allowNull != default(bool));
    }
    
    /// <summary>
    /// Test whether listDelimiter should be serialized
    /// </summary>
    public virtual bool ShouldSerializelistDelimiter()
    {
        return !string.IsNullOrEmpty(listDelimiter);
    }
    
    /// <summary>
    /// Test whether objectTypeName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeobjectTypeName()
    {
        return !string.IsNullOrEmpty(objectTypeName);
    }
    
    /// <summary>
    /// Test whether objectFormat should be serialized
    /// </summary>
    public virtual bool ShouldSerializeobjectFormat()
    {
        return !string.IsNullOrEmpty(objectFormat);
    }
    
    /// <summary>
    /// Test whether returnVal should be serialized
    /// </summary>
    public virtual bool ShouldSerializereturnVal()
    {
        return !string.IsNullOrEmpty(returnVal);
    }
    
    /// <summary>
    /// Test whether language should be serialized
    /// </summary>
    public virtual bool ShouldSerializelanguage()
    {
        return !string.IsNullOrEmpty(language);
    }
    
    /// <summary>
    /// Test whether code should be serialized
    /// </summary>
    public virtual bool ShouldSerializecode()
    {
        return !string.IsNullOrEmpty(code);
    }
}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type represents any type of coding, terminology, classification, keyword, or local value system that may be applied to any displayable item in a
/// FormDesign template.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("CodingType")]
public partial class CodingType : ExtensionBaseType
{
    private string_Stype _code;
    private DataTypes_SType _typedValue;
    private RichTextType _codeText;
    private CodeMatchType _codeMatch;
    private CodeSystemType _codeSystem;
    private anyURI_Stype _codeURI;
    private UnitsType _units;
    private bool _codeSpecified;
    private bool _typedValueSpecified;
    private bool _codeTextSpecified;
    private bool _codeMatchSpecified;
    private bool _codeSystemSpecified;
    private bool _codeURISpecified;
    private bool _unitsSpecified;
    /// <summary>
    /// A standard code, or a local value from a custom coding system, that can be used to consistently identify, or provide a
    /// standard value for, the coded item.
    /// </summary>
    [XmlElement(IsNullable=true, Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Code
    {
        get
        {
            return _code;
        }
        set
        {
            if ((_code == value))
            {
                return;
            }
            if (((_code == null) 
                        || (_code.Equals(value) != true)))
            {
                _code = value;
                OnPropertyChanged("Code", value);
            }
        }
    }
    
    /// <summary>
    /// Data type enumeration derived from W3C XML Schema. If
    /// the code is derived from a local value system (e.g., numbered answer
    /// choices such as clock positions, tumor grades, or clinical scoring
    /// systems), then the data type of the local value may be specified
    /// here. This may be important if the code value will need to be
    /// manipulated mathematically.
    /// </summary>
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual DataTypes_SType TypedValue
    {
        get
        {
            return _typedValue;
        }
        set
        {
            if ((_typedValue == value))
            {
                return;
            }
            if (((_typedValue == null) 
                        || (_typedValue.Equals(value) != true)))
            {
                _typedValue = value;
                OnPropertyChanged("TypedValue", value);
            }
        }
    }
    
    /// <summary>
    /// The human readable text that accompanies the assigned code and represents the code's precise meaning (semantics) or
    /// usage.
    /// </summary>
    [XmlElement(Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual RichTextType CodeText
    {
        get
        {
            return _codeText;
        }
        set
        {
            if ((_codeText == value))
            {
                return;
            }
            if (((_codeText == null) 
                        || (_codeText.Equals(value) != true)))
            {
                _codeText = value;
                OnPropertyChanged("CodeText", value);
            }
        }
    }
    
    /// <summary>
    /// Degree of match between the mapped item and the assigned code - @codeMatchType holds an entry from an enumerated
    /// list of match types.
    /// </summary>
    [XmlElement(Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual CodeMatchType CodeMatch
    {
        get
        {
            return _codeMatch;
        }
        set
        {
            if ((_codeMatch == value))
            {
                return;
            }
            if (((_codeMatch == null) 
                        || (_codeMatch.Equals(value) != true)))
            {
                _codeMatch = value;
                OnPropertyChanged("CodeMatch", value);
            }
        }
    }
    
    [XmlElement(Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual CodeSystemType CodeSystem
    {
        get
        {
            return _codeSystem;
        }
        set
        {
            if ((_codeSystem == value))
            {
                return;
            }
            if (((_codeSystem == null) 
                        || (_codeSystem.Equals(value) != true)))
            {
                _codeSystem = value;
                OnPropertyChanged("CodeSystem", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Web resource that provides information about the code
    /// </summary>
    [XmlElement(Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual anyURI_Stype CodeURI
    {
        get
        {
            return _codeURI;
        }
        set
        {
            if ((_codeURI == value))
            {
                return;
            }
            if (((_codeURI == null) 
                        || (_codeURI.Equals(value) != true)))
            {
                _codeURI = value;
                OnPropertyChanged("CodeURI", value);
            }
        }
    }
    
    [XmlElement(Order=6)]
    [JsonProperty(Order=6, NullValueHandling=NullValueHandling.Ignore)]
    public virtual UnitsType Units
    {
        get
        {
            return _units;
        }
        set
        {
            if ((_units == value))
            {
                return;
            }
            if (((_units == null) 
                        || (_units.Equals(value) != true)))
            {
                _units = value;
                OnPropertyChanged("Units", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeSpecified
    {
        get
        {
            return _codeSpecified;
        }
        set
        {
            _codeSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool TypedValueSpecified
    {
        get
        {
            return _typedValueSpecified;
        }
        set
        {
            _typedValueSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeTextSpecified
    {
        get
        {
            return _codeTextSpecified;
        }
        set
        {
            _codeTextSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeMatchSpecified
    {
        get
        {
            return _codeMatchSpecified;
        }
        set
        {
            _codeMatchSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeSystemSpecified
    {
        get
        {
            return _codeSystemSpecified;
        }
        set
        {
            _codeSystemSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeURISpecified
    {
        get
        {
            return _codeURISpecified;
        }
        set
        {
            _codeURISpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool UnitsSpecified
    {
        get
        {
            return _unitsSpecified;
        }
        set
        {
            _unitsSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether Code should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCode()
    {
        return (Code != null);
    }
    
    /// <summary>
    /// Test whether TypedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTypedValue()
    {
        return (TypedValue != null);
    }
    
    /// <summary>
    /// Test whether CodeText should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeText()
    {
        return (CodeText != null);
    }
    
    /// <summary>
    /// Test whether CodeMatch should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeMatch()
    {
        return (CodeMatch != null);
    }
    
    /// <summary>
    /// Test whether CodeSystem should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeSystem()
    {
        return (CodeSystem != null);
    }
    
    /// <summary>
    /// Test whether CodeURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeURI()
    {
        return (CodeURI != null);
    }
    
    /// <summary>
    /// Test whether Units should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUnits()
    {
        return (Units != null);
    }
}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// UnitsType represents the measurement standard and its abbreviated notation for quantifiable objects, e.g., miles, km, mm, cm, etc. The default system for standard notations is UCUM.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("UnitsType")]
public partial class UnitsType : string_Stype
{
    private string _unitSystem;
    private bool _unitSystemSpecified;
    /// <summary>
    /// UnitsType class constructor
    /// </summary>
    public UnitsType()
    {
        _unitSystem = "UCUM";
    }
    
    [XmlAttribute]
    [DefaultValue("UCUM")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string unitSystem
    {
        get
        {
            return _unitSystem;
        }
        set
        {
            if ((_unitSystem == value))
            {
                return;
            }
            if (((_unitSystem == null) 
                        || (_unitSystem.Equals(value) != true)))
            {
                _unitSystem = value;
                OnPropertyChanged("unitSystem", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool unitSystemSpecified
    {
        get
        {
            return _unitSystemSpecified;
        }
        set
        {
            _unitSystemSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether unitSystem should be serialized
    /// </summary>
    public virtual bool ShouldSerializeunitSystem()
    {
        return !string.IsNullOrEmpty(unitSystem);
    }
}
}
#pragma warning restore

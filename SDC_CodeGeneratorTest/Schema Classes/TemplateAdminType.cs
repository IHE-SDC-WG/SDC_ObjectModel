// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Contains information about a registered package, including a description of the package contents and purpose (PackageDescription), information about the registry that contains the package XML (RegistryData), and information about the package file characteristics (TemplateFile).
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[XmlRootAttribute("TemplateAdmin", Namespace="urn:ihe:qrph:sdc:2016", IsNullable=false)]
[JsonObject("TemplateAdminType")]
public partial class TemplateAdminType : ExtensionBaseType
{
    private List<RichTextType> _packageDescription;
    private RegistryType _registryData;
    private FileType _templateFile;
    private List<TemplateAdminTypeDigitalSignature> _digitalSignature;
    private bool _packageDescriptionSpecified;
    private bool _registryDataSpecified;
    private bool _templateFileSpecified;
    private bool _digitalSignatureSpecified;
    /// <summary>
    /// Description of the XML package contents and the purpose for the contained XML templates.
    /// </summary>
    [XmlElement("PackageDescription", Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<RichTextType> PackageDescription
    {
        get
        {
            return _packageDescription;
        }
        set
        {
            if ((_packageDescription == value))
            {
                return;
            }
            if (((_packageDescription == null) 
                        || (_packageDescription.Equals(value) != true)))
            {
                _packageDescription = value;
                OnPropertyChanged("PackageDescription", value);
            }
        }
    }
    
    /// <summary>
    /// Information about the registry that contains the XML template, and registration status of the XML template. (The XML template may contain a package of sub-templates.  In this case, the the RegistryData refers primarily to the package, not the sub-templates.)
    /// </summary>
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual RegistryType RegistryData
    {
        get
        {
            return _registryData;
        }
        set
        {
            if ((_registryData == value))
            {
                return;
            }
            if (((_registryData == null) 
                        || (_registryData.Equals(value) != true)))
            {
                _registryData = value;
                OnPropertyChanged("RegistryData", value);
            }
        }
    }
    
    /// <summary>
    /// Information about the  XML template's file characteristics (The XML template may contain a package of sub-templates.  In this case, the the RegistryData refers primarily to the entire package, not the sub-templates.)
    /// </summary>
    [XmlElement(Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual FileType TemplateFile
    {
        get
        {
            return _templateFile;
        }
        set
        {
            if ((_templateFile == value))
            {
                return;
            }
            if (((_templateFile == null) 
                        || (_templateFile.Equals(value) != true)))
            {
                _templateFile = value;
                OnPropertyChanged("TemplateFile", value);
            }
        }
    }
    
    /// <summary>
    /// NEW
    /// </summary>
    [XmlElement("DigitalSignature", Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<TemplateAdminTypeDigitalSignature> DigitalSignature
    {
        get
        {
            return _digitalSignature;
        }
        set
        {
            if ((_digitalSignature == value))
            {
                return;
            }
            if (((_digitalSignature == null) 
                        || (_digitalSignature.Equals(value) != true)))
            {
                _digitalSignature = value;
                OnPropertyChanged("DigitalSignature", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool PackageDescriptionSpecified
    {
        get
        {
            return _packageDescriptionSpecified;
        }
        set
        {
            _packageDescriptionSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool RegistryDataSpecified
    {
        get
        {
            return _registryDataSpecified;
        }
        set
        {
            _registryDataSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool TemplateFileSpecified
    {
        get
        {
            return _templateFileSpecified;
        }
        set
        {
            _templateFileSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DigitalSignatureSpecified
    {
        get
        {
            return _digitalSignatureSpecified;
        }
        set
        {
            _digitalSignatureSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether PackageDescription should be serialized
    /// </summary>
    public virtual bool ShouldSerializePackageDescription()
    {
        return PackageDescription != null && PackageDescription.Count > 0;
    }
    
    /// <summary>
    /// Test whether DigitalSignature should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDigitalSignature()
    {
        return DigitalSignature != null && DigitalSignature.Count > 0;
    }
    
    /// <summary>
    /// Test whether RegistryData should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRegistryData()
    {
        return (RegistryData != null);
    }
    
    /// <summary>
    /// Test whether TemplateFile should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTemplateFile()
    {
        return (TemplateFile != null);
    }
}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Standard structure for including Binary Large Objects (Blobs) in XML
/// templates. Blobs can handle any type of binary media, such as images, audio, video,
/// and data streams of any specified format (such as a MIME type).
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("BlobType")]
public partial class BlobType : ExtensionBaseType
{
    private List<RichTextType> _description;
    private HashType _hash;
    private BaseType _item;
    private string _mediaType;
    private string _fileExtension;
    private bool _descriptionSpecified;
    private bool _hashSpecified;
    private bool _itemSpecified;
    private bool _mediaTypeSpecified;
    private bool _fileExtensionSpecified;
    [XmlElement("Description", Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual List<RichTextType> Description
    {
        get
        {
            return _description;
        }
        set
        {
            if ((_description == value))
            {
                return;
            }
            if (((_description == null) 
                        || (_description.Equals(value) != true)))
            {
                _description = value;
                OnPropertyChanged("Description", value);
            }
        }
    }
    
    /// <summary>
    /// Binary hash of the blob data
    /// </summary>
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual HashType Hash
    {
        get
        {
            return _hash;
        }
        set
        {
            if ((_hash == value))
            {
                return;
            }
            if (((_hash == null) 
                        || (_hash.Equals(value) != true)))
            {
                _hash = value;
                OnPropertyChanged("Hash", value);
            }
        }
    }
    
    [XmlElement("BinaryMediaBase64", typeof(base64Binary_Stype), Order=2)]
    [XmlElement("BlobURI", typeof(anyURI_Stype), Order=2)]
    public virtual BaseType Item
    {
        get
        {
            return _item;
        }
        set
        {
            if ((_item == value))
            {
                return;
            }
            if (((_item == null) 
                        || (_item.Equals(value) != true)))
            {
                _item = value;
                OnPropertyChanged("Item", value);
            }
        }
    }
    
    /// <summary>
    /// TBD: Must be a valid MIME type - needs enumeration
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string mediaType
    {
        get
        {
            return _mediaType;
        }
        set
        {
            if ((_mediaType == value))
            {
                return;
            }
            if (((_mediaType == null) 
                        || (_mediaType.Equals(value) != true)))
            {
                _mediaType = value;
                OnPropertyChanged("mediaType", value);
            }
        }
    }
    
    /// <summary>
    /// Use a common file extension (e.g., docx) if there is no @MIME_Type available
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string fileExtension
    {
        get
        {
            return _fileExtension;
        }
        set
        {
            if ((_fileExtension == value))
            {
                return;
            }
            if (((_fileExtension == null) 
                        || (_fileExtension.Equals(value) != true)))
            {
                _fileExtension = value;
                OnPropertyChanged("fileExtension", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DescriptionSpecified
    {
        get
        {
            return _descriptionSpecified;
        }
        set
        {
            _descriptionSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool HashSpecified
    {
        get
        {
            return _hashSpecified;
        }
        set
        {
            _hashSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool ItemSpecified
    {
        get
        {
            return _itemSpecified;
        }
        set
        {
            _itemSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool mediaTypeSpecified
    {
        get
        {
            return _mediaTypeSpecified;
        }
        set
        {
            _mediaTypeSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool fileExtensionSpecified
    {
        get
        {
            return _fileExtensionSpecified;
        }
        set
        {
            _fileExtensionSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether Description should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDescription()
    {
        return Description != null && Description.Count > 0;
    }
    
    /// <summary>
    /// Test whether Hash should be serialized
    /// </summary>
    public virtual bool ShouldSerializeHash()
    {
        return (Hash != null);
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (Item != null);
    }
    
    /// <summary>
    /// Test whether mediaType should be serialized
    /// </summary>
    public virtual bool ShouldSerializemediaType()
    {
        return !string.IsNullOrEmpty(mediaType);
    }
    
    /// <summary>
    /// Test whether fileExtension should be serialized
    /// </summary>
    public virtual bool ShouldSerializefileExtension()
    {
        return !string.IsNullOrEmpty(fileExtension);
    }
}
}
#pragma warning restore

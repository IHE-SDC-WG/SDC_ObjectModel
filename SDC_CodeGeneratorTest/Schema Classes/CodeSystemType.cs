// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type represents information about the coding system used in CodingType. It may refer to any type of coding, terminology, classification, keyword, or local value system.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("CodeSystemType")]
public partial class CodeSystemType : ExtensionBaseType
{
    private string_Stype _codeSystemName;
    private dateTime_Stype _releaseDate;
    private string_Stype _version;
    private string_Stype _oID;
    private anyURI_Stype _codeSystemURI;
    private bool _codeSystemNameSpecified;
    private bool _releaseDateSpecified;
    private bool _versionSpecified;
    private bool _oIDSpecified;
    private bool _codeSystemURISpecified;
    /// <summary>
    /// The name of the coding system, as recommended by the
    /// coding system curators, or as recommended by the agency that creates
    /// standards for the code map in use.
    /// </summary>
    [XmlElement(Order=0)]
    [RequiredAttribute()]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype CodeSystemName
    {
        get
        {
            return _codeSystemName;
        }
        set
        {
            if ((_codeSystemName == value))
            {
                return;
            }
            if (((_codeSystemName == null) 
                        || (_codeSystemName.Equals(value) != true)))
            {
                ValidationContext validatorPropContext = new ValidationContext(this, null, null);
                validatorPropContext.MemberName = "CodeSystemName";
                Validator.ValidateProperty(value, validatorPropContext);
                _codeSystemName = value;
                OnPropertyChanged("CodeSystemName", value);
            }
        }
    }
    
    /// <summary>
    /// The day that the selected version of the coding system was released for general use by the coding system curators.
    /// </summary>
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual dateTime_Stype ReleaseDate
    {
        get
        {
            return _releaseDate;
        }
        set
        {
            if ((_releaseDate == value))
            {
                return;
            }
            if (((_releaseDate == null) 
                        || (_releaseDate.Equals(value) != true)))
            {
                _releaseDate = value;
                OnPropertyChanged("ReleaseDate", value);
            }
        }
    }
    
    /// <summary>
    /// Version of the coding system, using the version format defined by the coding system
    /// </summary>
    [XmlElement(Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Version
    {
        get
        {
            return _version;
        }
        set
        {
            if ((_version == value))
            {
                return;
            }
            if (((_version == null) 
                        || (_version.Equals(value) != true)))
            {
                _version = value;
                OnPropertyChanged("Version", value);
            }
        }
    }
    
    /// <summary>
    /// The ISO object identifier (OID) for the coding system, as found at the HL7 OID Registry: https://www.hl7.org/oid/index.cfm
    /// </summary>
    [XmlElement(Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype OID
    {
        get
        {
            return _oID;
        }
        set
        {
            if ((_oID == value))
            {
                return;
            }
            if (((_oID == null) 
                        || (_oID.Equals(value) != true)))
            {
                _oID = value;
                OnPropertyChanged("OID", value);
            }
        }
    }
    
    /// <summary>
    /// Web resource that uniquely identifies the coding system
    /// </summary>
    [XmlElement(Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual anyURI_Stype CodeSystemURI
    {
        get
        {
            return _codeSystemURI;
        }
        set
        {
            if ((_codeSystemURI == value))
            {
                return;
            }
            if (((_codeSystemURI == null) 
                        || (_codeSystemURI.Equals(value) != true)))
            {
                _codeSystemURI = value;
                OnPropertyChanged("CodeSystemURI", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeSystemNameSpecified
    {
        get
        {
            return _codeSystemNameSpecified;
        }
        set
        {
            _codeSystemNameSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool ReleaseDateSpecified
    {
        get
        {
            return _releaseDateSpecified;
        }
        set
        {
            _releaseDateSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool VersionSpecified
    {
        get
        {
            return _versionSpecified;
        }
        set
        {
            _versionSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool OIDSpecified
    {
        get
        {
            return _oIDSpecified;
        }
        set
        {
            _oIDSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool CodeSystemURISpecified
    {
        get
        {
            return _codeSystemURISpecified;
        }
        set
        {
            _codeSystemURISpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether CodeSystemName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeSystemName()
    {
        return (CodeSystemName != null);
    }
    
    /// <summary>
    /// Test whether ReleaseDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeReleaseDate()
    {
        return (ReleaseDate != null);
    }
    
    /// <summary>
    /// Test whether Version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeVersion()
    {
        return (Version != null);
    }
    
    /// <summary>
    /// Test whether OID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOID()
    {
        return (OID != null);
    }
    
    /// <summary>
    /// Test whether CodeSystemURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeSystemURI()
    {
        return (CodeSystemURI != null);
    }
}
}
#pragma warning restore

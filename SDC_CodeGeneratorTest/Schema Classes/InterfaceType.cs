// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type provides information about an Applications Programming Interface (API)
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("InterfaceType")]
public partial class InterfaceType : ExtensionBaseType
{
    private string_Stype _identifer;
    private string_Stype _interfaceName;
    private string_Stype _description;
    private string_Stype _uRL;
    private string_Stype _version;
    private InterfaceTypeFields _fields;
    private InterfaceTypeDocumentation _documentation;
    private bool _identiferSpecified;
    private bool _interfaceNameSpecified;
    private bool _descriptionSpecified;
    private bool _uRLSpecified;
    private bool _versionSpecified;
    private bool _fieldsSpecified;
    private bool _documentationSpecified;
    [XmlElement(Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Identifer
    {
        get
        {
            return _identifer;
        }
        set
        {
            if ((_identifer == value))
            {
                return;
            }
            if (((_identifer == null) 
                        || (_identifer.Equals(value) != true)))
            {
                _identifer = value;
                OnPropertyChanged("Identifer", value);
            }
        }
    }
    
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype InterfaceName
    {
        get
        {
            return _interfaceName;
        }
        set
        {
            if ((_interfaceName == value))
            {
                return;
            }
            if (((_interfaceName == null) 
                        || (_interfaceName.Equals(value) != true)))
            {
                _interfaceName = value;
                OnPropertyChanged("InterfaceName", value);
            }
        }
    }
    
    [XmlElement(Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Description
    {
        get
        {
            return _description;
        }
        set
        {
            if ((_description == value))
            {
                return;
            }
            if (((_description == null) 
                        || (_description.Equals(value) != true)))
            {
                _description = value;
                OnPropertyChanged("Description", value);
            }
        }
    }
    
    [XmlElement(Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype URL
    {
        get
        {
            return _uRL;
        }
        set
        {
            if ((_uRL == value))
            {
                return;
            }
            if (((_uRL == null) 
                        || (_uRL.Equals(value) != true)))
            {
                _uRL = value;
                OnPropertyChanged("URL", value);
            }
        }
    }
    
    [XmlElement(Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype Version
    {
        get
        {
            return _version;
        }
        set
        {
            if ((_version == value))
            {
                return;
            }
            if (((_version == null) 
                        || (_version.Equals(value) != true)))
            {
                _version = value;
                OnPropertyChanged("Version", value);
            }
        }
    }
    
    [XmlElement(Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual InterfaceTypeFields Fields
    {
        get
        {
            return _fields;
        }
        set
        {
            if ((_fields == value))
            {
                return;
            }
            if (((_fields == null) 
                        || (_fields.Equals(value) != true)))
            {
                _fields = value;
                OnPropertyChanged("Fields", value);
            }
        }
    }
    
    [XmlElement(Order=6)]
    [JsonProperty(Order=6, NullValueHandling=NullValueHandling.Ignore)]
    public virtual InterfaceTypeDocumentation Documentation
    {
        get
        {
            return _documentation;
        }
        set
        {
            if ((_documentation == value))
            {
                return;
            }
            if (((_documentation == null) 
                        || (_documentation.Equals(value) != true)))
            {
                _documentation = value;
                OnPropertyChanged("Documentation", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool IdentiferSpecified
    {
        get
        {
            return _identiferSpecified;
        }
        set
        {
            _identiferSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool InterfaceNameSpecified
    {
        get
        {
            return _interfaceNameSpecified;
        }
        set
        {
            _interfaceNameSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DescriptionSpecified
    {
        get
        {
            return _descriptionSpecified;
        }
        set
        {
            _descriptionSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool URLSpecified
    {
        get
        {
            return _uRLSpecified;
        }
        set
        {
            _uRLSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool VersionSpecified
    {
        get
        {
            return _versionSpecified;
        }
        set
        {
            _versionSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool FieldsSpecified
    {
        get
        {
            return _fieldsSpecified;
        }
        set
        {
            _fieldsSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool DocumentationSpecified
    {
        get
        {
            return _documentationSpecified;
        }
        set
        {
            _documentationSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether Identifer should be serialized
    /// </summary>
    public virtual bool ShouldSerializeIdentifer()
    {
        return (Identifer != null);
    }
    
    /// <summary>
    /// Test whether InterfaceName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeInterfaceName()
    {
        return (InterfaceName != null);
    }
    
    /// <summary>
    /// Test whether Description should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDescription()
    {
        return (Description != null);
    }
    
    /// <summary>
    /// Test whether URL should be serialized
    /// </summary>
    public virtual bool ShouldSerializeURL()
    {
        return (URL != null);
    }
    
    /// <summary>
    /// Test whether Version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeVersion()
    {
        return (Version != null);
    }
    
    /// <summary>
    /// Test whether Fields should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFields()
    {
        return (Fields != null);
    }
    
    /// <summary>
    /// Test whether Documentation should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDocumentation()
    {
        return (Documentation != null);
    }
}
}
#pragma warning restore

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("dateTimeStamp_DEtype")]
public partial class dateTimeStamp_DEtype : dateTimeStamp_Stype
{
    private bool _shouldSerializeminInclusive;
    private bool _shouldSerializemaxInclusive;
    private bool _shouldSerializeminExclusive;
    private bool _shouldSerializemaxExclusive;
    private DateTime? _maxExclusive;
    private DateTime? _minExclusive;
    private DateTime? _maxInclusive;
    private DateTime? _minInclusive;
    private string _mask;
    private bool _maskSpecified;
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime maxExclusive
    {
        get
        {
            if (_maxExclusive.HasValue)
            {
                return _maxExclusive.Value;
            }
            else
            {
                return default(System.DateTime);
            }
        }
        set
        {
            if ((_maxExclusive.Equals(value) != true))
            {
                _maxExclusive = value;
                OnPropertyChanged("maxExclusive", value);
            }
            _shouldSerializemaxExclusive = true;
        }
    }
    
    [XmlIgnore]
    public virtual bool maxExclusiveSpecified
    {
        get
        {
            return _maxExclusive.HasValue;
        }
        set
        {
            if (value==false)
            {
                _maxExclusive = null;
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime minExclusive
    {
        get
        {
            if (_minExclusive.HasValue)
            {
                return _minExclusive.Value;
            }
            else
            {
                return default(System.DateTime);
            }
        }
        set
        {
            if ((_minExclusive.Equals(value) != true))
            {
                _minExclusive = value;
                OnPropertyChanged("minExclusive", value);
            }
            _shouldSerializeminExclusive = true;
        }
    }
    
    [XmlIgnore]
    public virtual bool minExclusiveSpecified
    {
        get
        {
            return _minExclusive.HasValue;
        }
        set
        {
            if (value==false)
            {
                _minExclusive = null;
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime maxInclusive
    {
        get
        {
            if (_maxInclusive.HasValue)
            {
                return _maxInclusive.Value;
            }
            else
            {
                return default(System.DateTime);
            }
        }
        set
        {
            if ((_maxInclusive.Equals(value) != true))
            {
                _maxInclusive = value;
                OnPropertyChanged("maxInclusive", value);
            }
            _shouldSerializemaxInclusive = true;
        }
    }
    
    [XmlIgnore]
    public virtual bool maxInclusiveSpecified
    {
        get
        {
            return _maxInclusive.HasValue;
        }
        set
        {
            if (value==false)
            {
                _maxInclusive = null;
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual System.DateTime minInclusive
    {
        get
        {
            if (_minInclusive.HasValue)
            {
                return _minInclusive.Value;
            }
            else
            {
                return default(System.DateTime);
            }
        }
        set
        {
            if ((_minInclusive.Equals(value) != true))
            {
                _minInclusive = value;
                OnPropertyChanged("minInclusive", value);
            }
            _shouldSerializeminInclusive = true;
        }
    }
    
    [XmlIgnore]
    public virtual bool minInclusiveSpecified
    {
        get
        {
            return _minInclusive.HasValue;
        }
        set
        {
            if (value==false)
            {
                _minInclusive = null;
            }
        }
    }
    
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string mask
    {
        get
        {
            return _mask;
        }
        set
        {
            if ((_mask == value))
            {
                return;
            }
            if (((_mask == null) 
                        || (_mask.Equals(value) != true)))
            {
                _mask = value;
                OnPropertyChanged("mask", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool maskSpecified
    {
        get
        {
            return _maskSpecified;
        }
        set
        {
            _maskSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether maxExclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxExclusive()
    {
        if (_shouldSerializemaxExclusive)
        {
            return true;
        }
        return (maxExclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether minExclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminExclusive()
    {
        if (_shouldSerializeminExclusive)
        {
            return true;
        }
        return (minExclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether maxInclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxInclusive()
    {
        if (_shouldSerializemaxInclusive)
        {
            return true;
        }
        return (maxInclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether minInclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminInclusive()
    {
        if (_shouldSerializeminInclusive)
        {
            return true;
        }
        return (minInclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether mask should be serialized
    /// </summary>
    public virtual bool ShouldSerializemask()
    {
        return !string.IsNullOrEmpty(mask);
    }
}
}
#pragma warning restore

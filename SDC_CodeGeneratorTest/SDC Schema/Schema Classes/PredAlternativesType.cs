// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This Rule tests if one (or more) items in a list of items has received
/// a a valid user response (answer). In the simplest case, this Rule allows a user to
/// answer only one of several alternative questions (named in the @itemNames list), and
/// still save a successfully-validated form. In more complex cases, a user can be
/// required to produce a valid response to a specific minimum and maximum number of
/// Questions, Sections, ListItems or Injected parts. The minCard value on each of the
/// alternative items should be set to "0" (i.e., optional) to avoid validation
/// conflicts when minCard greater than 0. The list of Item @name values is contained in
/// @itemNames. The list must contain at least 2 @name values. The minimum number of
/// items to answer is contained in @minAnswered (default value = 1). If there is a
/// maximum number of items to answer, the value is contained in @maxAnswered (default
/// value = 0 meaning unlimited).
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("PredAlternativesType")]
public partial class PredAlternativesType : FuncBoolBaseType
{
    #region Private fields
    private bool _shouldSerializemaxAnswered;
    private bool _shouldSerializeminAnswered;
    private bool _shouldSerializenot;
    private bool _not;
    private int _minAnswered;
    private int _maxAnswered;
    private string _itemNames;
    #endregion
    
    /// <summary>
    /// PredAlternativesType class constructor
    /// </summary>
    public PredAlternativesType()
    {
        _not = false;
        _minAnswered = 1;
        _maxAnswered = 0;
    }
    
    [XmlAttribute]
    [DefaultValue(false)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual bool not
    {
        get
        {
            return _not;
        }
        set
        {
            if ((_not.Equals(value) != true))
            {
                _not = value;
                OnPropertyChanged("not", value);
            }
            _shouldSerializenot = true;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(1)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual int minAnswered
    {
        get
        {
            return _minAnswered;
        }
        set
        {
            if ((_minAnswered.Equals(value) != true))
            {
                _minAnswered = value;
                OnPropertyChanged("minAnswered", value);
            }
            _shouldSerializeminAnswered = true;
        }
    }
    
    /// <summary>
    /// @maxAnswered must be 0 or greater than or equal to
    /// @minAnswered.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(0)]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual int maxAnswered
    {
        get
        {
            return _maxAnswered;
        }
        set
        {
            if ((_maxAnswered.Equals(value) != true))
            {
                _maxAnswered = value;
                OnPropertyChanged("maxAnswered", value);
            }
            _shouldSerializemaxAnswered = true;
        }
    }
    
    /// <summary>
    /// List of names of Sections, Questions, ListItems and/or
    /// InjectedItems. Each of the named items will evaluate to true or false,
    /// based on the following validation rules: If the name points to a
    /// Section, then the Section evaluates to true (valid) if all of its
    /// descendant items are answered correctly, according to their metadata. If
    /// the name points to a Question then the Question evaluates to true
    /// (valid) if it is correctly answered according to its metadata, and also,
    /// all descendant items are answered correctly, according to their
    /// metadata. If the name points to a ListItem then the ListItem evaluates
    /// to true (valid) if it is selected, and also, all descendant items are
    /// answered correctly according to their metadata. If the name points to an
    /// InjectedItem then the InjectedItem evaluates to true (valid) if all
    /// descendant items are answered correctly, according to their metadata.
    /// The number of true responses are added together. If they satisfy the
    /// minAnswered and maxAnswered attribute values, then this type returns
    /// true. Otherwise it returns false.
    /// </summary>
    [XmlAttribute(DataType="NMTOKENS")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string itemNames
    {
        get
        {
            return _itemNames;
        }
        set
        {
            if ((_itemNames == value))
            {
                return;
            }
            if (((_itemNames == null) 
                        || (_itemNames.Equals(value) != true)))
            {
                _itemNames = value;
                OnPropertyChanged("itemNames", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether not should be serialized
    /// </summary>
    public virtual bool ShouldSerializenot()
    {
        if (_shouldSerializenot)
        {
            return true;
        }
        return (_not != default(bool));
    }
    
    /// <summary>
    /// Test whether minAnswered should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminAnswered()
    {
        if (_shouldSerializeminAnswered)
        {
            return true;
        }
        return (_minAnswered != default(int));
    }
    
    /// <summary>
    /// Test whether maxAnswered should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxAnswered()
    {
        if (_shouldSerializemaxAnswered)
        {
            return true;
        }
        return (_maxAnswered != default(int));
    }
    
    /// <summary>
    /// Test whether itemNames should be serialized
    /// </summary>
    public virtual bool ShouldSerializeitemNames()
    {
        return !string.IsNullOrEmpty(itemNames);
    }
}
}
#pragma warning restore

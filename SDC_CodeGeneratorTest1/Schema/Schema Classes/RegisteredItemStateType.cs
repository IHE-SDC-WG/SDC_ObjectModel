// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type provides a structure to record status information about a file, template or package stored in a registry.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("RegisteredItemStateType")]
public partial class RegisteredItemStateType : ExtensionBaseType
{
    private AcceptabilityType _acceptability;
    private string_Stype _administrativeStatus;
    private string_Stype _administrativeNote;
    private string_Stype _registrationStatus;
    private date_Stype _registrationStatusDate;
    private date_Stype _effectiveDate;
    private date_Stype _untilDate;
    private string_Stype _previousStatus;
    private bool _acceptabilitySpecified;
    private bool _administrativeStatusSpecified;
    private bool _administrativeNoteSpecified;
    private bool _registrationStatusSpecified;
    private bool _registrationStatusDateSpecified;
    private bool _effectiveDateSpecified;
    private bool _untilDateSpecified;
    private bool _previousStatusSpecified;
    [XmlElement(Order=0)]
    [JsonProperty(Order=0, NullValueHandling=NullValueHandling.Ignore)]
    public virtual AcceptabilityType Acceptability
    {
        get
        {
            return _acceptability;
        }
        set
        {
            if ((_acceptability == value))
            {
                return;
            }
            if (((_acceptability == null) 
                        || (_acceptability.Equals(value) != true)))
            {
                _acceptability = value;
                OnPropertyChanged("Acceptability", value);
            }
        }
    }
    
    [XmlElement(Order=1)]
    [JsonProperty(Order=1, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype AdministrativeStatus
    {
        get
        {
            return _administrativeStatus;
        }
        set
        {
            if ((_administrativeStatus == value))
            {
                return;
            }
            if (((_administrativeStatus == null) 
                        || (_administrativeStatus.Equals(value) != true)))
            {
                _administrativeStatus = value;
                OnPropertyChanged("AdministrativeStatus", value);
            }
        }
    }
    
    [XmlElement(Order=2)]
    [JsonProperty(Order=2, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype AdministrativeNote
    {
        get
        {
            return _administrativeNote;
        }
        set
        {
            if ((_administrativeNote == value))
            {
                return;
            }
            if (((_administrativeNote == null) 
                        || (_administrativeNote.Equals(value) != true)))
            {
                _administrativeNote = value;
                OnPropertyChanged("AdministrativeNote", value);
            }
        }
    }
    
    [XmlElement(Order=3)]
    [JsonProperty(Order=3, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype RegistrationStatus
    {
        get
        {
            return _registrationStatus;
        }
        set
        {
            if ((_registrationStatus == value))
            {
                return;
            }
            if (((_registrationStatus == null) 
                        || (_registrationStatus.Equals(value) != true)))
            {
                _registrationStatus = value;
                OnPropertyChanged("RegistrationStatus", value);
            }
        }
    }
    
    [XmlElement(Order=4)]
    [JsonProperty(Order=4, NullValueHandling=NullValueHandling.Ignore)]
    public virtual date_Stype RegistrationStatusDate
    {
        get
        {
            return _registrationStatusDate;
        }
        set
        {
            if ((_registrationStatusDate == value))
            {
                return;
            }
            if (((_registrationStatusDate == null) 
                        || (_registrationStatusDate.Equals(value) != true)))
            {
                _registrationStatusDate = value;
                OnPropertyChanged("RegistrationStatusDate", value);
            }
        }
    }
    
    [XmlElement(Order=5)]
    [JsonProperty(Order=5, NullValueHandling=NullValueHandling.Ignore)]
    public virtual date_Stype EffectiveDate
    {
        get
        {
            return _effectiveDate;
        }
        set
        {
            if ((_effectiveDate == value))
            {
                return;
            }
            if (((_effectiveDate == null) 
                        || (_effectiveDate.Equals(value) != true)))
            {
                _effectiveDate = value;
                OnPropertyChanged("EffectiveDate", value);
            }
        }
    }
    
    [XmlElement(Order=6)]
    [JsonProperty(Order=6, NullValueHandling=NullValueHandling.Ignore)]
    public virtual date_Stype UntilDate
    {
        get
        {
            return _untilDate;
        }
        set
        {
            if ((_untilDate == value))
            {
                return;
            }
            if (((_untilDate == null) 
                        || (_untilDate.Equals(value) != true)))
            {
                _untilDate = value;
                OnPropertyChanged("UntilDate", value);
            }
        }
    }
    
    [XmlElement(Order=7)]
    [JsonProperty(Order=7, NullValueHandling=NullValueHandling.Ignore)]
    public virtual string_Stype PreviousStatus
    {
        get
        {
            return _previousStatus;
        }
        set
        {
            if ((_previousStatus == value))
            {
                return;
            }
            if (((_previousStatus == null) 
                        || (_previousStatus.Equals(value) != true)))
            {
                _previousStatus = value;
                OnPropertyChanged("PreviousStatus", value);
            }
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool AcceptabilitySpecified
    {
        get
        {
            return _acceptabilitySpecified;
        }
        set
        {
            _acceptabilitySpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool AdministrativeStatusSpecified
    {
        get
        {
            return _administrativeStatusSpecified;
        }
        set
        {
            _administrativeStatusSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool AdministrativeNoteSpecified
    {
        get
        {
            return _administrativeNoteSpecified;
        }
        set
        {
            _administrativeNoteSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool RegistrationStatusSpecified
    {
        get
        {
            return _registrationStatusSpecified;
        }
        set
        {
            _registrationStatusSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool RegistrationStatusDateSpecified
    {
        get
        {
            return _registrationStatusDateSpecified;
        }
        set
        {
            _registrationStatusDateSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool EffectiveDateSpecified
    {
        get
        {
            return _effectiveDateSpecified;
        }
        set
        {
            _effectiveDateSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool UntilDateSpecified
    {
        get
        {
            return _untilDateSpecified;
        }
        set
        {
            _untilDateSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool PreviousStatusSpecified
    {
        get
        {
            return _previousStatusSpecified;
        }
        set
        {
            _previousStatusSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether Acceptability should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAcceptability()
    {
        return (Acceptability != null);
    }
    
    /// <summary>
    /// Test whether AdministrativeStatus should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAdministrativeStatus()
    {
        return (AdministrativeStatus != null);
    }
    
    /// <summary>
    /// Test whether AdministrativeNote should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAdministrativeNote()
    {
        return (AdministrativeNote != null);
    }
    
    /// <summary>
    /// Test whether RegistrationStatus should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRegistrationStatus()
    {
        return (RegistrationStatus != null);
    }
    
    /// <summary>
    /// Test whether RegistrationStatusDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRegistrationStatusDate()
    {
        return (RegistrationStatusDate != null);
    }
    
    /// <summary>
    /// Test whether EffectiveDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeEffectiveDate()
    {
        return (EffectiveDate != null);
    }
    
    /// <summary>
    /// Test whether UntilDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUntilDate()
    {
        return (UntilDate != null);
    }
    
    /// <summary>
    /// Test whether PreviousStatus should be serialized
    /// </summary>
    public virtual bool ShouldSerializePreviousStatus()
    {
        return (PreviousStatus != null);
    }
}
}
#pragma warning restore

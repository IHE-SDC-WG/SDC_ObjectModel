// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This Rule tests combinations of co-selected ListItems (answers). If
/// more than X items in the @listItemNames list are selected, then the result returns
/// the value of true. Otherwise it is false. X is specified in @maxSelections, and the
/// default is 1. The most common use is to detect ListItem combinations that may not be
/// selected together. In most cases, all ListItems should be children of one
/// multi-select question. Delete this: Legal ("allowed") selections evaluate to false
/// Illegal selections evaluate to true These values can be reversed if @not is set to
/// true Renamed from: IllegalSelectionSets
/// </summary>
[XmlInclude(typeof(SelectionSetsActionType))]
[XmlInclude(typeof(PredSelectionTestType))]
[XmlInclude(typeof(SelectionTestActionType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("PredSingleSelectionSetsType")]
public partial class PredSingleSelectionSetsType : FuncBoolBaseType
{
    private bool _shouldSerializemaxSelections;
    private string _listItemNames;
    private short _maxSelections;
    private bool _listItemNamesSpecified;
    private bool _maxSelectionsSpecified;
    /// <summary>
    /// PredSingleSelectionSetsType class constructor
    /// </summary>
    public PredSingleSelectionSetsType()
    {
        _maxSelections = ((short)(1));
    }
    
    /// <summary>
    /// Set of @name references for a set ListItems, delimited by
    /// spaces.
    /// </summary>
    [XmlAttribute(DataType="NMTOKENS")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string listItemNames
    {
        get
        {
            return _listItemNames;
        }
        set
        {
            if ((_listItemNames == value))
            {
                return;
            }
            if (((_listItemNames == null) 
                        || (_listItemNames.Equals(value) != true)))
            {
                _listItemNames = value;
                OnPropertyChanged("listItemNames", value);
            }
        }
    }
    
    /// <summary>
    /// The maximum number of ListItems in @listItemNames that may
    /// be selected at one time.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(typeof(short), "1")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual short maxSelections
    {
        get
        {
            return _maxSelections;
        }
        set
        {
            if ((_maxSelections.Equals(value) != true))
            {
                _maxSelections = value;
                OnPropertyChanged("maxSelections", value);
            }
            _shouldSerializemaxSelections = true;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool listItemNamesSpecified
    {
        get
        {
            return _listItemNamesSpecified;
        }
        set
        {
            _listItemNamesSpecified = value;
        }
    }
    
    [JsonIgnore]
    [XmlIgnore()]
    public bool maxSelectionsSpecified
    {
        get
        {
            return _maxSelectionsSpecified;
        }
        set
        {
            _maxSelectionsSpecified = value;
        }
    }
    
    /// <summary>
    /// Test whether maxSelections should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxSelections()
    {
        if (_shouldSerializemaxSelections)
        {
            return true;
        }
        return (maxSelections != default(short));
    }
    
    /// <summary>
    /// Test whether listItemNames should be serialized
    /// </summary>
    public virtual bool ShouldSerializelistItemNames()
    {
        return !string.IsNullOrEmpty(listItemNames);
    }
}
}
#pragma warning restore

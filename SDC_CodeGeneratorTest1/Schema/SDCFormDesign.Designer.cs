// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.0.0. www.xsd2code.com
//    {"TargetFramework":"NetCore","NameSpace":"SDC_CodeGeneratorTest1","Properties":{"LazyLoading":true,"VirtualProperties":true,"PropertyNameSpecified":{"GeneratePropertyNameSpecified":"SpecifiedIfHasValue"},"ExpandObjectItem":true},"XmlAttribute":{"Enabled":true,"GenerateOrderXmlAttributes":true},"JsonAttribute":{"NullValueHandling":1,"DefaultValueHandling":1,"Enabled":true},"ClassParams":{},"GenericBaseClass":{"Enabled":true,"GenerateBaseClass":true},"Serialization":{"ShouldSerialize":{},"AdditionalSerializers":{"Xml":true,"Json":true,"Bson":true,"MessagePack":true},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{"Formatting":true,"NullValueHandling":1,"DefaultValueHandling":3},"Enabled":true,"EnableEncoding":true},"TrackingChanges":{"Enabled":true,"GenerateTrackingClasses":true},"Miscellaneous":{"EnableSummaryComment":true},"InitializeFields":"AllExceptOptional"}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC_CodeGeneratorTest1
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Specialized;
    using System.Collections.ObjectModel;
    using System.Reflection;
    using System.Xml;
    using Newtonsoft.Json.Bson;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using MsgPack.Serialization;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    #region Base entity class
    public partial class EntityBase<T>

    {
        private ObjectChangeTracker changeTrackerField;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((changeTrackerField == null))
                {
                    changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(T));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<T>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize EntityBase object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes EntityBase object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out T obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static T Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((T)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static T Deserialize(Stream s)
        {
            return ((T)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EntityBase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize(encoding);
                streamWriter = new StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntityBase object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out T obj, out Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out T obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static T LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static T LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file, encoding);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes EntityBase object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out T obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static T DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<T>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static T LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            settings.Formatting = Newtonsoft.Json.Formatting.Indented;
            settings.NullValueHandling = NullValueHandling.Ignore;
            settings.DefaultValueHandling = DefaultValueHandling.Ignore;
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes EntityBase object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out T obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static T DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            settings.Formatting = Newtonsoft.Json.Formatting.Indented;
            settings.NullValueHandling = NullValueHandling.Ignore;
            settings.DefaultValueHandling = DefaultValueHandling.Ignore;
            return JsonConvert.DeserializeObject<T>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static T LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current EntityBase object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes EntityBase object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out T obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current T object
        /// </summary>
        public static T DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((T)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static T LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }
    #endregion

    #region PropertyValueState class
    public class PropertyValueState
    {
        public string PropertyName { get; set; }
        public object OriginalValue { get; set; }
        public object CurrentValue { get; set; }
        public ObjectState State { get; set; }
    }
    #endregion

    #region ObjectStateChangingEventArgs class
    public class ObjectStateChangingEventArgs : EventArgs
    {
        public ObjectState NewState { get; set; }
    }
    #endregion

    #region ObjectList class
    public class ObjectList : List<object>
    {
    }
    #endregion

    #region ObjectState enum
    public enum ObjectState
    {
        Unchanged,
        Added,
        Modified,
        Deleted,
    }
    #endregion

    #region NotifyTrackableCollectionChangedEventHandler class
    public delegate void NotifyTrackableCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e, string propertyName);
    #endregion

    #region Tracking changes class
    public class ObjectChangeTracker : INotifyPropertyChanged
    {
        #region  Fields
        private bool isDeserializingField;
        private ObjectState originalobjectStateField = ObjectState.Added;
        private bool isInitilizedField = false;
        private readonly ObservableCollection<PropertyValueState> changeSetsField = new ObservableCollection<PropertyValueState>();
        private Delegate collectionChangedDelegateField = null;
        private bool objectTrackingEnabledField;
        private readonly object trackedObjectField;
        private PropertyValueStatesDictionary propertyValueStatesFields;
        //private ValueStatesDictionary valueStatesField;

        private ObjectsAddedToCollectionProperties objectsAddedToCollectionsField = new ObjectsAddedToCollectionProperties();
        private ObjectsRemovedFromCollectionProperties objectsRemovedFromCollectionsField = new ObjectsRemovedFromCollectionProperties();
        private ObjectsOriginalFromCollectionProperties objectsOriginalFromCollectionsField = new ObjectsOriginalFromCollectionProperties();
        #endregion

        public ObjectChangeTracker(object trackedObject)
        {
            trackedObjectField = trackedObject;
        }

        #region Events

        public event EventHandler<ObjectStateChangingEventArgs> ObjectStateChanging;

        #endregion

        protected virtual void OnObjectStateChanging(ObjectState newState)
        {
            if (ObjectStateChanging != null)
            {
                ObjectStateChanging(this, new ObjectStateChangingEventArgs() { NewState = newState });
            }
        }

        /// <summary>
        /// indicate current state
        /// </summary>
        private ObjectState stateField;
        /// <summary>
        /// Gets the state.
        /// </summary>
        /// <value>The state.</value>
        public ObjectState State
        {
            get
            {
                return stateField;
            }
        }

        /// <summary>
        /// Updates the state of the change.
        /// </summary>
        private void UpdateChangeState()
        {
            ObjectState resultState = ObjectState.Added;
            changeSetsField.Clear();
            if (originalobjectStateField == ObjectState.Added)
            {
                if (stateField != ObjectState.Added)
                {
                    stateField = ObjectState.Added;
                    OnPropertyChanged("State");
                    OnObjectStateChanging(stateField);
                }
                return;
            }
            foreach (var propertyValuestate in PropertyValueStates)
            {
                if (propertyValuestate.Value.State == ObjectState.Modified)
                {
                    changeSetsField.Add(propertyValuestate.Value);
                    resultState = ObjectState.Modified;
                }
            }

            if (ObjectsRemovedFromCollectionProperties.Count > 0)
            {
                foreach (var objectsRemovedFromCollectionProperty in ObjectsRemovedFromCollectionProperties)
                {
                    foreach (var objectsRemoved in objectsRemovedFromCollectionProperty.Value)
                    {
                        changeSetsField.Add(new PropertyValueState() { PropertyName = objectsRemovedFromCollectionProperty.Key, State = ObjectState.Deleted, CurrentValue = objectsRemoved.ToString() });
                    }
                }
                resultState = ObjectState.Modified;
            }

            if (ObjectsAddedToCollectionProperties.Count > 0)
            {
                foreach (var objectsAddedFromCollectionProperty in ObjectsAddedToCollectionProperties)
                {
                    foreach (var objectsAdded in objectsAddedFromCollectionProperty.Value)
                    {
                        changeSetsField.Add(new PropertyValueState() { PropertyName = objectsAddedFromCollectionProperty.Key, State = ObjectState.Added, CurrentValue = objectsAdded.ToString() });
                    }
                }
                resultState = ObjectState.Modified;
            }

            if (resultState == ObjectState.Modified)
            {
                if (stateField != ObjectState.Modified)
                {
                    stateField = ObjectState.Modified;
                    OnPropertyChanged("State");
                    OnObjectStateChanging(stateField);
                }
                return;
            }
            if (stateField != originalobjectStateField)
            {
                stateField = originalobjectStateField;
                OnPropertyChanged("State");
                OnObjectStateChanging(stateField);
            }
            return;
        }

        public ObservableCollection<PropertyValueState> ChangeSets
        {
            get
            {
                return changeSetsField;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether [change tracking enabled].
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [change tracking enabled]; otherwise, <c>false</c>.
        /// </value>
        public bool ObjectTrackingEnabled
        {
            get { return objectTrackingEnabledField; }
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StartTracking()
        {
            objectTrackingEnabledField = true;
            ResetTracking();
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StartTracking(bool keepLastRecords)
        {
            objectTrackingEnabledField = true;
            if (!keepLastRecords)
                StartTracking();
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StopTracking()
        {
            objectTrackingEnabledField = false;
        }

        // Resets the ObjectChangeTracker to the Unchanged state and
        // clears the original values as well as the record of changes
        // to collection properties
        public void ResetTracking()
        {
            if (objectTrackingEnabledField)
            {
                originalobjectStateField = ObjectState.Unchanged;
                ResetOriginalValue();
                ObjectsAddedToCollectionProperties.Clear();
                ObjectsRemovedFromCollectionProperties.Clear();
                ObjectsOriginalFromCollectionProperties.Clear();
                InitOriginalValue();
                UpdateChangeState();
            }
        }
        /// <summary>
        /// Inits the original value.
        /// </summary>
        private void InitOriginalValue()
        {
            var type = trackedObjectField.GetType();
            var propertyies = type.GetProperties();

            if (!isInitilizedField)
            {
                foreach (var propertyInfo in propertyies)
                {
                    if (!propertyInfo.Name.Equals("ChangeTracker") && !propertyInfo.Name.Equals("Item"))
                    {
                        object o = propertyInfo.GetValue(trackedObjectField, null);
                        if (propertyInfo.PropertyType.Name.Contains("TrackableCollection"))
                        {
                            var eventInfo = propertyInfo.PropertyType.GetEvent("TrackableCollectionChanged");
                            if (eventInfo != null)
                            {
                                Type tDelegate = eventInfo.EventHandlerType;
                                if (tDelegate != null)
                                {
                                    if (collectionChangedDelegateField == null)
                                        collectionChangedDelegateField = Delegate.CreateDelegate(tDelegate, this, "TrackableCollectionChanged");

                                    // Get the "add" accessor of the event and invoke it late bound, passing in the delegate instance. This is equivalent
                                    // to using the += operator in C#. The instance on which the "add" accessor is invoked.
                                    MethodInfo addHandler = eventInfo.GetAddMethod();
                                    Object[] addHandlerArgs = { collectionChangedDelegateField };
                                    addHandler.Invoke(o, addHandlerArgs);
                                }
                            }

                            var collection = o as IEnumerable;
                            if (collection != null)
                            {
                                foreach (var item in collection)
                                {
                                    RecordOriginalToCollectionProperties(propertyInfo.Name, item);
                                }
                            }
                        }
                        else
                        {
                            RecordCurrentValue(propertyInfo.Name, o);
                        }
                    }
                }
                isInitilizedField = true;
            }
        }

        /// <summary>
        /// Resets the original value.
        /// </summary>
        private void ResetOriginalValue()
        {
            PropertyValueStates.Clear();
            //ValueStates.Clear();

            if (isInitilizedField)
            {
                var type = trackedObjectField.GetType();
                var propertyies = type.GetProperties();
                foreach (var propertyInfo in propertyies)
                {
                    if (!propertyInfo.Name.Equals("ChangeTracker") && !propertyInfo.Name.Equals("Item"))
                    {
                        object o = propertyInfo.GetValue(trackedObjectField, null);
                        if (propertyInfo.PropertyType.Name.Contains("TrackableCollection"))
                        {
                            var eventInfo = propertyInfo.PropertyType.GetEvent("TrackableCollectionChanged");
                            if (eventInfo != null)
                            {
                                Type tDelegate = eventInfo.EventHandlerType;
                                if (tDelegate != null)
                                {
                                    if (collectionChangedDelegateField != null)
                                    {
                                        // Get the "remove" accessor of the event and invoke it latebound, passing in the delegate instance. This is equivalent
                                        // to using the += operator in C#. The instance on which the "add" accessor is invoked.
                                        MethodInfo removeHandler = eventInfo.GetRemoveMethod();
                                        Object[] addHandlerArgs = { collectionChangedDelegateField };
                                        removeHandler.Invoke(o, addHandlerArgs);
                                    }
                                }
                            }
                        }
                    }
                }
                isInitilizedField = false;
            }
        }

        /// <summary>
        /// Trackables the collection changed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="NotifyTrackableCollectionChangedEventArgs"/> instance containing the event data.</param>
        /// <param name="propertyName">Name of the property.</param>
        private void TrackableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e, string propertyName)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var newItem in e.NewItems)
                    {
                        //todo:implémenter la récursivité sur l'ajout des élements dans la collection
                        //var project = newItem as IObjectWithChangeTracker;
                        //if (project != null)
                        //{
                        //    if (ChangeTrackingEnabled)
                        //    {
                        //        project.ChangeTracker.Start();
                        //    }
                        //}
                        RecordAdditionToCollectionProperties(propertyName, newItem);
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (var odlItem in e.OldItems)
                    {
                        RecordRemovalFromCollectionProperties(propertyName, odlItem);
                    }
                    break;
                case NotifyCollectionChangedAction.Reset:
                    {
                        // Cas d'un Clear sur la collection.
                        // Vide le cache des modifications pour la collection.
                        if (ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName))
                        {
                            ObjectsRemovedFromCollectionProperties.Remove(propertyName);
                        }

                        if (ObjectsAddedToCollectionProperties.ContainsKey(propertyName))
                        {
                            ObjectsAddedToCollectionProperties.Remove(propertyName);
                        }

                        // Tranfère les données de départ dans les élements supprimés.
                        if (ObjectsOriginalFromCollectionProperties.Count > 0)
                        {
                            foreach (var item in ObjectsOriginalFromCollectionProperties[propertyName])
                            {
                                RecordRemovalFromCollectionProperties(propertyName, item);
                            }
                        }
                    }
                    break;
                case NotifyCollectionChangedAction.Replace:
                    {
                        // Comment gérer le cas d'un changement d'instance dans la liste ?
                    }
                    break;
            }
            UpdateChangeState();
        }

        #region public properties
        // Returns the removed objects to collection valued properties that were changed.
        public ObjectsRemovedFromCollectionProperties ObjectsRemovedFromCollectionProperties
        {
            get { return objectsRemovedFromCollectionsField ?? (objectsRemovedFromCollectionsField = new ObjectsRemovedFromCollectionProperties()); }
        }

        // Returns the original values for properties that were changed.
        public PropertyValueStatesDictionary PropertyValueStates
        {
            get { return propertyValueStatesFields ?? (propertyValueStatesFields = new PropertyValueStatesDictionary()); }
        }

        // Returns the added objects to collection valued properties that were changed.
        public ObjectsAddedToCollectionProperties ObjectsAddedToCollectionProperties
        {
            get { return objectsAddedToCollectionsField ?? (objectsAddedToCollectionsField = new ObjectsAddedToCollectionProperties()); }
        }

        // Returns the added objects to collection valued properties that were changed.
        public ObjectsOriginalFromCollectionProperties ObjectsOriginalFromCollectionProperties
        {
            get { return objectsOriginalFromCollectionsField ?? (objectsOriginalFromCollectionsField = new ObjectsOriginalFromCollectionProperties()); }
        }

        #region MethodsForChangeTrackingOnClient

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            isDeserializingField = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            isDeserializingField = false;
        }
        #endregion

        /// <summary>
        /// Captures the original value for a property that is changing.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        public void RecordCurrentValue(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                if (!PropertyValueStates.ContainsKey(propertyName))
                {
                    PropertyValueStates[propertyName] = new PropertyValueState() { PropertyName = propertyName, OriginalValue = value, CurrentValue = value, State = ObjectState.Unchanged };
                }
                // Compare original value new 
                else
                {
                    PropertyValueStates[propertyName].CurrentValue = value;
                    var originalValue = PropertyValueStates[propertyName].OriginalValue;
                    if (originalValue != null)
                    {
                        PropertyValueStates[propertyName].State = originalValue.Equals(value) ? ObjectState.Unchanged : ObjectState.Modified;
                    }
                    else
                    {
                        if (value == null)
                        {
                            PropertyValueStates[propertyName].State = ObjectState.Unchanged;
                        }
                        else
                        {
                            PropertyValueStates[propertyName].State = string.IsNullOrEmpty(value.ToString()) ? ObjectState.Unchanged : ObjectState.Modified;
                        }
                    }
                }
                UpdateChangeState();
            }
        }

        /// <summary>
        /// Records original items value of collection to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        private void RecordOriginalToCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                if (!ObjectsOriginalFromCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsOriginalFromCollectionProperties[propertyName] = new ObjectList();
                    ObjectsOriginalFromCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    ObjectsOriginalFromCollectionProperties[propertyName].Add(value);
                }
            }
        }


        /// <summary>
        /// Records an addition to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        private void RecordAdditionToCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                // Add the entity back after deleting it, we should do nothing here then
                if (ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName)
                    && ObjectsRemovedFromCollectionProperties[propertyName].Contains(value))
                {
                    ObjectsRemovedFromCollectionProperties[propertyName].Remove(value);
                    if (ObjectsRemovedFromCollectionProperties[propertyName].Count == 0)
                    {
                        ObjectsRemovedFromCollectionProperties.Remove(propertyName);
                    }
                    return;
                }

                if (!ObjectsAddedToCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsAddedToCollectionProperties[propertyName] = new ObjectList();
                    ObjectsAddedToCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    ObjectsAddedToCollectionProperties[propertyName].Add(value);
                }
            }
        }

        /// <summary>
        /// Records a removal to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The object value.</param>
        internal void RecordRemovalFromCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                // Delete the entity back after adding it, we should do nothing here then
                if (ObjectsAddedToCollectionProperties.ContainsKey(propertyName)
                    && ObjectsAddedToCollectionProperties[propertyName].Contains(value))
                {
                    ObjectsAddedToCollectionProperties[propertyName].Remove(value);
                    if (ObjectsAddedToCollectionProperties[propertyName].Count == 0)
                    {
                        ObjectsAddedToCollectionProperties.Remove(propertyName);
                    }
                    return;
                }

                if (!ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsRemovedFromCollectionProperties[propertyName] = new ObjectList();
                    ObjectsRemovedFromCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    if (!ObjectsRemovedFromCollectionProperties[propertyName].Contains(value))
                    {
                        ObjectsRemovedFromCollectionProperties[propertyName].Add(value);
                    }
                }
            }
        }
        #endregion

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Called when [property changed].
        /// </summary>
        /// <param name="info">The info.</param>
        public virtual void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }
    }
    #endregion

    #region TrackableCollection class
    public class TrackableCollection<T> : ObservableCollection<T>

    {
        /// <summary>
        /// Name of property
        /// </summary>
        private string propertyNameField;
        /// <summary>
        /// Occurs when [trackable collection changed].
        /// </summary>
        public virtual event NotifyTrackableCollectionChangedEventHandler TrackableCollectionChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackableCollection&lt;T&gt;"/> class.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        public TrackableCollection(string propertyName)
        {
            propertyNameField = propertyName;
            base.CollectionChanged += TrackableCollection_CollectionChanged;
        }

        /// <summary>
        /// Handles the CollectionChanged event of the TrackableCollection control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        void TrackableCollection_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (TrackableCollectionChanged != null)
            {
                TrackableCollectionChanged(sender, e, propertyNameField);
            }
        }


    }
    #endregion

    #region PropertyValueStatesDictionary
    public class PropertyValueStatesDictionary : Dictionary<string, PropertyValueState>
    {
    }
    #endregion

    #region ObjectsRemovedFromCollectionProperties
    public class ObjectsRemovedFromCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    #region ObjectsAddedToCollectionProperties
    public class ObjectsAddedToCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    #region ObjectsOriginalFromCollectionProperties
    public class ObjectsOriginalFromCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    /// <summary>
    /// A dummy "data type" (dt) element to compensate for a code generator bug.  Do not use this type for anything.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [XmlRootAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IsNullable = false)]
    [JsonObject("dt")]
    public partial class dt : EntityBase<dt>
    {
        #region Private fields
        private dtQuantEnum _quantEnum;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _quantEnumSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// dt class constructor
        /// </summary>
        public dt()
        {
            _quantEnum = dtQuantEnum.EQ;
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum dtQuantEnum
    {
        EQ,
        GT,
        GTE,
        LT,
        LTE,
        APPROX,
    }

    /// <summary>
    /// Start here. This is the top level of the SDCFormDesign object model.
    /// It represents the definition for the information content of a single data-entry
    /// form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [XmlRootAttribute("FormDesign", Namespace = "urn:ihe:qrph:sdc:2016", IsNullable = false)]
    [JsonObject("FormDesignType")]
    public partial class FormDesignType : IdentifiedExtensionType
    {
        #region Private fields
        private EventType _beforeLoadForm;
        private EventType _beforeLoadData;
        private EventType _beforeShowForm;
        private EventType _beforeDataSubmit;
        private EventType _beforeCloseForm;
        private List<OnEventType> _onEvent;
        private SectionItemType _header;
        private SectionItemType _body;
        private SectionItemType _footer;
        private RulesType _rules;
        private string _lineage;
        private string _version;
        private string _versionPrev;
        private string _fullURI;
        private string _filename;
        private string _formTitle;
        private string _basedOnURI;
        private string _instanceID;
        private DateTime? _instanceVersion;
        private string _instanceVersionURI;
        private DateTime? _instanceVersionPrev;
        private System.Nullable<FormDesignTypeApprovalStatus> _approvalStatus;
        private System.Nullable<FormDesignTypeCompletionStatus> _completionStatus;
        private bool? _changedData;
        private bool? _newData;
        private bool _beforeLoadFormSpecified;
        private bool _beforeLoadDataSpecified;
        private bool _beforeShowFormSpecified;
        private bool _beforeDataSubmitSpecified;
        private bool _beforeCloseFormSpecified;
        private bool _onEventSpecified;
        private bool _headerSpecified;
        private bool _bodySpecified;
        private bool _footerSpecified;
        private bool _rulesSpecified;
        private bool _lineageSpecified;
        private bool _versionSpecified;
        private bool _versionPrevSpecified;
        private bool _fullURISpecified;
        private bool _filenameSpecified;
        private bool _formTitleSpecified;
        private bool _basedOnURISpecified;
        private bool _instanceIDSpecified;
        private bool _instanceVersionURISpecified;
        #endregion

        /// <summary>
        /// NEW: This event is fired before the page is loaded
        /// into memory, and before stored form data is loaded. It may be used,
        /// e.g., for authentication, to retrieve/prepare stored data, and/or to
        /// control form rendering according to user
        /// preferences.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EventType BeforeLoadForm
        {
            get
            {
                return _beforeLoadForm;
            }
            set
            {
                _beforeLoadForm = value;
            }
        }

        /// <summary>
        /// NEW: This event is fired after the page is loaded into
        /// memory, before stored form data is loaded, and before the form is
        /// visible. For example, It may be used to determine the data to be
        /// loaded and to perform the data loading.
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EventType BeforeLoadData
        {
            get
            {
                return _beforeLoadData;
            }
            set
            {
                _beforeLoadData = value;
            }
        }

        /// <summary>
        /// NEW: This event is fired after the page is loaded is
        /// memory, after the data is loaded into the form, but before the form
        /// is displayed. It may be used to perform form activities that are
        /// controlled by the loaded data.
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EventType BeforeShowForm
        {
            get
            {
                return _beforeShowForm;
            }
            set
            {
                _beforeShowForm = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EventType BeforeDataSubmit
        {
            get
            {
                return _beforeDataSubmit;
            }
            set
            {
                _beforeDataSubmit = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EventType BeforeCloseForm
        {
            get
            {
                return _beforeCloseForm;
            }
            set
            {
                _beforeCloseForm = value;
            }
        }

        /// <summary>
        /// Generic event handler - eventName must be
        /// specified.
        /// </summary>
        [XmlElement("OnEvent", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<OnEventType> OnEvent
        {
            get
            {
                return _onEvent;
            }
            set
            {
                _onEvent = value;
            }
        }

        /// <summary>
        /// Optional Section that stays at the top of a
        /// form.
        /// </summary>
        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual SectionItemType Header
        {
            get
            {
                return _header;
            }
            set
            {
                _header = value;
            }
        }

        /// <summary>
        /// Main Section of form
        /// </summary>
        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual SectionItemType Body
        {
            get
            {
                if ((_body == null))
                {
                    _body = new SectionItemType();
                }
                return _body;
            }
            set
            {
                _body = value;
            }
        }

        /// <summary>
        /// Optional Section that stays at the bottom of a
        /// form.
        /// </summary>
        [XmlElement(Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual SectionItemType Footer
        {
            get
            {
                return _footer;
            }
            set
            {
                _footer = value;
            }
        }

        [XmlElement(Order = 9)]
        [JsonProperty(Order = 9, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RulesType Rules
        {
            get
            {
                return _rules;
            }
            set
            {
                _rules = value;
            }
        }

        /// <summary>
        /// A string identifier that is used to group multiple
        /// versions of a single form. The lineage is constant for all versions of a
        /// single kind of form. When appended to baseURI, it can be used to
        /// retrieve all versions of one particular form. Example:
        /// @lineage="Lung.Bmk.227"
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string lineage
        {
            get
            {
                return _lineage;
            }
            set
            {
                _lineage = value;
            }
        }

        /// <summary>
        /// @version contains the version text for the current form.
        /// It is designed to be used in conjunction with @baseURI and @lineage.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        /// <summary>
        /// @versionPrev identifies the immediate previous version of
        /// the current FDF. The format is the same as version. The primary role of
        /// this optional attribute is to allow automated comparisons between a
        /// current FDF and the immediate previous FDF version. This is often
        /// helpful when deciding whether to adopt a newer version of an FDF.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionPrev
        {
            get
            {
                return _versionPrev;
            }
            set
            {
                _versionPrev = value;
            }
        }

        /// <summary>
        /// The full URI that uniquely identifies the current form. It
        /// is created by concatenating @baseURI + lineage + version. Each of the
        /// components is separated by a single forward slash.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string fullURI
        {
            get
            {
                return _fullURI;
            }
            set
            {
                _fullURI = value;
            }
        }

        /// <summary>
        /// @filename is the filename of the FDF when is saved to a
        /// file storage device (e.g., a disk or USB drive). The filename appears
        /// inside the FDF XML to help ensure the identity of the FDF content in
        /// case the saved filename (on a disk drive, etc.) has been changed for any
        /// reason.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string filename
        {
            get
            {
                return _filename;
            }
            set
            {
                _filename = value;
            }
        }

        /// <summary>
        /// @formTitle is a human readable title for display when
        /// choosing forms. Added 4/27/16
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string formTitle
        {
            get
            {
                return _formTitle;
            }
            set
            {
                _formTitle = value;
            }
        }

        /// <summary>
        /// @basedOnURI is a URI that identifies the SDC form that
        /// that the current FDF is based upon. In most cases, this should be a
        /// standard SDC form that is modified and/or extended by the current FDF.
        /// It’s best to avoid using prefixes like "http://" or "https://" because
        /// these can occasionally cause XML validation errors when used in a
        /// URI-typed field. The URI format should be the same format used in
        /// fullURI, which is patterned after the SDC web service API.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string basedOnURI
        {
            get
            {
                return _basedOnURI;
            }
            set
            {
                _basedOnURI = value;
            }
        }

        /// <summary>
        /// @instanceID is unique string (e.g., a GUID) used to
        /// identify a unique instance of a form, such as a form used during a
        /// single patient encounter. The @instanceID is used to track saved form
        /// responses across time and across multiple episodes of editing by
        /// end-users. This string does not change for each edit session of a form
        /// or package instance. The @instanceID is required in an FDF-R; It is not
        /// allowed in an FDF.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string instanceID
        {
            get
            {
                return _instanceID;
            }
            set
            {
                _instanceID = value;
            }
        }

        /// <summary>
        /// @instanceVersion Timestamp is used to identify a unique instance of a form.
        /// Used for tracking form responses across time and across multiple
        /// episodes of editing by end-users. This field must change for each edit
        /// session of a form instance. The instanceVersion is required in an FDF-R;
        /// It is not allowed in an FDF.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime instanceVersion
        {
            get
            {
                if (_instanceVersion.HasValue)
                {
                    return _instanceVersion.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _instanceVersion = value;
            }
        }

        [XmlIgnore]
        public virtual bool instanceVersionSpecified
        {
            get
            {
                return _instanceVersion.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _instanceVersion = null;
                }
            }
        }

        /// <summary>
        /// NEW: Globally-unique URI used to identify a unique
        /// instance of a form's saved responses. It is used for tracking form
        /// responses across time and across multiple episodes of editing by
        /// end-users. The instanceVersionURI must change for each edit/save session
        /// of a form instance (defined by instanceVersion). The instanceVersionURI
        /// should be formatted similarly to the fullURI but must include values for
        /// instanceID and instanceVersion. The instanceVersion value is the release
        /// date/time for the new version, in W3C datetime format. An example
        /// instanceVersionURI is:
        /// instanceVersionURI="_baseURI=cap.org&_lineage=Lung.Bmk.227&_version=1.001.011.RC1
        /// &_instanceID=Abc1dee2fg987&_instanceVersion=2019-07-16T19:20:30+01:00&_docType=sdcFDFR
        /// " It is possible to create a shorter URI without the _baseURI, _lineage
        /// and _version parameters, as long as the URI is able to globally and
        /// uniquely identify and retrieve the instance and version of the FDF-R
        /// that was transmitted:
        /// instanceVersionURI="_instanceID=Abc1dee2fg987&_instanceVersion=2019-07-16T19:20:30+01:00&_docType=sdcFDFR"
        /// Note that the FR webservice endpoint URI is not provided in the
        /// instanceVersionURI. The FR endpoint and its security settings may be
        /// found in the SDC Package that contains the FDF-R, at
        /// SDCPackage/SubmissionRule. An FR may also be provided in a custom FDF
        /// Property if desired. The docType for instanceVersionURI is sdcFDFR. The
        /// specific order of components shown in the URI examples is not required,
        /// but the component order shown above is suggested for consistency and
        /// readability. The instanceVersionURI is not required, and is not allowed
        /// in an FDF.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string instanceVersionURI
        {
            get
            {
                return _instanceVersionURI;
            }
            set
            {
                _instanceVersionURI = value;
            }
        }

        /// <summary>
        /// NEW: Unique dateTime used to identify the immediate
        /// previous instance of an form instance. Used for tracking form responses
        /// across time and across multiple episodes of editing by end-users. This
        /// field must change for each edit session of a form instance.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime instanceVersionPrev
        {
            get
            {
                if (_instanceVersionPrev.HasValue)
                {
                    return _instanceVersionPrev.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _instanceVersionPrev = value;
            }
        }

        [XmlIgnore]
        public virtual bool instanceVersionPrevSpecified
        {
            get
            {
                return _instanceVersionPrev.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _instanceVersionPrev = null;
                }
            }
        }

        /// <summary>
        /// Describes report fitness for clinical or other action
        /// inProcess: currently being edited, users should not rely on results
        /// preliminary: report is awaiting final review and approval approved:
        /// report is fit for clinical or other action; often synonymous with final
        /// cancelled: report/procedure has been aborted before issued retracted:
        /// report has been deemed unfit for clinical or other action
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual FormDesignTypeApprovalStatus approvalStatus
        {
            get
            {
                if (_approvalStatus.HasValue)
                {
                    return _approvalStatus.Value;
                }
                else
                {
                    return default(FormDesignTypeApprovalStatus);
                }
            }
            set
            {
                _approvalStatus = value;
            }
        }

        [XmlIgnore]
        public virtual bool approvalStatusSpecified
        {
            get
            {
                return _approvalStatus.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _approvalStatus = null;
                }
            }
        }

        /// <summary>
        /// The extent to which a report contains all of the requested
        /// information pending: no information is yet available incomplete: some
        /// requested information is not yet available complete: all information is
        /// available in the requested report
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual FormDesignTypeCompletionStatus completionStatus
        {
            get
            {
                if (_completionStatus.HasValue)
                {
                    return _completionStatus.Value;
                }
                else
                {
                    return default(FormDesignTypeCompletionStatus);
                }
            }
            set
            {
                _completionStatus = value;
            }
        }

        [XmlIgnore]
        public virtual bool completionStatusSpecified
        {
            get
            {
                return _completionStatus.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _completionStatus = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool changedData
        {
            get
            {
                if (_changedData.HasValue)
                {
                    return _changedData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _changedData = value;
            }
        }

        [XmlIgnore]
        public virtual bool changedDataSpecified
        {
            get
            {
                return _changedData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _changedData = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool newData
        {
            get
            {
                if (_newData.HasValue)
                {
                    return _newData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _newData = value;
            }
        }

        [XmlIgnore]
        public virtual bool newDataSpecified
        {
            get
            {
                return _newData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _newData = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BeforeLoadFormSpecified
        {
            get
            {
                return _beforeLoadFormSpecified;
            }
            set
            {
                _beforeLoadFormSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BeforeLoadDataSpecified
        {
            get
            {
                return _beforeLoadDataSpecified;
            }
            set
            {
                _beforeLoadDataSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BeforeShowFormSpecified
        {
            get
            {
                return _beforeShowFormSpecified;
            }
            set
            {
                _beforeShowFormSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BeforeDataSubmitSpecified
        {
            get
            {
                return _beforeDataSubmitSpecified;
            }
            set
            {
                _beforeDataSubmitSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BeforeCloseFormSpecified
        {
            get
            {
                return _beforeCloseFormSpecified;
            }
            set
            {
                _beforeCloseFormSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnEventSpecified
        {
            get
            {
                return _onEventSpecified;
            }
            set
            {
                _onEventSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool HeaderSpecified
        {
            get
            {
                return _headerSpecified;
            }
            set
            {
                _headerSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BodySpecified
        {
            get
            {
                return _bodySpecified;
            }
            set
            {
                _bodySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FooterSpecified
        {
            get
            {
                return _footerSpecified;
            }
            set
            {
                _footerSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RulesSpecified
        {
            get
            {
                return _rulesSpecified;
            }
            set
            {
                _rulesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool lineageSpecified
        {
            get
            {
                return _lineageSpecified;
            }
            set
            {
                _lineageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionSpecified
        {
            get
            {
                return _versionSpecified;
            }
            set
            {
                _versionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionPrevSpecified
        {
            get
            {
                return _versionPrevSpecified;
            }
            set
            {
                _versionPrevSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool fullURISpecified
        {
            get
            {
                return _fullURISpecified;
            }
            set
            {
                _fullURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool filenameSpecified
        {
            get
            {
                return _filenameSpecified;
            }
            set
            {
                _filenameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool formTitleSpecified
        {
            get
            {
                return _formTitleSpecified;
            }
            set
            {
                _formTitleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool basedOnURISpecified
        {
            get
            {
                return _basedOnURISpecified;
            }
            set
            {
                _basedOnURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool instanceIDSpecified
        {
            get
            {
                return _instanceIDSpecified;
            }
            set
            {
                _instanceIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool instanceVersionURISpecified
        {
            get
            {
                return _instanceVersionURISpecified;
            }
            set
            {
                _instanceVersionURISpecified = value;
            }
        }
    }

    [XmlInclude(typeof(OnEventType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("EventType")]
    public partial class EventType : PredActionType
    {
    }

    [XmlInclude(typeof(EventType))]
    [XmlInclude(typeof(OnEventType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredActionType")]
    public partial class PredActionType : FuncBoolBaseType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _not;
        private PredEvalAttribValuesTypeBoolOp _boolOp;
        private bool _itemsSpecified;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        private bool _notSpecified;
        private bool _boolOpSpecified;
        #endregion

        /// <summary>
        /// PredActionType class constructor
        /// </summary>
        public PredActionType()
        {
            _not = false;
            _boolOp = PredEvalAttribValuesTypeBoolOp.AND;
        }

        [XmlElement("AttributeEval", typeof(AttributeEvalActionType), Order = 0)]
        [XmlElement("CallBoolFunction", typeof(CallFuncBoolActionType), Order = 0)]
        [XmlElement("Group", typeof(PredActionType), Order = 0)]
        [XmlElement("MultiSelections", typeof(MultiSelectionsActionType), Order = 0)]
        [XmlElement("ScriptBoolFunc", typeof(ScriptBoolFuncActionType), Order = 0)]
        [XmlElement("SelectMatchingListItems", typeof(RuleSelectMatchingListItemsType), Order = 0)]
        [XmlElement("SelectionSets", typeof(SelectionSetsActionType), Order = 0)]
        [XmlElement("SelectionTest", typeof(SelectionTestActionType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(PredEvalAttribValuesTypeBoolOp.AND)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual PredEvalAttribValuesTypeBoolOp boolOp
        {
            get
            {
                return _boolOp;
            }
            set
            {
                _boolOp = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool boolOpSpecified
        {
            get
            {
                return _boolOpSpecified;
            }
            set
            {
                _boolOpSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("AttributeEvalActionType")]
    public partial class AttributeEvalActionType : PredEvalAttribValuesType
    {
        #region Private fields
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActionsType")]
    public partial class ActionsType : ExtensionBaseType
    {
        #region Private fields
        private ExtensionBaseType[] _items;
        private ItemsChoiceType1[] _itemsElementName;
        private bool _itemsSpecified;
        private bool _itemsElementNameSpecified;
        #endregion

        [XmlElement("Action", typeof(ActActionType), Order = 0)]
        [XmlElement("AddCode", typeof(ActAddCodeType), Order = 0)]
        [XmlElement("CallFunction", typeof(CallFuncActionType), Order = 0)]
        [XmlElement("ConditionalGroupAction", typeof(PredActionType), Order = 0)]
        [XmlElement("Inject", typeof(ActInjectType), Order = 0)]
        [XmlElement("PreviewReport", typeof(ActPreviewReportType), Order = 0)]
        [XmlElement("RunCode", typeof(ScriptCodeAnyType), Order = 0)]
        [XmlElement("Save", typeof(ActSaveResponsesType), Order = 0)]
        [XmlElement("SelectMatchingListItems", typeof(RuleSelectMatchingListItemsType), Order = 0)]
        [XmlElement("SendMessage111", typeof(ActSendMessageType), Order = 0)]
        [XmlElement("SendReport", typeof(ActSendReportType), Order = 0)]
        [XmlElement("SetAttributeValue", typeof(ActSetAttributeType), Order = 0)]
        [XmlElement("SetAttributeValueScript", typeof(ActSetAttrValueScriptType), Order = 0)]
        [XmlElement("SetBoolAttributeValueCode", typeof(ActSetBoolAttributeValueCodeType), Order = 0)]
        [XmlElement("ShowForm", typeof(ActShowFormType), Order = 0)]
        [XmlElement("ShowMessage", typeof(ActShowMessageType), Order = 0)]
        [XmlElement("ShowReport", typeof(ActShowReportType), Order = 0)]
        [XmlElement("ShowURL", typeof(CallFuncActionType), Order = 0)]
        [XmlElement("ValidateForm", typeof(ActValidateFormType), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public virtual ExtensionBaseType[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlElement("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public virtual ItemsChoiceType1[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsElementNameSpecified
        {
            get
            {
                return _itemsElementNameSpecified;
            }
            set
            {
                _itemsElementNameSpecified = value;
            }
        }
    }

    /// <summary>
    /// Add a custom action, not defined in the basic SDC
    /// Schemas.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActActionType")]
    public partial class ActActionType : ExtensionBaseType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private string _action;
        private bool _itemsSpecified;
        private bool _actionSpecified;
        #endregion

        [XmlElement("ListItemParameterRef", typeof(ListItemParameterType), Order = 0)]
        [XmlElement("ParameterRef", typeof(ParameterItemType), Order = 0)]
        [XmlElement("ParameterValue", typeof(ParameterValueType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string action
        {
            get
            {
                return _action;
            }
            set
            {
                _action = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actionSpecified
        {
            get
            {
                return _actionSpecified;
            }
            set
            {
                _actionSpecified = value;
            }
        }
    }

    /// <summary>
    /// Parameters are named, uniquely identifiable, instances of form attributes (e.g., @selected).  They are fed into expressions, which are then used as part of a rule within the form.  Parameters can also be fed into URI expressions used inside a Lookup Endpoint, i.e., URIs that call web services to supply list items (e.g., a list of SNOMED-coded items) to a question.
    /// 
    /// Parameters using this construct are derived from other locations in the XML instance document, including user-entered Response values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListItemParameterType")]
    public partial class ListItemParameterType : ExtensionBaseType
    {
        #region Private fields
        private string _dataType;
        private string _paramName;
        private string _sourceQuestionName;
        private string _listItemAttribute;
        private bool _dataTypeSpecified;
        private bool _paramNameSpecified;
        private bool _sourceQuestionNameSpecified;
        private bool _listItemAttributeSpecified;
        #endregion

        /// <summary>
        /// ListItemParameterType class constructor
        /// </summary>
        public ListItemParameterType()
        {
            _dataType = "string";
            _listItemAttribute = "associatedValue";
        }

        [XmlAttribute]
        [DefaultValue("string")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string dataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }

        /// <summary>
        /// A locally useful name that describes the parameter
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string paramName
        {
            get
            {
                return _paramName;
            }
            set
            {
                _paramName = value;
            }
        }

        /// <summary>
        /// The @name of a Question in the current form.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string sourceQuestionName
        {
            get
            {
                return _sourceQuestionName;
            }
            set
            {
                _sourceQuestionName = value;
            }
        }

        /// <summary>
        /// The name of any XML attribute on a ListItem.  The property value is the parameter's value.  If the Question is multi-select, a list of attribute values is returned.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [DefaultValue("associatedValue")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string listItemAttribute
        {
            get
            {
                return _listItemAttribute;
            }
            set
            {
                _listItemAttribute = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dataTypeSpecified
        {
            get
            {
                return _dataTypeSpecified;
            }
            set
            {
                _dataTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool paramNameSpecified
        {
            get
            {
                return _paramNameSpecified;
            }
            set
            {
                _paramNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool sourceQuestionNameSpecified
        {
            get
            {
                return _sourceQuestionNameSpecified;
            }
            set
            {
                _sourceQuestionNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool listItemAttributeSpecified
        {
            get
            {
                return _listItemAttributeSpecified;
            }
            set
            {
                _listItemAttributeSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(DataTypesDateTime_SType))]
    [XmlInclude(typeof(DataTypesDateTime_DEType))]
    [XmlInclude(typeof(DataTypesNumeric_SType))]
    [XmlInclude(typeof(DataTypesNumeric_DEType))]
    [XmlInclude(typeof(ChangeType))]
    [XmlInclude(typeof(ComplianceRuleType))]
    [XmlInclude(typeof(DestinationType))]
    [XmlInclude(typeof(SubmissionRuleType))]
    [XmlInclude(typeof(ProvenanceType))]
    [XmlInclude(typeof(AssociatedFilesType))]
    [XmlInclude(typeof(LanguageType))]
    [XmlInclude(typeof(ApprovalType))]
    [XmlInclude(typeof(FileDatesType))]
    [XmlInclude(typeof(FileUsageType))]
    [XmlInclude(typeof(ContactsType))]
    [XmlInclude(typeof(ChangedFieldType))]
    [XmlInclude(typeof(ChangeLogType))]
    [XmlInclude(typeof(VersionType))]
    [XmlInclude(typeof(FileType))]
    [XmlInclude(typeof(ActValidateFormType))]
    [XmlInclude(typeof(ActPreviewReportType))]
    [XmlInclude(typeof(ActShowReportType))]
    [XmlInclude(typeof(ActShowMessageType))]
    [XmlInclude(typeof(ActShowFormType))]
    [XmlInclude(typeof(ActSetAttributeType))]
    [XmlInclude(typeof(ActSendReportType))]
    [XmlInclude(typeof(ActSaveResponsesType))]
    [XmlInclude(typeof(RuleAutoSelectType))]
    [XmlInclude(typeof(RuleAutoActivateType))]
    [XmlInclude(typeof(ValidationType))]
    [XmlInclude(typeof(RulesType))]
    [XmlInclude(typeof(ListType))]
    [XmlInclude(typeof(ListFieldType))]
    [XmlInclude(typeof(ChildItemsType))]
    [XmlInclude(typeof(DataTypes_DEType))]
    [XmlInclude(typeof(ResponseFieldType))]
    [XmlInclude(typeof(ListItemResponseFieldType))]
    [XmlInclude(typeof(ScriptCodeBaseType))]
    [XmlInclude(typeof(ScriptCodeAnyType))]
    [XmlInclude(typeof(ActSetAttrValueScriptType))]
    [XmlInclude(typeof(ScriptCodeBoolType))]
    [XmlInclude(typeof(ScriptBoolFuncActionType))]
    [XmlInclude(typeof(ActSetBoolAttributeValueCodeType))]
    [XmlInclude(typeof(IdentifierType))]
    [XmlInclude(typeof(PhoneType))]
    [XmlInclude(typeof(EmailType))]
    [XmlInclude(typeof(AddressType))]
    [XmlInclude(typeof(OrganizationType))]
    [XmlInclude(typeof(JobType))]
    [XmlInclude(typeof(NameType))]
    [XmlInclude(typeof(PersonType))]
    [XmlInclude(typeof(ContactType))]
    [XmlInclude(typeof(LinkType))]
    [XmlInclude(typeof(IdentifiedExtensionType))]
    [XmlInclude(typeof(FormDesignType))]
    [XmlInclude(typeof(InjectFormType))]
    [XmlInclude(typeof(ActInjectType))]
    [XmlInclude(typeof(DisplayedType))]
    [XmlInclude(typeof(ButtonItemType))]
    [XmlInclude(typeof(RepeatingType))]
    [XmlInclude(typeof(QuestionItemBaseType))]
    [XmlInclude(typeof(QuestionItemType))]
    [XmlInclude(typeof(SectionBaseType))]
    [XmlInclude(typeof(SectionItemType))]
    [XmlInclude(typeof(ListItemBaseType))]
    [XmlInclude(typeof(ListItemType))]
    [XmlInclude(typeof(DataElementType))]
    [XmlInclude(typeof(RuleListItemMatchTargetsType))]
    [XmlInclude(typeof(CodeSystemType))]
    [XmlInclude(typeof(CodingType))]
    [XmlInclude(typeof(ItemNameType))]
    [XmlInclude(typeof(ActAddCodeType))]
    [XmlInclude(typeof(ItemNameAttributeType))]
    [XmlInclude(typeof(RuleSelectMatchingListItemsType))]
    [XmlInclude(typeof(ActActionType))]
    [XmlInclude(typeof(ActionsType))]
    [XmlInclude(typeof(FuncBoolBaseType))]
    [XmlInclude(typeof(PredAlternativesType))]
    [XmlInclude(typeof(PredGuardType))]
    [XmlInclude(typeof(PredMultiSelectionSetBoolType))]
    [XmlInclude(typeof(MultiSelectionsActionType))]
    [XmlInclude(typeof(PredEvalAttribValuesType))]
    [XmlInclude(typeof(AttributeEvalActionType))]
    [XmlInclude(typeof(PredActionType))]
    [XmlInclude(typeof(EventType))]
    [XmlInclude(typeof(OnEventType))]
    [XmlInclude(typeof(PredSingleSelectionSetsType))]
    [XmlInclude(typeof(SelectionSetsActionType))]
    [XmlInclude(typeof(PredSelectionTestType))]
    [XmlInclude(typeof(SelectionTestActionType))]
    [XmlInclude(typeof(ListItemParameterType))]
    [XmlInclude(typeof(ParameterItemType))]
    [XmlInclude(typeof(CallFuncBaseType))]
    [XmlInclude(typeof(CallFuncBoolType))]
    [XmlInclude(typeof(CallFuncBoolActionType))]
    [XmlInclude(typeof(CallFuncType))]
    [XmlInclude(typeof(CallFuncActionType))]
    [XmlInclude(typeof(LookupEndPointType))]
    [XmlInclude(typeof(PhoneNumberType))]
    [XmlInclude(typeof(EmailAddressType))]
    [XmlInclude(typeof(RichTextType))]
    [XmlInclude(typeof(ActSendMessageType))]
    [XmlInclude(typeof(BlobType))]
    [XmlInclude(typeof(DataTypes_SType))]
    [XmlInclude(typeof(ParameterValueType))]
    [XmlInclude(typeof(PropertyType1))]
    [XmlInclude(typeof(PropertyType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ExtensionBaseType")]
    public abstract partial class ExtensionBaseType : BaseType
    {
        #region Private fields
        private List<CommentType> _comment;
        private List<ExtensionType> _extension;
        private List<PropertyType> _property;
        private bool _commentSpecified;
        private bool _extensionSpecified;
        private bool _propertySpecified;
        #endregion

        [XmlElement("Comment", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<CommentType> Comment
        {
            get
            {
                return _comment;
            }
            set
            {
                _comment = value;
            }
        }

        [XmlElement("Extension", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ExtensionType> Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        [XmlElement("Property", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PropertyType> Property
        {
            get
            {
                return _property;
            }
            set
            {
                _property = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CommentSpecified
        {
            get
            {
                return _commentSpecified;
            }
            set
            {
                _commentSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ExtensionSpecified
        {
            get
            {
                return _extensionSpecified;
            }
            set
            {
                _extensionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PropertySpecified
        {
            get
            {
                return _propertySpecified;
            }
            set
            {
                _propertySpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CommentType")]
    public partial class CommentType : BaseType
    {
        #region Private fields
        private string _val;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(ExtensionBaseType))]
    [XmlInclude(typeof(DataTypesDateTime_SType))]
    [XmlInclude(typeof(DataTypesDateTime_DEType))]
    [XmlInclude(typeof(DataTypesNumeric_SType))]
    [XmlInclude(typeof(DataTypesNumeric_DEType))]
    [XmlInclude(typeof(ChangeType))]
    [XmlInclude(typeof(ComplianceRuleType))]
    [XmlInclude(typeof(DestinationType))]
    [XmlInclude(typeof(SubmissionRuleType))]
    [XmlInclude(typeof(ProvenanceType))]
    [XmlInclude(typeof(AssociatedFilesType))]
    [XmlInclude(typeof(LanguageType))]
    [XmlInclude(typeof(ApprovalType))]
    [XmlInclude(typeof(FileDatesType))]
    [XmlInclude(typeof(FileUsageType))]
    [XmlInclude(typeof(ContactsType))]
    [XmlInclude(typeof(ChangedFieldType))]
    [XmlInclude(typeof(ChangeLogType))]
    [XmlInclude(typeof(VersionType))]
    [XmlInclude(typeof(FileType))]
    [XmlInclude(typeof(ActValidateFormType))]
    [XmlInclude(typeof(ActPreviewReportType))]
    [XmlInclude(typeof(ActShowReportType))]
    [XmlInclude(typeof(ActShowMessageType))]
    [XmlInclude(typeof(ActShowFormType))]
    [XmlInclude(typeof(ActSetAttributeType))]
    [XmlInclude(typeof(ActSendReportType))]
    [XmlInclude(typeof(ActSaveResponsesType))]
    [XmlInclude(typeof(RuleAutoSelectType))]
    [XmlInclude(typeof(RuleAutoActivateType))]
    [XmlInclude(typeof(ValidationType))]
    [XmlInclude(typeof(RulesType))]
    [XmlInclude(typeof(ListType))]
    [XmlInclude(typeof(ListFieldType))]
    [XmlInclude(typeof(ChildItemsType))]
    [XmlInclude(typeof(DataTypes_DEType))]
    [XmlInclude(typeof(ResponseFieldType))]
    [XmlInclude(typeof(ListItemResponseFieldType))]
    [XmlInclude(typeof(ScriptCodeBaseType))]
    [XmlInclude(typeof(ScriptCodeAnyType))]
    [XmlInclude(typeof(ActSetAttrValueScriptType))]
    [XmlInclude(typeof(ScriptCodeBoolType))]
    [XmlInclude(typeof(ScriptBoolFuncActionType))]
    [XmlInclude(typeof(ActSetBoolAttributeValueCodeType))]
    [XmlInclude(typeof(IdentifierType))]
    [XmlInclude(typeof(PhoneType))]
    [XmlInclude(typeof(EmailType))]
    [XmlInclude(typeof(AddressType))]
    [XmlInclude(typeof(OrganizationType))]
    [XmlInclude(typeof(JobType))]
    [XmlInclude(typeof(NameType))]
    [XmlInclude(typeof(PersonType))]
    [XmlInclude(typeof(ContactType))]
    [XmlInclude(typeof(LinkType))]
    [XmlInclude(typeof(IdentifiedExtensionType))]
    [XmlInclude(typeof(FormDesignType))]
    [XmlInclude(typeof(InjectFormType))]
    [XmlInclude(typeof(ActInjectType))]
    [XmlInclude(typeof(DisplayedType))]
    [XmlInclude(typeof(ButtonItemType))]
    [XmlInclude(typeof(RepeatingType))]
    [XmlInclude(typeof(QuestionItemBaseType))]
    [XmlInclude(typeof(QuestionItemType))]
    [XmlInclude(typeof(SectionBaseType))]
    [XmlInclude(typeof(SectionItemType))]
    [XmlInclude(typeof(ListItemBaseType))]
    [XmlInclude(typeof(ListItemType))]
    [XmlInclude(typeof(DataElementType))]
    [XmlInclude(typeof(RuleListItemMatchTargetsType))]
    [XmlInclude(typeof(CodeSystemType))]
    [XmlInclude(typeof(CodingType))]
    [XmlInclude(typeof(ItemNameType))]
    [XmlInclude(typeof(ActAddCodeType))]
    [XmlInclude(typeof(ItemNameAttributeType))]
    [XmlInclude(typeof(RuleSelectMatchingListItemsType))]
    [XmlInclude(typeof(ActActionType))]
    [XmlInclude(typeof(ActionsType))]
    [XmlInclude(typeof(FuncBoolBaseType))]
    [XmlInclude(typeof(PredAlternativesType))]
    [XmlInclude(typeof(PredGuardType))]
    [XmlInclude(typeof(PredMultiSelectionSetBoolType))]
    [XmlInclude(typeof(MultiSelectionsActionType))]
    [XmlInclude(typeof(PredEvalAttribValuesType))]
    [XmlInclude(typeof(AttributeEvalActionType))]
    [XmlInclude(typeof(PredActionType))]
    [XmlInclude(typeof(EventType))]
    [XmlInclude(typeof(OnEventType))]
    [XmlInclude(typeof(PredSingleSelectionSetsType))]
    [XmlInclude(typeof(SelectionSetsActionType))]
    [XmlInclude(typeof(PredSelectionTestType))]
    [XmlInclude(typeof(SelectionTestActionType))]
    [XmlInclude(typeof(ListItemParameterType))]
    [XmlInclude(typeof(ParameterItemType))]
    [XmlInclude(typeof(CallFuncBaseType))]
    [XmlInclude(typeof(CallFuncBoolType))]
    [XmlInclude(typeof(CallFuncBoolActionType))]
    [XmlInclude(typeof(CallFuncType))]
    [XmlInclude(typeof(CallFuncActionType))]
    [XmlInclude(typeof(LookupEndPointType))]
    [XmlInclude(typeof(PhoneNumberType))]
    [XmlInclude(typeof(EmailAddressType))]
    [XmlInclude(typeof(RichTextType))]
    [XmlInclude(typeof(ActSendMessageType))]
    [XmlInclude(typeof(BlobType))]
    [XmlInclude(typeof(DataTypes_SType))]
    [XmlInclude(typeof(ParameterValueType))]
    [XmlInclude(typeof(PropertyType1))]
    [XmlInclude(typeof(PropertyType))]
    [XmlInclude(typeof(ChangeTrackingType))]
    [XmlInclude(typeof(ReplacedIDsType))]
    [XmlInclude(typeof(CodeMatchType))]
    [XmlInclude(typeof(TargetItemNameType))]
    [XmlInclude(typeof(CountryCodeType))]
    [XmlInclude(typeof(AreaCodeType))]
    [XmlInclude(typeof(yearMonthDuration_Stype))]
    [XmlInclude(typeof(yearMonthDuration_DEtype))]
    [XmlInclude(typeof(XML_Stype))]
    [XmlInclude(typeof(XML_DEtype))]
    [XmlInclude(typeof(unsignedShort_Stype))]
    [XmlInclude(typeof(unsignedShort_DEtype))]
    [XmlInclude(typeof(unsignedLong_Stype))]
    [XmlInclude(typeof(unsignedLong_DEtype))]
    [XmlInclude(typeof(unsignedInt_Stype))]
    [XmlInclude(typeof(unsignedInt_DEtype))]
    [XmlInclude(typeof(unsignedByte_Stype))]
    [XmlInclude(typeof(unsignedByte_DEtype))]
    [XmlInclude(typeof(time_Stype))]
    [XmlInclude(typeof(time_DEtype))]
    [XmlInclude(typeof(string_Stype))]
    [XmlInclude(typeof(FileHashType))]
    [XmlInclude(typeof(TargetItemXPathType))]
    [XmlInclude(typeof(LanguageCodeISO6393_Type))]
    [XmlInclude(typeof(UnitsType))]
    [XmlInclude(typeof(AcceptabilityType))]
    [XmlInclude(typeof(string_DEtype))]
    [XmlInclude(typeof(short_Stype))]
    [XmlInclude(typeof(short_DEtype))]
    [XmlInclude(typeof(positiveInteger_Stype))]
    [XmlInclude(typeof(positiveInteger_DEtype))]
    [XmlInclude(typeof(nonPositiveInteger_Stype))]
    [XmlInclude(typeof(nonPositiveInteger_DEtype))]
    [XmlInclude(typeof(nonNegativeInteger_Stype))]
    [XmlInclude(typeof(nonNegativeInteger_DEtype))]
    [XmlInclude(typeof(negativeInteger_Stype))]
    [XmlInclude(typeof(negativeInteger_DEtype))]
    [XmlInclude(typeof(long_Stype))]
    [XmlInclude(typeof(long_DEtype))]
    [XmlInclude(typeof(integer_Stype))]
    [XmlInclude(typeof(integer_DEtype))]
    [XmlInclude(typeof(int_Stype))]
    [XmlInclude(typeof(int_DEtype))]
    [XmlInclude(typeof(HTML_Stype))]
    [XmlInclude(typeof(HTML_DEtype))]
    [XmlInclude(typeof(hexBinary_Stype))]
    [XmlInclude(typeof(hexBinary_DEtype))]
    [XmlInclude(typeof(gYearMonth_Stype))]
    [XmlInclude(typeof(gYearMonth_DEtype))]
    [XmlInclude(typeof(gYear_Stype))]
    [XmlInclude(typeof(gYear_DEtype))]
    [XmlInclude(typeof(gMonthDay_Stype))]
    [XmlInclude(typeof(gMonthDay_DEtype))]
    [XmlInclude(typeof(gMonth_Stype))]
    [XmlInclude(typeof(gMonth_DEtype))]
    [XmlInclude(typeof(gDay_Stype))]
    [XmlInclude(typeof(gDay_DEtype))]
    [XmlInclude(typeof(float_Stype))]
    [XmlInclude(typeof(float_DEtype))]
    [XmlInclude(typeof(duration_Stype))]
    [XmlInclude(typeof(duration_DEtype))]
    [XmlInclude(typeof(double_Stype))]
    [XmlInclude(typeof(double_DEtype))]
    [XmlInclude(typeof(decimal_Stype))]
    [XmlInclude(typeof(decimal_DEtype))]
    [XmlInclude(typeof(dayTimeDuration_Stype))]
    [XmlInclude(typeof(dayTimeDuration_DEtype))]
    [XmlInclude(typeof(dateTimeStamp_Stype))]
    [XmlInclude(typeof(dateTimeStamp_DEtype))]
    [XmlInclude(typeof(dateTime_Stype))]
    [XmlInclude(typeof(dateTime_DEtype))]
    [XmlInclude(typeof(date_Stype))]
    [XmlInclude(typeof(date_DEtype))]
    [XmlInclude(typeof(byte_Stype))]
    [XmlInclude(typeof(byte_DEtype))]
    [XmlInclude(typeof(boolean_Stype))]
    [XmlInclude(typeof(boolean_DEtype))]
    [XmlInclude(typeof(base64Binary_Stype))]
    [XmlInclude(typeof(HashType))]
    [XmlInclude(typeof(base64Binary_DEtype))]
    [XmlInclude(typeof(anyURI_Stype))]
    [XmlInclude(typeof(TargetItemIDType))]
    [XmlInclude(typeof(anyURI_DEtype))]
    [XmlInclude(typeof(anyType_DEtype))]
    [XmlInclude(typeof(CommentType))]
    [XmlInclude(typeof(ExtensionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("BaseType")]
    public abstract partial class BaseType : EntityBase<BaseType>
    {
        #region Private fields
        private string _name;
        private string _type;
        private string _styleClass;
        private System.Nullable<decimal> _order;
        private bool _nameSpecified;
        private bool _typeSpecified;
        private bool _styleClassSpecified;
        #endregion

        /// <summary>
        /// @name is a developer assigned unique identifier, similar to a unique control/object/variable name, used to provide the ability for programmatic manipulation of an element.  The value of name must be unique within an FDF and FDF-R, even when FDF sections are repeated in the XML.  @name values may begin with a letter or an underscore and may only contain characters that are legal for variable names.  These generally include letters, numbers and underscore.  The use of other characters may result in errors, depending on the programming language employed.  Since XML is case-sensitive, names should not be made unique solely on the basis of alphabetic case, since many programming languages are case insensitive and cannot distinguish names based only on case differences.
        /// </summary>
        [XmlAttribute(DataType = "ID")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        /// <summary>
        /// The @type attribute can contain custom metadata "tokens" for the element, chosen from a standardized list of terms. Tokens are short alphanumeric text strings, defined by the W3C Schema NMTOKEN specification, that are defined in an Implementation Guide. The type xsd:NMTOKEN represents a single string token. NMTOKEN values may consist of letters, digits, periods ( . ), hyphens ( - ), underscores ( _ ), and colons ( : ). They may start with any of these characters. (www.datypic.com/sc/xsd/t-xsd_NMTOKEN.html) @type tokens may be specific for one or more kinds of SDC elements. Multiple tokens in the type attribute should be separated by whitespace. Type tokens may be used to specify special handling by an application, and are usually used to define form display constraints, but may include other custom metadata as well. Style metadata should generally be handled with @styleClass rather than @type. @type token examples include: tooltip, statusLineText, alignTopLeft, align:bottom, _pageBreak-after, etc. @type metadata should generally not affect the information content of a form.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        /// <summary>
        /// @styleClass is a developer assigned class name for display styling, generally for use with an external style sheet..
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string styleClass
        {
            get
            {
                return _styleClass;
            }
            set
            {
                _styleClass = value;
            }
        }

        /// <summary>
        /// @order is a decimal attribute that allows the form template developer to define a sequential order for elements in a template. This serves the purpose of providing a definitive/original order to sections, questions, answer choices, etc., when required for display purposes. This is important when the original XML ordering may become disrupted due to the use of an implementation technology that does not natively support ordering (e.g., object collections), and it can also provide a check on the proper importing of the XML tree during implementation.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal order
        {
            get
            {
                if (_order.HasValue)
                {
                    return _order.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _order = value;
            }
        }

        [XmlIgnore]
        public virtual bool orderSpecified
        {
            get
            {
                return _order.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _order = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return _nameSpecified;
            }
            set
            {
                _nameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool typeSpecified
        {
            get
            {
                return _typeSpecified;
            }
            set
            {
                _typeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool styleClassSpecified
        {
            get
            {
                return _styleClassSpecified;
            }
            set
            {
                _styleClassSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ChangeTrackingType")]
    public partial class ChangeTrackingType : BaseType
    {
        #region Private fields
        private List<string_Stype> _changeTrackingID;
        private bool _changeTrackingIDSpecified;
        #endregion

        [XmlElement("ChangeTrackingID", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> ChangeTrackingID
        {
            get
            {
                if ((_changeTrackingID == null))
                {
                    _changeTrackingID = new List<string_Stype>();
                }
                return _changeTrackingID;
            }
            set
            {
                _changeTrackingID = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeTrackingIDSpecified
        {
            get
            {
                return _changeTrackingIDSpecified;
            }
            set
            {
                _changeTrackingIDSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(FileHashType))]
    [XmlInclude(typeof(TargetItemXPathType))]
    [XmlInclude(typeof(LanguageCodeISO6393_Type))]
    [XmlInclude(typeof(UnitsType))]
    [XmlInclude(typeof(AcceptabilityType))]
    [XmlInclude(typeof(string_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("string_Stype")]
    public partial class string_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("FileHashType")]
    public partial class FileHashType : string_Stype
    {
        #region Private fields
        private string _hashType;
        private bool _hashTypeSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hashType
        {
            get
            {
                return _hashType;
            }
            set
            {
                _hashType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hashTypeSpecified
        {
            get
            {
                return _hashTypeSpecified;
            }
            set
            {
                _hashTypeSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("TargetItemXPathType")]
    public partial class TargetItemXPathType : string_Stype
    {
        #region Private fields
        private string _targetItemText;
        private bool _targetItemTextSpecified;
        #endregion

        /// <summary>
        /// Displayed text on the targetted item.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetItemText
        {
            get
            {
                return _targetItemText;
            }
            set
            {
                _targetItemText = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetItemTextSpecified
        {
            get
            {
                return _targetItemTextSpecified;
            }
            set
            {
                _targetItemTextSpecified = value;
            }
        }
    }

    /// <summary>
    /// A generic structure for recording languages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName = "LanguageCode.ISO.639.3_Type", Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("LanguageCodeISO6393_Type")]
    public partial class LanguageCodeISO6393_Type : string_Stype
    {
    }

    /// <summary>
    /// UnitsType represents the measurement standard and its abbreviated notation for
    /// quantifiable objects, e.g., miles, km, mm, cm, etc. The default system for standard notations is
    /// UCUM.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("UnitsType")]
    public partial class UnitsType : string_Stype
    {
        #region Private fields
        private string _unitSystem;
        private bool _unitSystemSpecified;
        #endregion

        /// <summary>
        /// UnitsType class constructor
        /// </summary>
        public UnitsType()
        {
            _unitSystem = "UCUM";
        }

        [XmlAttribute]
        [DefaultValue("UCUM")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string unitSystem
        {
            get
            {
                return _unitSystem;
            }
            set
            {
                _unitSystem = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool unitSystemSpecified
        {
            get
            {
                return _unitSystemSpecified;
            }
            set
            {
                _unitSystemSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("AcceptabilityType")]
    public partial class AcceptabilityType : string_Stype
    {
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("string_DEtype")]
    public partial class string_DEtype : string_Stype
    {
        #region Private fields
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        private string _pattern;
        private string _mask;
        private bool _patternSpecified;
        private bool _maskSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string pattern
        {
            get
            {
                return _pattern;
            }
            set
            {
                _pattern = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool patternSpecified
        {
            get
            {
                return _patternSpecified;
            }
            set
            {
                _patternSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ReplacedIDsType")]
    public partial class ReplacedIDsType : BaseType
    {
        #region Private fields
        private List<anyURI_Stype> _replacedID;
        private bool _replacedIDSpecified;
        #endregion

        [XmlElement("ReplacedID", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<anyURI_Stype> ReplacedID
        {
            get
            {
                if ((_replacedID == null))
                {
                    _replacedID = new List<anyURI_Stype>();
                }
                return _replacedID;
            }
            set
            {
                _replacedID = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ReplacedIDSpecified
        {
            get
            {
                return _replacedIDSpecified;
            }
            set
            {
                _replacedIDSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(TargetItemIDType))]
    [XmlInclude(typeof(anyURI_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("anyURI_Stype")]
    public partial class anyURI_Stype : BaseType
    {
        #region Private fields
        private string _mediaType;
        private string _val;
        private bool _mediaTypeSpecified;
        private bool _valSpecified;
        #endregion

        /// <summary>
        /// TBD: Must be a valid Media (MIME) type
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mediaType
        {
            get
            {
                return _mediaType;
            }
            set
            {
                _mediaType = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool mediaTypeSpecified
        {
            get
            {
                return _mediaTypeSpecified;
            }
            set
            {
                _mediaTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("TargetItemIDType")]
    public partial class TargetItemIDType : anyURI_Stype
    {
        #region Private fields
        private string _targetItemText;
        private string _targetProperty;
        private bool _targetItemTextSpecified;
        private bool _targetPropertySpecified;
        #endregion

        /// <summary>
        /// Displayed text on the targetted item.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetItemText
        {
            get
            {
                return _targetItemText;
            }
            set
            {
                _targetItemText = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetProperty
        {
            get
            {
                return _targetProperty;
            }
            set
            {
                _targetProperty = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetItemTextSpecified
        {
            get
            {
                return _targetItemTextSpecified;
            }
            set
            {
                _targetItemTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetPropertySpecified
        {
            get
            {
                return _targetPropertySpecified;
            }
            set
            {
                _targetPropertySpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("anyURI_DEtype")]
    public partial class anyURI_DEtype : anyURI_Stype
    {
        #region Private fields
        private System.Nullable<long> _x_length;
        private string _description;
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        private string _pattern;
        private bool _descriptionSpecified;
        private bool _patternSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long X_length
        {
            get
            {
                if (_x_length.HasValue)
                {
                    return _x_length.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _x_length = value;
            }
        }

        [XmlIgnore]
        public virtual bool X_lengthSpecified
        {
            get
            {
                return _x_length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _x_length = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string pattern
        {
            get
            {
                return _pattern;
            }
            set
            {
                _pattern = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool descriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool patternSpecified
        {
            get
            {
                return _patternSpecified;
            }
            set
            {
                _patternSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CodeMatchType")]
    public partial class CodeMatchType : BaseType
    {
        #region Private fields
        private string_Stype _codingMatchComment;
        private CodeMatchTypeCodeMatchEnum _codeMatchEnum;
        private bool _codingMatchCommentSpecified;
        private bool _codeMatchEnumSpecified;
        #endregion

        /// <summary>
        /// CodeMatchType class constructor
        /// </summary>
        public CodeMatchType()
        {
            _codeMatchEnum = CodeMatchTypeCodeMatchEnum.ExactCodeMatch;
        }

        /// <summary>
        /// Comment about the degree of match between the mapped item and the assigned
        /// code.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype CodingMatchComment
        {
            get
            {
                return _codingMatchComment;
            }
            set
            {
                _codingMatchComment = value;
            }
        }

        /// <summary>
        /// The degree of match between the coded item and the assigned
        /// code.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(CodeMatchTypeCodeMatchEnum.ExactCodeMatch)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual CodeMatchTypeCodeMatchEnum codeMatchEnum
        {
            get
            {
                return _codeMatchEnum;
            }
            set
            {
                _codeMatchEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodingMatchCommentSpecified
        {
            get
            {
                return _codingMatchCommentSpecified;
            }
            set
            {
                _codingMatchCommentSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool codeMatchEnumSpecified
        {
            get
            {
                return _codeMatchEnumSpecified;
            }
            set
            {
                _codeMatchEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum CodeMatchTypeCodeMatchEnum
    {
        [XmlEnumAttribute("Exact Code Match")]
        [EnumMember(Value = "Exact Code Match")]
        ExactCodeMatch,
        /// <summary>
        /// **New**
        /// </summary>
        [XmlEnumAttribute("Semantic Match")]
        [EnumMember(Value = "Semantic Match")]
        SemanticMatch,
        [XmlEnumAttribute("Close Code Match")]
        [EnumMember(Value = "Close Code Match")]
        CloseCodeMatch,
        [XmlEnumAttribute("Code Broader Than Item")]
        [EnumMember(Value = "Code Broader Than Item")]
        CodeBroaderThanItem,
        [XmlEnumAttribute("Code Narrower Than Item")]
        [EnumMember(Value = "Code Narrower Than Item")]
        CodeNarrowerThanItem,
        [XmlEnumAttribute("Item Implements Data Element Exactly")]
        [EnumMember(Value = "Item Implements Data Element Exactly")]
        ItemImplementsDataElementExactly,
        [XmlEnumAttribute("Item Derived From Data Element")]
        [EnumMember(Value = "Item Derived From Data Element")]
        ItemDerivedFromDataElement,
        [XmlEnumAttribute("Item Related To Data Element")]
        [EnumMember(Value = "Item Related To Data Element")]
        ItemRelatedToDataElement,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("TargetItemNameType")]
    public partial class TargetItemNameType : BaseType
    {
        #region Private fields
        private string _val;
        private string _targetItemText;
        private string _targetProperty;
        private bool _valSpecified;
        private bool _targetItemTextSpecified;
        private bool _targetPropertySpecified;
        #endregion

        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        /// <summary>
        /// Displayed text on the targetted item.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetItemText
        {
            get
            {
                return _targetItemText;
            }
            set
            {
                _targetItemText = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetProperty
        {
            get
            {
                return _targetProperty;
            }
            set
            {
                _targetProperty = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetItemTextSpecified
        {
            get
            {
                return _targetItemTextSpecified;
            }
            set
            {
                _targetItemTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetPropertySpecified
        {
            get
            {
                return _targetPropertySpecified;
            }
            set
            {
                _targetPropertySpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CountryCodeType")]
    public partial class CountryCodeType : BaseType
    {
        #region Private fields
        private byte _val;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("AreaCodeType")]
    public partial class AreaCodeType : BaseType
    {
        #region Private fields
        private System.Nullable<ushort> _val;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }
    }

    [XmlInclude(typeof(yearMonthDuration_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("yearMonthDuration_Stype")]
    public partial class yearMonthDuration_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// yearMonthDuration_Stype class constructor
        /// </summary>
        public yearMonthDuration_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("yearMonthDuration_DEtype")]
    public partial class yearMonthDuration_DEtype : yearMonthDuration_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// yearMonthDuration_DEtype class constructor
        /// </summary>
        public yearMonthDuration_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(XML_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("XML_Stype")]
    public partial class XML_Stype : BaseType
    {
        #region Private fields
        private List<System.Xml.XmlElement> _any;
        private string _schema;
        private bool _anySpecified;
        private bool _schemaSpecified;
        #endregion

        [XmlAnyElementAttribute(Order = 0)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlElement> Any
        {
            get
            {
                if ((_any == null))
                {
                    _any = new List<System.Xml.XmlElement>();
                }
                return _any;
            }
            set
            {
                _any = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string schema
        {
            get
            {
                return _schema;
            }
            set
            {
                _schema = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnySpecified
        {
            get
            {
                return _anySpecified;
            }
            set
            {
                _anySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool schemaSpecified
        {
            get
            {
                return _schemaSpecified;
            }
            set
            {
                _schemaSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("XML_DEtype")]
    public partial class XML_DEtype : XML_Stype
    {
        #region Private fields
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }
    }

    [XmlInclude(typeof(unsignedShort_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedShort_Stype")]
    public partial class unsignedShort_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<ushort> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// unsignedShort_Stype class constructor
        /// </summary>
        public unsignedShort_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedShort_DEtype")]
    public partial class unsignedShort_DEtype : unsignedShort_Stype
    {
        #region Private fields
        private System.Nullable<ushort> _minInclusive;
        private System.Nullable<ushort> _maxInclusive;
        private System.Nullable<ushort> _minExclusive;
        private System.Nullable<ushort> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// unsignedShort_DEtype class constructor
        /// </summary>
        public unsignedShort_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(ushort);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(unsignedLong_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedLong_Stype")]
    public partial class unsignedLong_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<ulong> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// unsignedLong_Stype class constructor
        /// </summary>
        public unsignedLong_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ulong val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedLong_DEtype")]
    public partial class unsignedLong_DEtype : unsignedLong_Stype
    {
        #region Private fields
        private System.Nullable<ulong> _minInclusive;
        private System.Nullable<ulong> _maxInclusive;
        private System.Nullable<ulong> _minExclusive;
        private System.Nullable<ulong> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// unsignedLong_DEtype class constructor
        /// </summary>
        public unsignedLong_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ulong minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ulong maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ulong minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ulong maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(ulong);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(unsignedInt_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedInt_Stype")]
    public partial class unsignedInt_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<uint> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// unsignedInt_Stype class constructor
        /// </summary>
        public unsignedInt_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual uint val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedInt_DEtype")]
    public partial class unsignedInt_DEtype : unsignedInt_Stype
    {
        #region Private fields
        private System.Nullable<uint> _minInclusive;
        private System.Nullable<uint> _maxInclusive;
        private System.Nullable<uint> _minExclusive;
        private System.Nullable<uint> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// unsignedInt_DEtype class constructor
        /// </summary>
        public unsignedInt_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual uint minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual uint maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual uint minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual uint maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(uint);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(unsignedByte_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedByte_Stype")]
    public partial class unsignedByte_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<byte> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// unsignedByte_Stype class constructor
        /// </summary>
        public unsignedByte_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("unsignedByte_DEtype")]
    public partial class unsignedByte_DEtype : unsignedByte_Stype
    {
        #region Private fields
        private System.Nullable<byte> _minInclusive;
        private System.Nullable<byte> _maxInclusive;
        private System.Nullable<byte> _minExclusive;
        private System.Nullable<byte> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// unsignedByte_DEtype class constructor
        /// </summary>
        public unsignedByte_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(time_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("time_Stype")]
    public partial class time_Stype : BaseType
    {
        #region Private fields
        private DateTime? _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// time_Stype class constructor
        /// </summary>
        public time_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "time")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("time_DEtype")]
    public partial class time_DEtype : time_Stype
    {
        #region Private fields
        private DateTime? _minInclusive;
        private DateTime? _maxInclusive;
        private DateTime? _minExclusive;
        private DateTime? _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// time_DEtype class constructor
        /// </summary>
        public time_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "time")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "time")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "time")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "time")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(short_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("short_Stype")]
    public partial class short_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<short> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// short_Stype class constructor
        /// </summary>
        public short_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(short);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("short_DEtype")]
    public partial class short_DEtype : short_Stype
    {
        #region Private fields
        private System.Nullable<short> _minInclusive;
        private System.Nullable<short> _maxInclusive;
        private System.Nullable<short> _minExclusive;
        private System.Nullable<short> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// short_DEtype class constructor
        /// </summary>
        public short_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(short);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(short);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(short);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(short);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(positiveInteger_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("positiveInteger_Stype")]
    public partial class positiveInteger_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// positiveInteger_Stype class constructor
        /// </summary>
        public positiveInteger_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("positiveInteger_DEtype")]
    public partial class positiveInteger_DEtype : positiveInteger_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// positiveInteger_DEtype class constructor
        /// </summary>
        public positiveInteger_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(nonPositiveInteger_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("nonPositiveInteger_Stype")]
    public partial class nonPositiveInteger_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// nonPositiveInteger_Stype class constructor
        /// </summary>
        public nonPositiveInteger_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "nonPositiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("nonPositiveInteger_DEtype")]
    public partial class nonPositiveInteger_DEtype : nonPositiveInteger_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// nonPositiveInteger_DEtype class constructor
        /// </summary>
        public nonPositiveInteger_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "nonPositiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonPositiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonPositiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonPositiveInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(nonNegativeInteger_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("nonNegativeInteger_Stype")]
    public partial class nonNegativeInteger_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// nonNegativeInteger_Stype class constructor
        /// </summary>
        public nonNegativeInteger_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("nonNegativeInteger_DEtype")]
    public partial class nonNegativeInteger_DEtype : nonNegativeInteger_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// nonNegativeInteger_DEtype class constructor
        /// </summary>
        public nonNegativeInteger_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(negativeInteger_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("negativeInteger_Stype")]
    public partial class negativeInteger_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// negativeInteger_Stype class constructor
        /// </summary>
        public negativeInteger_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "negativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("negativeInteger_DEtype")]
    public partial class negativeInteger_DEtype : negativeInteger_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// negativeInteger_DEtype class constructor
        /// </summary>
        public negativeInteger_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "negativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "negativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "negativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "negativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(long_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("long_Stype")]
    public partial class long_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<long> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// long_Stype class constructor
        /// </summary>
        public long_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("long_DEtype")]
    public partial class long_DEtype : long_Stype
    {
        #region Private fields
        private System.Nullable<long> _minInclusive;
        private System.Nullable<long> _maxInclusive;
        private System.Nullable<long> _minExclusive;
        private System.Nullable<long> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// long_DEtype class constructor
        /// </summary>
        public long_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(integer_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("integer_Stype")]
    public partial class integer_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// integer_Stype class constructor
        /// </summary>
        public integer_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "integer")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("integer_DEtype")]
    public partial class integer_DEtype : integer_Stype
    {
        #region Private fields
        private string _maxExclusive;
        private string _minExclusive;
        private string _maxInclusive;
        private string _minInclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maxExclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minInclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// integer_DEtype class constructor
        /// </summary>
        public integer_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "integer")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute(DataType = "integer")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "integer")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "integer")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(int_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("int_Stype")]
    public partial class int_Stype : BaseType
    {
        #region Private fields
        private int? _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// int_Stype class constructor
        /// </summary>
        public int_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("int_DEtype")]
    public partial class int_DEtype : int_Stype
    {
        #region Private fields
        private int? _minInclusive;
        private int? _maxInclusive;
        private int? _minExclusive;
        private int? _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// int_DEtype class constructor
        /// </summary>
        public int_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(HTML_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("HTML_Stype")]
    public partial class HTML_Stype : BaseType
    {
        #region Private fields
        private List<System.Xml.XmlElement> _any;
        private List<System.Xml.XmlAttribute> _anyAttr;
        private bool _anySpecified;
        private bool _anyAttrSpecified;
        #endregion

        [XmlAnyElementAttribute(Order = 0)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlElement> Any
        {
            get
            {
                if ((_any == null))
                {
                    _any = new List<System.Xml.XmlElement>();
                }
                return _any;
            }
            set
            {
                _any = value;
            }
        }

        [XmlAnyAttributeAttribute()]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                if ((_anyAttr == null))
                {
                    _anyAttr = new List<System.Xml.XmlAttribute>();
                }
                return _anyAttr;
            }
            set
            {
                _anyAttr = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnySpecified
        {
            get
            {
                return _anySpecified;
            }
            set
            {
                _anySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnyAttrSpecified
        {
            get
            {
                return _anyAttrSpecified;
            }
            set
            {
                _anyAttrSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("HTML_DEtype")]
    public partial class HTML_DEtype : HTML_Stype
    {
        #region Private fields
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }
    }

    [XmlInclude(typeof(hexBinary_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("hexBinary_Stype")]
    public partial class hexBinary_Stype : BaseType
    {
        #region Private fields
        private string _mimeType;
        private byte[] _val;
        private bool _mimeTypeSpecified;
        private bool _valSpecified;
        #endregion

        /// <summary>
        /// TBD: Must be a valid MIME type - needs
        /// enumeration
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mimeType
        {
            get
            {
                return _mimeType;
            }
            set
            {
                _mimeType = value;
            }
        }

        [XmlAttribute(DataType = "hexBinary")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte[] val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool mimeTypeSpecified
        {
            get
            {
                return _mimeTypeSpecified;
            }
            set
            {
                _mimeTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("hexBinary_DEtype")]
    public partial class hexBinary_DEtype : hexBinary_Stype
    {
        #region Private fields
        private string _description;
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        private string _mask;
        private bool _descriptionSpecified;
        private bool _maskSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool descriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(gYearMonth_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gYearMonth_Stype")]
    public partial class gYearMonth_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// gYearMonth_Stype class constructor
        /// </summary>
        public gYearMonth_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "gYearMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gYearMonth_DEtype")]
    public partial class gYearMonth_DEtype : gYearMonth_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// gYearMonth_DEtype class constructor
        /// </summary>
        public gYearMonth_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "gYearMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYearMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYearMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYearMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(gYear_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gYear_Stype")]
    public partial class gYear_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// gYear_Stype class constructor
        /// </summary>
        public gYear_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "gYear")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gYear_DEtype")]
    public partial class gYear_DEtype : gYear_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// gYear_DEtype class constructor
        /// </summary>
        public gYear_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "gYear")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYear")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYear")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "gYear")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(gMonthDay_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gMonthDay_Stype")]
    public partial class gMonthDay_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// gMonthDay_Stype class constructor
        /// </summary>
        public gMonthDay_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "gMonthDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gMonthDay_DEtype")]
    public partial class gMonthDay_DEtype : gMonthDay_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// gMonthDay_DEtype class constructor
        /// </summary>
        public gMonthDay_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "gMonthDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonthDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonthDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonthDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(gMonth_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gMonth_Stype")]
    public partial class gMonth_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// gMonth_Stype class constructor
        /// </summary>
        public gMonth_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "gMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gMonth_DEtype")]
    public partial class gMonth_DEtype : gMonth_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// gMonth_DEtype class constructor
        /// </summary>
        public gMonth_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "gMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "gMonth")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(gDay_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gDay_Stype")]
    public partial class gDay_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// gDay_Stype class constructor
        /// </summary>
        public gDay_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "gDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("gDay_DEtype")]
    public partial class gDay_DEtype : gDay_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// gDay_DEtype class constructor
        /// </summary>
        public gDay_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "gDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "gDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "gDay")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(float_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("float_Stype")]
    public partial class float_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<float> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// float_Stype class constructor
        /// </summary>
        public float_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual float val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("float_DEtype")]
    public partial class float_DEtype : float_Stype
    {
        #region Private fields
        private System.Nullable<float> _minInclusive;
        private System.Nullable<float> _maxInclusive;
        private System.Nullable<float> _minExclusive;
        private System.Nullable<float> _maxExclusive;
        private System.Nullable<byte> _fractionDigits;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// float_DEtype class constructor
        /// </summary>
        public float_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual float minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual float maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual float minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual float maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte fractionDigits
        {
            get
            {
                if (_fractionDigits.HasValue)
                {
                    return _fractionDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _fractionDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool fractionDigitsSpecified
        {
            get
            {
                return _fractionDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _fractionDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(duration_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("duration_Stype")]
    public partial class duration_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// duration_Stype class constructor
        /// </summary>
        public duration_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("duration_DEtype")]
    public partial class duration_DEtype : duration_Stype
    {
        #region Private fields
        private string _minInclusive;
        private string _maxInclusive;
        private string _minExclusive;
        private string _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _minInclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxExclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// duration_DEtype class constructor
        /// </summary>
        public duration_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(double_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("double_Stype")]
    public partial class double_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<double> _val;
        private string _mask;
        private dtQuantEnum _quantEnum;
        private bool _maskSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// double_Stype class constructor
        /// </summary>
        public double_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual double val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("double_DEtype")]
    public partial class double_DEtype : double_Stype
    {
        #region Private fields
        private System.Nullable<double> _minInclusive;
        private System.Nullable<double> _maxInclusive;
        private System.Nullable<double> _minExclusive;
        private System.Nullable<double> _maxExclusive;
        private System.Nullable<byte> _fractionDigits;
        private System.Nullable<byte> _totalDigits;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// double_DEtype class constructor
        /// </summary>
        public double_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual double minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual double maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual double minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual double maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte fractionDigits
        {
            get
            {
                if (_fractionDigits.HasValue)
                {
                    return _fractionDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _fractionDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool fractionDigitsSpecified
        {
            get
            {
                return _fractionDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _fractionDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(decimal_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("decimal_Stype")]
    public partial class decimal_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<decimal> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// decimal_Stype class constructor
        /// </summary>
        public decimal_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("decimal_DEtype")]
    public partial class decimal_DEtype : decimal_Stype
    {
        #region Private fields
        private System.Nullable<decimal> _minInclusive;
        private System.Nullable<decimal> _maxInclusive;
        private System.Nullable<decimal> _minExclusive;
        private System.Nullable<decimal> _maxExclusive;
        private System.Nullable<byte> _fractionDigits;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// decimal_DEtype class constructor
        /// </summary>
        public decimal_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual decimal maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte fractionDigits
        {
            get
            {
                if (_fractionDigits.HasValue)
                {
                    return _fractionDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _fractionDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool fractionDigitsSpecified
        {
            get
            {
                return _fractionDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _fractionDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(dayTimeDuration_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dayTimeDuration_Stype")]
    public partial class dayTimeDuration_Stype : BaseType
    {
        #region Private fields
        private string _val;
        private dtQuantEnum _quantEnum;
        private bool _valSpecified;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// dayTimeDuration_Stype class constructor
        /// </summary>
        public dayTimeDuration_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dayTimeDuration_DEtype")]
    public partial class dayTimeDuration_DEtype : dayTimeDuration_Stype
    {
        #region Private fields
        private string _maxExclusive;
        private string _minExclusive;
        private string _maxInclusive;
        private string _minInclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maxExclusiveSpecified;
        private bool _minExclusiveSpecified;
        private bool _maxInclusiveSpecified;
        private bool _minInclusiveSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// dayTimeDuration_DEtype class constructor
        /// </summary>
        public dayTimeDuration_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxExclusive
        {
            get
            {
                return _maxExclusive;
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minExclusive
        {
            get
            {
                return _minExclusive;
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string maxInclusive
        {
            get
            {
                return _maxInclusive;
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlAttribute(DataType = "duration")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string minInclusive
        {
            get
            {
                return _minInclusive;
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusiveSpecified;
            }
            set
            {
                _maxExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minExclusiveSpecified
        {
            get
            {
                return _minExclusiveSpecified;
            }
            set
            {
                _minExclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusiveSpecified;
            }
            set
            {
                _maxInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minInclusiveSpecified
        {
            get
            {
                return _minInclusiveSpecified;
            }
            set
            {
                _minInclusiveSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(dateTimeStamp_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dateTimeStamp_Stype")]
    public partial class dateTimeStamp_Stype : BaseType
    {
        #region Private fields
        private DateTime? _val;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dateTimeStamp_DEtype")]
    public partial class dateTimeStamp_DEtype : dateTimeStamp_Stype
    {
        #region Private fields
        private DateTime? _maxExclusive;
        private DateTime? _minExclusive;
        private DateTime? _maxInclusive;
        private DateTime? _minInclusive;
        private string _mask;
        private bool _maskSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(dateTime_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dateTime_Stype")]
    public partial class dateTime_Stype : BaseType
    {
        #region Private fields
        private DateTime? _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// dateTime_Stype class constructor
        /// </summary>
        public dateTime_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("dateTime_DEtype")]
    public partial class dateTime_DEtype : dateTime_Stype
    {
        #region Private fields
        private DateTime? _minInclusive;
        private DateTime? _maxInclusive;
        private DateTime? _minExclusive;
        private DateTime? _maxExclusive;
        private string _pattern;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _patternSpecified;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// dateTime_DEtype class constructor
        /// </summary>
        public dateTime_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string pattern
        {
            get
            {
                return _pattern;
            }
            set
            {
                _pattern = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool patternSpecified
        {
            get
            {
                return _patternSpecified;
            }
            set
            {
                _patternSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(date_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("date_Stype")]
    public partial class date_Stype : BaseType
    {
        #region Private fields
        private DateTime? _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// date_Stype class constructor
        /// </summary>
        public date_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute(DataType = "date")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("date_DEtype")]
    public partial class date_DEtype : date_Stype
    {
        #region Private fields
        private DateTime? _minInclusive;
        private DateTime? _maxInclusive;
        private DateTime? _minExclusive;
        private DateTime? _maxExclusive;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// date_DEtype class constructor
        /// </summary>
        public date_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute(DataType = "date")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "date")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "date")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute(DataType = "date")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual System.DateTime maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(byte_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("byte_Stype")]
    public partial class byte_Stype : BaseType
    {
        #region Private fields
        private System.Nullable<sbyte> _val;
        private dtQuantEnum _quantEnum;
        private bool _quantEnumSpecified;
        #endregion

        /// <summary>
        /// byte_Stype class constructor
        /// </summary>
        public byte_Stype()
        {
            _quantEnum = dtQuantEnum.EQ;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual sbyte val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(sbyte);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValue(dtQuantEnum.EQ)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual dtQuantEnum quantEnum
        {
            get
            {
                return _quantEnum;
            }
            set
            {
                _quantEnum = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool quantEnumSpecified
        {
            get
            {
                return _quantEnumSpecified;
            }
            set
            {
                _quantEnumSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("byte_DEtype")]
    public partial class byte_DEtype : byte_Stype
    {
        #region Private fields
        private System.Nullable<sbyte> _minInclusive;
        private System.Nullable<sbyte> _maxInclusive;
        private System.Nullable<sbyte> _minExclusive;
        private System.Nullable<sbyte> _maxExclusive;
        private System.Nullable<byte> _totalDigits;
        private string _mask;
        private bool _allowGT;
        private bool _allowGTE;
        private bool _allowLT;
        private bool _allowLTE;
        private bool _allowAPPROX;
        private bool _maskSpecified;
        private bool _allowGTSpecified;
        private bool _allowGTESpecified;
        private bool _allowLTSpecified;
        private bool _allowLTESpecified;
        private bool _allowAPPROXSpecified;
        #endregion

        /// <summary>
        /// byte_DEtype class constructor
        /// </summary>
        public byte_DEtype()
        {
            _allowGT = false;
            _allowGTE = false;
            _allowLT = false;
            _allowLTE = false;
            _allowAPPROX = false;
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual sbyte minInclusive
        {
            get
            {
                if (_minInclusive.HasValue)
                {
                    return _minInclusive.Value;
                }
                else
                {
                    return default(sbyte);
                }
            }
            set
            {
                _minInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minInclusiveSpecified
        {
            get
            {
                return _minInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual sbyte maxInclusive
        {
            get
            {
                if (_maxInclusive.HasValue)
                {
                    return _maxInclusive.Value;
                }
                else
                {
                    return default(sbyte);
                }
            }
            set
            {
                _maxInclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxInclusiveSpecified
        {
            get
            {
                return _maxInclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxInclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual sbyte minExclusive
        {
            get
            {
                if (_minExclusive.HasValue)
                {
                    return _minExclusive.Value;
                }
                else
                {
                    return default(sbyte);
                }
            }
            set
            {
                _minExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool minExclusiveSpecified
        {
            get
            {
                return _minExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual sbyte maxExclusive
        {
            get
            {
                if (_maxExclusive.HasValue)
                {
                    return _maxExclusive.Value;
                }
                else
                {
                    return default(sbyte);
                }
            }
            set
            {
                _maxExclusive = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxExclusiveSpecified
        {
            get
            {
                return _maxExclusive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxExclusive = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte totalDigits
        {
            get
            {
                if (_totalDigits.HasValue)
                {
                    return _totalDigits.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                _totalDigits = value;
            }
        }

        [XmlIgnore]
        public virtual bool totalDigitsSpecified
        {
            get
            {
                return _totalDigits.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _totalDigits = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mask
        {
            get
            {
                return _mask;
            }
            set
            {
                _mask = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGT
        {
            get
            {
                return _allowGT;
            }
            set
            {
                _allowGT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowGTE
        {
            get
            {
                return _allowGTE;
            }
            set
            {
                _allowGTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLT
        {
            get
            {
                return _allowLT;
            }
            set
            {
                _allowLT = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowLTE
        {
            get
            {
                return _allowLTE;
            }
            set
            {
                _allowLTE = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowAPPROX
        {
            get
            {
                return _allowAPPROX;
            }
            set
            {
                _allowAPPROX = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maskSpecified
        {
            get
            {
                return _maskSpecified;
            }
            set
            {
                _maskSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTSpecified
        {
            get
            {
                return _allowGTSpecified;
            }
            set
            {
                _allowGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowGTESpecified
        {
            get
            {
                return _allowGTESpecified;
            }
            set
            {
                _allowGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTSpecified
        {
            get
            {
                return _allowLTSpecified;
            }
            set
            {
                _allowLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowLTESpecified
        {
            get
            {
                return _allowLTESpecified;
            }
            set
            {
                _allowLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowAPPROXSpecified
        {
            get
            {
                return _allowAPPROXSpecified;
            }
            set
            {
                _allowAPPROXSpecified = value;
            }
        }
    }

    [XmlInclude(typeof(boolean_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("boolean_Stype")]
    public partial class boolean_Stype : BaseType
    {
        #region Private fields
        private bool? _val;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool val
        {
            get
            {
                if (_val.HasValue)
                {
                    return _val.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _val = value;
            }
        }

        [XmlIgnore]
        public virtual bool valSpecified
        {
            get
            {
                return _val.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _val = null;
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("boolean_DEtype")]
    public partial class boolean_DEtype : boolean_Stype
    {
    }

    [XmlInclude(typeof(HashType))]
    [XmlInclude(typeof(base64Binary_DEtype))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("base64Binary_Stype")]
    public partial class base64Binary_Stype : BaseType
    {
        #region Private fields
        private string _mediaType;
        private byte[] _val;
        private bool _mediaTypeSpecified;
        private bool _valSpecified;
        #endregion

        /// <summary>
        /// TBD: Must be a valid Media (MIME) type
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mediaType
        {
            get
            {
                return _mediaType;
            }
            set
            {
                _mediaType = value;
            }
        }

        [XmlAttribute(DataType = "base64Binary")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte[] val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool mediaTypeSpecified
        {
            get
            {
                return _mediaTypeSpecified;
            }
            set
            {
                _mediaTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("HashType")]
    public partial class HashType : base64Binary_Stype
    {
        #region Private fields
        private string _hashAlgorithm;
        private bool _hashAlgorithmSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hashAlgorithm
        {
            get
            {
                return _hashAlgorithm;
            }
            set
            {
                _hashAlgorithm = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hashAlgorithmSpecified
        {
            get
            {
                return _hashAlgorithmSpecified;
            }
            set
            {
                _hashAlgorithmSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("base64Binary_DEtype")]
    public partial class base64Binary_DEtype : base64Binary_Stype
    {
        #region Private fields
        private string _description;
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        private bool _descriptionSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool descriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("anyType_DEtype")]
    public partial class anyType_DEtype : BaseType
    {
        #region Private fields
        private List<System.Xml.XmlElement> _any;
        private System.Nullable<long> _minLength;
        private System.Nullable<long> _maxLength;
        private string _schema;
        private string _namespace;
        private List<System.Xml.XmlAttribute> _anyAttr;
        private bool _anySpecified;
        private bool _schemaSpecified;
        private bool _namespaceSpecified;
        private bool _anyAttrSpecified;
        #endregion

        [XmlAnyElementAttribute(Order = 0)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlElement> Any
        {
            get
            {
                if ((_any == null))
                {
                    _any = new List<System.Xml.XmlElement>();
                }
                return _any;
            }
            set
            {
                _any = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long minLength
        {
            get
            {
                if (_minLength.HasValue)
                {
                    return _minLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _minLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool minLengthSpecified
        {
            get
            {
                return _minLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _minLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual long maxLength
        {
            get
            {
                if (_maxLength.HasValue)
                {
                    return _maxLength.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                _maxLength = value;
            }
        }

        [XmlIgnore]
        public virtual bool maxLengthSpecified
        {
            get
            {
                return _maxLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _maxLength = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string schema
        {
            get
            {
                return _schema;
            }
            set
            {
                _schema = value;
            }
        }

        /// <summary>
        /// Namespace used in an XML Schema file, if any, used to constrain and validate the the content of this field.  This is similar to the use of namespaces with the xs:any element in XML Schemas.
        /// 
        /// See: http://www.w3.org/TR/xmlschema-0/#any
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string @namespace
        {
            get
            {
                return _namespace;
            }
            set
            {
                _namespace = value;
            }
        }

        [XmlAnyAttributeAttribute()]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                if ((_anyAttr == null))
                {
                    _anyAttr = new List<System.Xml.XmlAttribute>();
                }
                return _anyAttr;
            }
            set
            {
                _anyAttr = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnySpecified
        {
            get
            {
                return _anySpecified;
            }
            set
            {
                _anySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool schemaSpecified
        {
            get
            {
                return _schemaSpecified;
            }
            set
            {
                _schemaSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool namespaceSpecified
        {
            get
            {
                return _namespaceSpecified;
            }
            set
            {
                _namespaceSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnyAttrSpecified
        {
            get
            {
                return _anyAttrSpecified;
            }
            set
            {
                _anyAttrSpecified = value;
            }
        }
    }

    /// <summary>
    /// Similar to the Schema type xs:anyType, but requires strict validation, and includes optional baseAttributes. Developer will need to declare a namespace and provide a Schema to validate the contents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ExtensionType")]
    public partial class ExtensionType : BaseType
    {
        #region Private fields
        private List<System.Xml.XmlElement> _any;
        private List<System.Xml.XmlAttribute> _anyAttr;
        private bool _anySpecified;
        private bool _anyAttrSpecified;
        #endregion

        [XmlAnyElementAttribute(Order = 0)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlElement> Any
        {
            get
            {
                if ((_any == null))
                {
                    _any = new List<System.Xml.XmlElement>();
                }
                return _any;
            }
            set
            {
                _any = value;
            }
        }

        [XmlAnyAttributeAttribute()]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                if ((_anyAttr == null))
                {
                    _anyAttr = new List<System.Xml.XmlAttribute>();
                }
                return _anyAttr;
            }
            set
            {
                _anyAttr = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnySpecified
        {
            get
            {
                return _anySpecified;
            }
            set
            {
                _anySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AnyAttrSpecified
        {
            get
            {
                return _anyAttrSpecified;
            }
            set
            {
                _anyAttrSpecified = value;
            }
        }
    }

    /// <summary>
    /// MOVED: From SDCFormDesign CHANGED: Property is any type of data that is associated with
    /// any form item (e.g., section, question, list item) in any context. The Property context is specified by
    /// the @type attribute. Examples of @type values may include: -alternate language representations, e.g.,
    /// 'spanish' -'instruction' -'tooltip' -'help' for a pop-up help box -'outlining' (such as question
    /// numbering) The @type enumerations must be defined and documented for the particular use case, and are
    /// currently out of scope in this schema definition. Multiple type tokens for a single element are
    /// supported. RENAMED: 'OtherText' to 'Property' 9/14/2016
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PropertyType")]
    public partial class PropertyType : ExtensionBaseType
    {
        #region Private fields
        private DataTypes_SType _typedValue;
        private string _propName;
        private string _propClass;
        private string _val;
        private bool _typedValueSpecified;
        private bool _propNameSpecified;
        private bool _propClassSpecified;
        private bool _valSpecified;
        #endregion

        /// <summary>
        /// Contains optional typed data.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_SType TypedValue
        {
            get
            {
                return _typedValue;
            }
            set
            {
                _typedValue = value;
            }
        }

        /// <summary>
        /// NEW
        /// </summary>
        [XmlAttribute(DataType = "NMTOKEN")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string propName
        {
            get
            {
                return _propName;
            }
            set
            {
                _propName = value;
            }
        }

        /// <summary>
        /// NEW
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string propClass
        {
            get
            {
                return _propClass;
            }
            set
            {
                _propClass = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TypedValueSpecified
        {
            get
            {
                return _typedValueSpecified;
            }
            set
            {
                _typedValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool propNameSpecified
        {
            get
            {
                return _propNameSpecified;
            }
            set
            {
                _propNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool propClassSpecified
        {
            get
            {
                return _propClassSpecified;
            }
            set
            {
                _propClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// MOVED from SDCDataTypes: SDC datatypes in Simple (S) format, based mostly on W3C
    /// specifications. Uses baseAttributes and Extension capability to enhance the list of Data Types. **CHECK
    /// for ERRORS and completeness**
    /// </summary>
    [XmlInclude(typeof(ParameterValueType))]
    [XmlInclude(typeof(PropertyType1))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypes_SType")]
    public partial class DataTypes_SType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private ItemChoiceType _itemElementName;
        private bool _itemSpecified;
        private bool _itemElementNameSpecified;
        #endregion

        [XmlElement("HTML", typeof(HTML_Stype), IsNullable = true, Order = 0)]
        [XmlElement("XML", typeof(XML_Stype), IsNullable = true, Order = 0)]
        [XmlElement("anyType", typeof(anyType_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("anyURI", typeof(anyURI_Stype), IsNullable = true, Order = 0)]
        [XmlElement("base64Binary", typeof(base64Binary_Stype), IsNullable = true, Order = 0)]
        [XmlElement("boolean", typeof(boolean_Stype), IsNullable = true, Order = 0)]
        [XmlElement("byte", typeof(byte_Stype), IsNullable = true, Order = 0)]
        [XmlElement("date", typeof(date_Stype), IsNullable = true, Order = 0)]
        [XmlElement("dateTime", typeof(dateTimeStamp_Stype), IsNullable = true, Order = 0)]
        [XmlElement("dateTimeStamp", typeof(dateTimeStamp_Stype), IsNullable = true, Order = 0)]
        [XmlElement("decimal", typeof(decimal_Stype), IsNullable = true, Order = 0)]
        [XmlElement("double", typeof(double_Stype), IsNullable = true, Order = 0)]
        [XmlElement("duration", typeof(duration_Stype), IsNullable = true, Order = 0)]
        [XmlElement("float", typeof(float_Stype), IsNullable = true, Order = 0)]
        [XmlElement("gDay", typeof(gDay_Stype), IsNullable = true, Order = 0)]
        [XmlElement("gMonth", typeof(gMonth_Stype), IsNullable = true, Order = 0)]
        [XmlElement("gMonthDay", typeof(gMonthDay_Stype), IsNullable = true, Order = 0)]
        [XmlElement("gYear", typeof(gYear_Stype), IsNullable = true, Order = 0)]
        [XmlElement("gYearMonth", typeof(gMonth_Stype), IsNullable = true, Order = 0)]
        [XmlElement("hexBinary", typeof(hexBinary_Stype), IsNullable = true, Order = 0)]
        [XmlElement("int", typeof(int_Stype), IsNullable = true, Order = 0)]
        [XmlElement("integer", typeof(integer_Stype), IsNullable = true, Order = 0)]
        [XmlElement("long", typeof(long_Stype), IsNullable = true, Order = 0)]
        [XmlElement("negativeInteger", typeof(negativeInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("nonNegativeInteger", typeof(nonNegativeInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("nonPositiveInteger", typeof(nonPositiveInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("positiveInteger", typeof(positiveInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("short", typeof(short_Stype), IsNullable = true, Order = 0)]
        [XmlElement("string", typeof(string_Stype), IsNullable = true, Order = 0)]
        [XmlElement("time", typeof(time_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedByte", typeof(unsignedByte_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedInt", typeof(unsignedInt_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedLong", typeof(unsignedLong_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedShort", typeof(unsignedShort_Stype), IsNullable = true, Order = 0)]
        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_Stype), IsNullable = true, Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElement(Order = 1)]
        [XmlIgnore]
        public virtual ItemChoiceType ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemElementNameSpecified
        {
            get
            {
                return _itemElementNameSpecified;
            }
            set
            {
                _itemElementNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemChoiceType
    {
        HTML,
        XML,
        anyType,
        anyURI,
        base64Binary,
        boolean,
        @byte,
        date,
        dateTime,
        dateTimeStamp,
        @decimal,
        @double,
        duration,
        @float,
        gDay,
        gMonth,
        gMonthDay,
        gYear,
        gYearMonth,
        hexBinary,
        @int,
        integer,
        @long,
        negativeInteger,
        nonNegativeInteger,
        nonPositiveInteger,
        positiveInteger,
        @short,
        @string,
        time,
        unsignedByte,
        unsignedInt,
        unsignedLong,
        unsignedShort,
        yearMonthDuration,
    }

    /// <summary>
    /// This type describes strongly-typed parameters used in functions and web services.  Values are hard-coded as constants in the XML instance document.  They are not user-entered values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ParameterValueType")]
    public partial class ParameterValueType : DataTypes_SType
    {
        #region Private fields
        private string _paramName;
        private bool _paramNameSpecified;
        #endregion

        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string paramName
        {
            get
            {
                return _paramName;
            }
            set
            {
                _paramName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool paramNameSpecified
        {
            get
            {
                return _paramNameSpecified;
            }
            set
            {
                _paramNameSpecified = value;
            }
        }
    }

    /// <summary>
    /// MOVED: From SDCFormDesign CHANGED: Property is any type of data that is associated with
    /// any form item (e.g., section, question, list item) in any context. The Property context is specified by
    /// the @type attribute. Examples of @type values may include: -alternate language representations, e.g.,
    /// 'spanish' -'instruction' -'tooltip' -'help' for a pop-up help box -'outlining' (such as question
    /// numbering) The @type enumerations must be defined and documented for the particular use case, and are
    /// currently out of scope in this schema definition. Multiple type tokens for a single element are
    /// supported. RENAMED: 'OtherText' to 'Property' 9/14/2016
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PropertyType1")]
    public partial class PropertyType1 : DataTypes_SType
    {
        #region Private fields
        private string _propName;
        private string _propClass;
        private string _val;
        private bool _propNameSpecified;
        private bool _propClassSpecified;
        private bool _valSpecified;
        #endregion

        /// <summary>
        /// NEW
        /// </summary>
        [XmlAttribute(DataType = "NMTOKEN")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string propName
        {
            get
            {
                return _propName;
            }
            set
            {
                _propName = value;
            }
        }

        /// <summary>
        /// NEW
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string propClass
        {
            get
            {
                return _propClass;
            }
            set
            {
                _propClass = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool propNameSpecified
        {
            get
            {
                return _propNameSpecified;
            }
            set
            {
                _propNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool propClassSpecified
        {
            get
            {
                return _propClassSpecified;
            }
            set
            {
                _propClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// NEW: SDC datatypes in Simple (S) format, based mostly on W3C specifications. Uses
    /// baseAttributes and Extension capability to enhance the list of Data Types. **CHECK for ERRORS and
    /// completeness**
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypesDateTime_SType")]
    public partial class DataTypesDateTime_SType : ExtensionBaseType
    {
        #region Private fields
        private object _list000;
        private date_Stype _date;
        private dateTimeStamp_Stype _dateTime;
        private dateTimeStamp_Stype _dateTimeStamp;
        private duration_Stype _duration;
        private gDay_Stype _gDay;
        private gMonth_Stype _gMonth;
        private gMonthDay_Stype _gMonthDay;
        private gYear_Stype _gYear;
        private gMonth_Stype _gYearMonth;
        private time_Stype _time;
        private yearMonthDuration_Stype _yearMonthDuration;
        private bool _list000Specified;
        private bool _dateSpecified;
        private bool _dateTimeSpecified;
        private bool _dateTimeStampSpecified;
        private bool _durationSpecified;
        private bool _gDaySpecified;
        private bool _gMonthSpecified;
        private bool _gMonthDaySpecified;
        private bool _gYearSpecified;
        private bool _gYearMonthSpecified;
        private bool _timeSpecified;
        private bool _yearMonthDurationSpecified;
        #endregion

        [XmlElement("List000", typeof(object), Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual object List000
        {
            get
            {
                return _list000;
            }
            set
            {
                _list000 = value;
            }
        }

        /// <summary>
        /// **Does SDC need a list of valid patterns for all date/time types?
        /// </summary>
        [XmlElement("date", typeof(date_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual date_Stype date
        {
            get
            {
                if ((_date == null))
                {
                    _date = new date_Stype();
                }
                return _date;
            }
            set
            {
                _date = value;
            }
        }

        /// <summary>
        /// DateTime
        /// Data Type The dateTime data type is used to specify a date and a time. The dateTime is
        /// specified in the following form "YYYY-MM-DDThh:mm:ss" where: YYYY indicates the year MM
        /// indicates the month DD indicates the day T indicates the start of the required time
        /// section hh indicates the hour mm indicates the minute ss indicates the second Time Zones
        /// To specify a time zone, you can either enter a time in UTC time by adding a "Z" behind
        /// the time - like this: 09:30:10Z or you can specify an offset from the UTC time by adding
        /// a positive or negative time behind the time - like this: 09:30:10-06:00 or
        /// 09:30:10+06:00.
        /// </summary>
        [XmlElement("dateTime", typeof(dateTimeStamp_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTimeStamp_Stype dateTime
        {
            get
            {
                if ((_dateTime == null))
                {
                    _dateTime = new dateTimeStamp_Stype();
                }
                return _dateTime;
            }
            set
            {
                _dateTime = value;
            }
        }

        [XmlElement("dateTimeStamp", typeof(dateTimeStamp_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTimeStamp_Stype dateTimeStamp
        {
            get
            {
                if ((_dateTimeStamp == null))
                {
                    _dateTimeStamp = new dateTimeStamp_Stype();
                }
                return _dateTimeStamp;
            }
            set
            {
                _dateTimeStamp = value;
            }
        }

        /// <summary>
        /// Duration
        /// Data Type The duration data type is used to specify a time interval. The time interval
        /// is specified in the following form: "PnYnMnDTnHnMnS" where: P indicates the period
        /// (required) nY indicates the number of years nM indicates the number of months nD
        /// indicates the number of days T indicates the start of a time section (required if you
        /// are going to specify hours, minutes, or seconds) nH indicates the number of hours nM
        /// indicates the number of minutes nS indicates the number of seconds An element in your
        /// document might look like this: P5Y The example above indicates a period of five years.
        /// Or it might look like this: P5Y2M10D. The example above indicates a period of five
        /// years, two months, and 10 days. Or it might look like this: P5Y2M10DT15H. The example
        /// above indicates a period of five years, two months, 10 days, and 15 hours. Or it might
        /// look like this: PT15H.
        /// </summary>
        [XmlElement("duration", typeof(duration_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual duration_Stype duration
        {
            get
            {
                if ((_duration == null))
                {
                    _duration = new duration_Stype();
                }
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }

        [XmlElement("gDay", typeof(gDay_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual gDay_Stype gDay
        {
            get
            {
                if ((_gDay == null))
                {
                    _gDay = new gDay_Stype();
                }
                return _gDay;
            }
            set
            {
                _gDay = value;
            }
        }

        [XmlElement("gMonth", typeof(gMonth_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual gMonth_Stype gMonth
        {
            get
            {
                if ((_gMonth == null))
                {
                    _gMonth = new gMonth_Stype();
                }
                return _gMonth;
            }
            set
            {
                _gMonth = value;
            }
        }

        [XmlElement("gMonthDay", typeof(gMonthDay_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual gMonthDay_Stype gMonthDay
        {
            get
            {
                if ((_gMonthDay == null))
                {
                    _gMonthDay = new gMonthDay_Stype();
                }
                return _gMonthDay;
            }
            set
            {
                _gMonthDay = value;
            }
        }

        [XmlElement("gYear", typeof(gYear_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual gYear_Stype gYear
        {
            get
            {
                if ((_gYear == null))
                {
                    _gYear = new gYear_Stype();
                }
                return _gYear;
            }
            set
            {
                _gYear = value;
            }
        }

        [XmlElement("gYearMonth", typeof(gMonth_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual gMonth_Stype gYearMonth
        {
            get
            {
                if ((_gYearMonth == null))
                {
                    _gYearMonth = new gMonth_Stype();
                }
                return _gYearMonth;
            }
            set
            {
                _gYearMonth = value;
            }
        }

        /// <summary>
        /// **possibly "HH:MM:SS:ms am/pm 12/24"
        /// </summary>
        [XmlElement("time", typeof(time_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual time_Stype time
        {
            get
            {
                if ((_time == null))
                {
                    _time = new time_Stype();
                }
                return _time;
            }
            set
            {
                _time = value;
            }
        }

        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_Stype), IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual yearMonthDuration_Stype yearMonthDuration
        {
            get
            {
                if ((_yearMonthDuration == null))
                {
                    _yearMonthDuration = new yearMonthDuration_Stype();
                }
                return _yearMonthDuration;
            }
            set
            {
                _yearMonthDuration = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool List000Specified
        {
            get
            {
                return _list000Specified;
            }
            set
            {
                _list000Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dateSpecified
        {
            get
            {
                return _dateSpecified;
            }
            set
            {
                _dateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dateTimeSpecified
        {
            get
            {
                return _dateTimeSpecified;
            }
            set
            {
                _dateTimeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dateTimeStampSpecified
        {
            get
            {
                return _dateTimeStampSpecified;
            }
            set
            {
                _dateTimeStampSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool durationSpecified
        {
            get
            {
                return _durationSpecified;
            }
            set
            {
                _durationSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool gDaySpecified
        {
            get
            {
                return _gDaySpecified;
            }
            set
            {
                _gDaySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool gMonthSpecified
        {
            get
            {
                return _gMonthSpecified;
            }
            set
            {
                _gMonthSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool gMonthDaySpecified
        {
            get
            {
                return _gMonthDaySpecified;
            }
            set
            {
                _gMonthDaySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool gYearSpecified
        {
            get
            {
                return _gYearSpecified;
            }
            set
            {
                _gYearSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool gYearMonthSpecified
        {
            get
            {
                return _gYearMonthSpecified;
            }
            set
            {
                _gYearMonthSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool timeSpecified
        {
            get
            {
                return _timeSpecified;
            }
            set
            {
                _timeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool yearMonthDurationSpecified
        {
            get
            {
                return _yearMonthDurationSpecified;
            }
            set
            {
                _yearMonthDurationSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemChoiceType3
    {
        List000,
        date,
        dateTime,
        dateTimeStamp,
        duration,
        gDay,
        gMonth,
        gMonthDay,
        gYear,
        gYearMonth,
        time,
        yearMonthDuration,
    }

    /// <summary>
    /// NEW: SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses
    /// baseAttributes and Extension capability to enhance the list of Data Types. Includes additonal metadata
    /// to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm
    /// responses in XML instance documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypesDateTime_DEType")]
    public partial class DataTypesDateTime_DEType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("dateTime", typeof(dateTimeStamp_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("duration", typeof(duration_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gMonthDay", typeof(gMonthDay_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gYear", typeof(gYear_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gYearMonth", typeof(gMonth_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("time", typeof(time_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_DEtype), IsNullable = true, Order = 0)]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    /// <summary>
    /// NEW: SDC datatypes in Simple (S) format, based mostly on W3C specifications. Uses
    /// baseAttributes and Extension capability to enhance the list of Data Types. **CHECK for ERRORS and
    /// completeness**
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypesNumeric_SType")]
    public partial class DataTypesNumeric_SType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("byte", typeof(byte_Stype), IsNullable = true, Order = 0)]
        [XmlElement("decimal", typeof(decimal_Stype), IsNullable = true, Order = 0)]
        [XmlElement("double", typeof(double_Stype), IsNullable = true, Order = 0)]
        [XmlElement("float", typeof(float_Stype), IsNullable = true, Order = 0)]
        [XmlElement("int", typeof(int_Stype), IsNullable = true, Order = 0)]
        [XmlElement("integer", typeof(integer_Stype), IsNullable = true, Order = 0)]
        [XmlElement("long", typeof(long_Stype), IsNullable = true, Order = 0)]
        [XmlElement("negativeInteger", typeof(negativeInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("nonNegativeInteger", typeof(nonNegativeInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("nonPositiveInteger", typeof(nonPositiveInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("positiveInteger", typeof(positiveInteger_Stype), IsNullable = true, Order = 0)]
        [XmlElement("short", typeof(short_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedByte", typeof(unsignedByte_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedInt", typeof(unsignedInt_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedLong", typeof(unsignedLong_Stype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedShort", typeof(unsignedShort_Stype), IsNullable = true, Order = 0)]
        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_Stype), IsNullable = true, Order = 0)]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    /// <summary>
    /// NEW: SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses
    /// baseAttributes and Extension capability to enhance the list of Data Types. Includes additonal metadata
    /// to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm
    /// responses in XML instance documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypesNumeric_DEType")]
    public partial class DataTypesNumeric_DEType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("byte", typeof(byte_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("decimal", typeof(decimal_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("double", typeof(double_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("float", typeof(float_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("hexBinary", typeof(hexBinary_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("int", typeof(int_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("integer", typeof(integer_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("long", typeof(long_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("negativeInteger", typeof(negativeInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("nonNegativeInteger", typeof(nonNegativeInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("nonPositiveInteger", typeof(nonPositiveInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("positiveInteger", typeof(positiveInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("short", typeof(short_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("time", typeof(time_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedByte", typeof(unsignedByte_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedInt", typeof(unsignedInt_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedLong", typeof(unsignedLong_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedShort", typeof(unsignedShort_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_DEtype), IsNullable = true, Order = 0)]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    /// <summary>
    /// A structure to describe a single change in an XML document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ChangeType")]
    public partial class ChangeType : ExtensionBaseType
    {
        #region Private fields
        private TargetItemIDType _targetItemID;
        private TargetItemNameType _targetItemName;
        private TargetItemXPathType _targetItemXPath;
        private DataTypes_SType _newValue;
        private bool _targetItemIDSpecified;
        private bool _targetItemNameSpecified;
        private bool _targetItemXPathSpecified;
        private bool _newValueSpecified;
        #endregion

        /// <summary>
        /// Unique ID of the target item.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual TargetItemIDType TargetItemID
        {
            get
            {
                if ((_targetItemID == null))
                {
                    _targetItemID = new TargetItemIDType();
                }
                return _targetItemID;
            }
            set
            {
                _targetItemID = value;
            }
        }

        /// <summary>
        /// @name attribute of target item. (xs:NCName is the base type of
        /// xs:ID)
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual TargetItemNameType TargetItemName
        {
            get
            {
                if ((_targetItemName == null))
                {
                    _targetItemName = new TargetItemNameType();
                }
                return _targetItemName;
            }
            set
            {
                _targetItemName = value;
            }
        }

        /// <summary>
        /// XPath to target item
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual TargetItemXPathType TargetItemXPath
        {
            get
            {
                if ((_targetItemXPath == null))
                {
                    _targetItemXPath = new TargetItemXPathType();
                }
                return _targetItemXPath;
            }
            set
            {
                _targetItemXPath = value;
            }
        }

        /// <summary>
        /// The new value that the targeted item's content is set
        /// to.
        /// </summary>
        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_SType NewValue
        {
            get
            {
                if ((_newValue == null))
                {
                    _newValue = new DataTypes_SType();
                }
                return _newValue;
            }
            set
            {
                _newValue = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TargetItemIDSpecified
        {
            get
            {
                return _targetItemIDSpecified;
            }
            set
            {
                _targetItemIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TargetItemNameSpecified
        {
            get
            {
                return _targetItemNameSpecified;
            }
            set
            {
                _targetItemNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TargetItemXPathSpecified
        {
            get
            {
                return _targetItemXPathSpecified;
            }
            set
            {
                _targetItemXPathSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool NewValueSpecified
        {
            get
            {
                return _newValueSpecified;
            }
            set
            {
                _newValueSpecified = value;
            }
        }
    }

    /// <summary>
    /// General information about how information in a particular form package must be handled.
    /// This may include, e.g., security, completeness, transmission, and validation
    /// criteria.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ComplianceRuleType")]
    public partial class ComplianceRuleType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _description;
        private List<OrganizationType> _complianceOrganization;
        private string _ruleID;
        private string _formID;
        private bool _descriptionSpecified;
        private bool _complianceOrganizationSpecified;
        private bool _ruleIDSpecified;
        private bool _formIDSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Description
        {
            get
            {
                if ((_description == null))
                {
                    _description = new string_Stype();
                }
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlElement("ComplianceOrganization", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<OrganizationType> ComplianceOrganization
        {
            get
            {
                return _complianceOrganization;
            }
            set
            {
                _complianceOrganization = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string ruleID
        {
            get
            {
                return _ruleID;
            }
            set
            {
                _ruleID = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string formID
        {
            get
            {
                return _formID;
            }
            set
            {
                _formID = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ComplianceOrganizationSpecified
        {
            get
            {
                return _complianceOrganizationSpecified;
            }
            set
            {
                _complianceOrganizationSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ruleIDSpecified
        {
            get
            {
                return _ruleIDSpecified;
            }
            set
            {
                _ruleIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool formIDSpecified
        {
            get
            {
                return _formIDSpecified;
            }
            set
            {
                _formIDSpecified = value;
            }
        }
    }

    /// <summary>
    /// A model structure for an Organization object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("OrganizationType")]
    public partial class OrganizationType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _orgName;
        private string_Stype _department;
        private List<AddressType> _streetAddress;
        private List<EmailType> _email;
        private List<PhoneType> _phone;
        private List<anyURI_Stype> _webURL;
        private List<string_Stype> _role;
        private List<PersonType> _contactPerson;
        private List<IdentifierType> _identifier;
        private string_Stype _usage;
        private bool _orgNameSpecified;
        private bool _departmentSpecified;
        private bool _streetAddressSpecified;
        private bool _emailSpecified;
        private bool _phoneSpecified;
        private bool _webURLSpecified;
        private bool _roleSpecified;
        private bool _contactPersonSpecified;
        private bool _identifierSpecified;
        private bool _usageSpecified;
        #endregion

        [XmlElement(IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype OrgName
        {
            get
            {
                if ((_orgName == null))
                {
                    _orgName = new string_Stype();
                }
                return _orgName;
            }
            set
            {
                _orgName = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Department
        {
            get
            {
                return _department;
            }
            set
            {
                _department = value;
            }
        }

        [XmlElement("StreetAddress", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<AddressType> StreetAddress
        {
            get
            {
                return _streetAddress;
            }
            set
            {
                _streetAddress = value;
            }
        }

        [XmlElement("Email", Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EmailType> Email
        {
            get
            {
                return _email;
            }
            set
            {
                _email = value;
            }
        }

        [XmlElement("Phone", Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PhoneType> Phone
        {
            get
            {
                return _phone;
            }
            set
            {
                _phone = value;
            }
        }

        [XmlElement("WebURL", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<anyURI_Stype> WebURL
        {
            get
            {
                return _webURL;
            }
            set
            {
                _webURL = value;
            }
        }

        /// <summary>
        /// Role of the organization, e.g., creator, copyright holder, accreditor,
        /// certifier, curator, etc.
        /// </summary>
        [XmlElement("Role", Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> Role
        {
            get
            {
                return _role;
            }
            set
            {
                _role = value;
            }
        }

        [XmlElement("ContactPerson", Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PersonType> ContactPerson
        {
            get
            {
                return _contactPerson;
            }
            set
            {
                _contactPerson = value;
            }
        }

        [XmlElement("Identifier", Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<IdentifierType> Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                _identifier = value;
            }
        }

        /// <summary>
        /// When this organization should be contacted.
        /// </summary>
        [XmlElement(Order = 9)]
        [JsonProperty(Order = 9, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OrgNameSpecified
        {
            get
            {
                return _orgNameSpecified;
            }
            set
            {
                _orgNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DepartmentSpecified
        {
            get
            {
                return _departmentSpecified;
            }
            set
            {
                _departmentSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool StreetAddressSpecified
        {
            get
            {
                return _streetAddressSpecified;
            }
            set
            {
                _streetAddressSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EmailSpecified
        {
            get
            {
                return _emailSpecified;
            }
            set
            {
                _emailSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PhoneSpecified
        {
            get
            {
                return _phoneSpecified;
            }
            set
            {
                _phoneSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool WebURLSpecified
        {
            get
            {
                return _webURLSpecified;
            }
            set
            {
                _webURLSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RoleSpecified
        {
            get
            {
                return _roleSpecified;
            }
            set
            {
                _roleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ContactPersonSpecified
        {
            get
            {
                return _contactPersonSpecified;
            }
            set
            {
                _contactPersonSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IdentifierSpecified
        {
            get
            {
                return _identifierSpecified;
            }
            set
            {
                _identifierSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }
    }

    /// <summary>
    /// A structure for recording street/mailing addresses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("AddressType")]
    public partial class AddressType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _addressType1;
        private List<string_Stype> _internalAddress;
        private List<string_Stype> _addressLine;
        private string_Stype _city;
        private string_Stype _jurisdiction;
        private string_Stype _state;
        private string_Stype _postalCode;
        private string_Stype _country;
        private string_Stype _usage;
        private bool _addressType1Specified;
        private bool _internalAddressSpecified;
        private bool _addressLineSpecified;
        private bool _citySpecified;
        private bool _jurisdictionSpecified;
        private bool _stateSpecified;
        private bool _postalCodeSpecified;
        private bool _countrySpecified;
        private bool _usageSpecified;
        #endregion

        [XmlElement("AddressType", Order = 0)]
        [JsonProperty("AddressType", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype AddressType1
        {
            get
            {
                if ((_addressType1 == null))
                {
                    _addressType1 = new string_Stype();
                }
                return _addressType1;
            }
            set
            {
                _addressType1 = value;
            }
        }

        /// <summary>
        /// Address instructions for directing mail within an organizations buildings
        /// or corporate infrastructure.
        /// </summary>
        [XmlElement("InternalAddress", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> InternalAddress
        {
            get
            {
                return _internalAddress;
            }
            set
            {
                _internalAddress = value;
            }
        }

        /// <summary>
        /// Address instructions for directing mail to a street
        /// address.
        /// </summary>
        [XmlElement("AddressLine", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> AddressLine
        {
            get
            {
                return _addressLine;
            }
            set
            {
                _addressLine = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype City
        {
            get
            {
                return _city;
            }
            set
            {
                _city = value;
            }
        }

        /// <summary>
        /// Other optional locale identifier.
        /// </summary>
        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Jurisdiction
        {
            get
            {
                return _jurisdiction;
            }
            set
            {
                _jurisdiction = value;
            }
        }

        /// <summary>
        /// State, Province, etc.
        /// </summary>
        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype State
        {
            get
            {
                return _state;
            }
            set
            {
                _state = value;
            }
        }

        /// <summary>
        /// Local postal code, e.g., zip code.
        /// </summary>
        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype PostalCode
        {
            get
            {
                return _postalCode;
            }
            set
            {
                _postalCode = value;
            }
        }

        /// <summary>
        /// **Need list of official country codes or text?
        /// </summary>
        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Country
        {
            get
            {
                return _country;
            }
            set
            {
                _country = value;
            }
        }

        /// <summary>
        /// When this address should be used
        /// </summary>
        [XmlElement(Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AddressType1Specified
        {
            get
            {
                return _addressType1Specified;
            }
            set
            {
                _addressType1Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool InternalAddressSpecified
        {
            get
            {
                return _internalAddressSpecified;
            }
            set
            {
                _internalAddressSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AddressLineSpecified
        {
            get
            {
                return _addressLineSpecified;
            }
            set
            {
                _addressLineSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CitySpecified
        {
            get
            {
                return _citySpecified;
            }
            set
            {
                _citySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool JurisdictionSpecified
        {
            get
            {
                return _jurisdictionSpecified;
            }
            set
            {
                _jurisdictionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool StateSpecified
        {
            get
            {
                return _stateSpecified;
            }
            set
            {
                _stateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PostalCodeSpecified
        {
            get
            {
                return _postalCodeSpecified;
            }
            set
            {
                _postalCodeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CountrySpecified
        {
            get
            {
                return _countrySpecified;
            }
            set
            {
                _countrySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }
    }

    /// <summary>
    /// A structure for recording email addresses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("EmailType")]
    public partial class EmailType : ExtensionBaseType
    {
        #region Private fields
        private EmailAddressType _emailAddress;
        private string_Stype _emailClass;
        private string_Stype _usage;
        private bool _emailAddressSpecified;
        private bool _emailClassSpecified;
        private bool _usageSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual EmailAddressType EmailAddress
        {
            get
            {
                if ((_emailAddress == null))
                {
                    _emailAddress = new EmailAddressType();
                }
                return _emailAddress;
            }
            set
            {
                _emailAddress = value;
            }
        }

        /// <summary>
        /// Type of email, e.g., home, office, etc
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype EmailClass
        {
            get
            {
                return _emailClass;
            }
            set
            {
                _emailClass = value;
            }
        }

        /// <summary>
        /// When this email should be used
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EmailAddressSpecified
        {
            get
            {
                return _emailAddressSpecified;
            }
            set
            {
                _emailAddressSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EmailClassSpecified
        {
            get
            {
                return _emailClassSpecified;
            }
            set
            {
                _emailClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }
    }

    /// <summary>
    /// ***Changed from BaseType to ExtensionBaseType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("EmailAddressType")]
    public partial class EmailAddressType : ExtensionBaseType
    {
        #region Private fields
        private string _val;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// A structure for recording telephone numbers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PhoneType")]
    public partial class PhoneType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _phoneType1;
        private CountryCodeType _countryCode;
        private AreaCodeType _areaCode;
        private PhoneNumberType _phoneNumber;
        private string_Stype _phoneExtension;
        private string_Stype _usage;
        private bool _phoneType1Specified;
        private bool _countryCodeSpecified;
        private bool _areaCodeSpecified;
        private bool _phoneNumberSpecified;
        private bool _phoneExtensionSpecified;
        private bool _usageSpecified;
        #endregion

        [XmlElement("PhoneType", Order = 0)]
        [JsonProperty("PhoneType", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype PhoneType1
        {
            get
            {
                if ((_phoneType1 == null))
                {
                    _phoneType1 = new string_Stype();
                }
                return _phoneType1;
            }
            set
            {
                _phoneType1 = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CountryCodeType CountryCode
        {
            get
            {
                return _countryCode;
            }
            set
            {
                _countryCode = value;
            }
        }

        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual AreaCodeType AreaCode
        {
            get
            {
                return _areaCode;
            }
            set
            {
                _areaCode = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PhoneNumberType PhoneNumber
        {
            get
            {
                if ((_phoneNumber == null))
                {
                    _phoneNumber = new PhoneNumberType();
                }
                return _phoneNumber;
            }
            set
            {
                _phoneNumber = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype PhoneExtension
        {
            get
            {
                return _phoneExtension;
            }
            set
            {
                _phoneExtension = value;
            }
        }

        /// <summary>
        /// When this phone number should be used
        /// </summary>
        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PhoneType1Specified
        {
            get
            {
                return _phoneType1Specified;
            }
            set
            {
                _phoneType1Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CountryCodeSpecified
        {
            get
            {
                return _countryCodeSpecified;
            }
            set
            {
                _countryCodeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AreaCodeSpecified
        {
            get
            {
                return _areaCodeSpecified;
            }
            set
            {
                _areaCodeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PhoneNumberSpecified
        {
            get
            {
                return _phoneNumberSpecified;
            }
            set
            {
                _phoneNumberSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PhoneExtensionSpecified
        {
            get
            {
                return _phoneExtensionSpecified;
            }
            set
            {
                _phoneExtensionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }
    }

    /// <summary>
    /// ***Changed from BaseType to ExtensionBaseType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PhoneNumberType")]
    public partial class PhoneNumberType : ExtensionBaseType
    {
        #region Private fields
        private string _val;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// A model structure for a Person object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PersonType")]
    public partial class PersonType : ExtensionBaseType
    {
        #region Private fields
        private NameType _personName;
        private List<NameType> _aliasName;
        private List<JobType> _job;
        private List<AddressType> _streetAddress;
        private List<EmailType> _email;
        private List<PhoneType> _phone;
        private List<anyURI_Stype> _webURL;
        private string_Stype _role;
        private List<IdentifierType> _identifier;
        private string_Stype _usage;
        private bool _personNameSpecified;
        private bool _aliasNameSpecified;
        private bool _jobSpecified;
        private bool _streetAddressSpecified;
        private bool _emailSpecified;
        private bool _phoneSpecified;
        private bool _webURLSpecified;
        private bool _roleSpecified;
        private bool _identifierSpecified;
        private bool _usageSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual NameType PersonName
        {
            get
            {
                if ((_personName == null))
                {
                    _personName = new NameType();
                }
                return _personName;
            }
            set
            {
                _personName = value;
            }
        }

        [XmlElement("AliasName", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<NameType> AliasName
        {
            get
            {
                return _aliasName;
            }
            set
            {
                _aliasName = value;
            }
        }

        [XmlElement("Job", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<JobType> Job
        {
            get
            {
                return _job;
            }
            set
            {
                _job = value;
            }
        }

        [XmlElement("StreetAddress", Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<AddressType> StreetAddress
        {
            get
            {
                return _streetAddress;
            }
            set
            {
                _streetAddress = value;
            }
        }

        [XmlElement("Email", Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EmailType> Email
        {
            get
            {
                return _email;
            }
            set
            {
                _email = value;
            }
        }

        [XmlElement("Phone", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PhoneType> Phone
        {
            get
            {
                return _phone;
            }
            set
            {
                _phone = value;
            }
        }

        [XmlElement("WebURL", Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<anyURI_Stype> WebURL
        {
            get
            {
                return _webURL;
            }
            set
            {
                _webURL = value;
            }
        }

        /// <summary>
        /// Role of the person, e.g., creator, copyright holder, accreditor,
        /// certifier, curator, etc.
        /// </summary>
        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Role
        {
            get
            {
                return _role;
            }
            set
            {
                _role = value;
            }
        }

        [XmlElement("Identifier", Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<IdentifierType> Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                _identifier = value;
            }
        }

        /// <summary>
        /// When this person should be contacted.
        /// </summary>
        [XmlElement(Order = 9)]
        [JsonProperty(Order = 9, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PersonNameSpecified
        {
            get
            {
                return _personNameSpecified;
            }
            set
            {
                _personNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AliasNameSpecified
        {
            get
            {
                return _aliasNameSpecified;
            }
            set
            {
                _aliasNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool JobSpecified
        {
            get
            {
                return _jobSpecified;
            }
            set
            {
                _jobSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool StreetAddressSpecified
        {
            get
            {
                return _streetAddressSpecified;
            }
            set
            {
                _streetAddressSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EmailSpecified
        {
            get
            {
                return _emailSpecified;
            }
            set
            {
                _emailSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PhoneSpecified
        {
            get
            {
                return _phoneSpecified;
            }
            set
            {
                _phoneSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool WebURLSpecified
        {
            get
            {
                return _webURLSpecified;
            }
            set
            {
                _webURLSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RoleSpecified
        {
            get
            {
                return _roleSpecified;
            }
            set
            {
                _roleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IdentifierSpecified
        {
            get
            {
                return _identifierSpecified;
            }
            set
            {
                _identifierSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }
    }

    /// <summary>
    /// Structure to define a person's name, including prefixes, suffixes, and
    /// degrees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("NameType")]
    public partial class NameType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _namePrefix;
        private string_Stype _firstName;
        private string_Stype _middleName;
        private string_Stype _lastName;
        private string_Stype _nameSuffix;
        private List<string_Stype> _degreeCert;
        private string_Stype _title;
        private bool _namePrefixSpecified;
        private bool _firstNameSpecified;
        private bool _middleNameSpecified;
        private bool _lastNameSpecified;
        private bool _nameSuffixSpecified;
        private bool _degreeCertSpecified;
        private bool _titleSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype NamePrefix
        {
            get
            {
                return _namePrefix;
            }
            set
            {
                _namePrefix = value;
            }
        }

        [XmlElement(IsNullable = true, Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype FirstName
        {
            get
            {
                if ((_firstName == null))
                {
                    _firstName = new string_Stype();
                }
                return _firstName;
            }
            set
            {
                _firstName = value;
            }
        }

        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype MiddleName
        {
            get
            {
                return _middleName;
            }
            set
            {
                _middleName = value;
            }
        }

        [XmlElement(IsNullable = true, Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype LastName
        {
            get
            {
                if ((_lastName == null))
                {
                    _lastName = new string_Stype();
                }
                return _lastName;
            }
            set
            {
                _lastName = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype NameSuffix
        {
            get
            {
                return _nameSuffix;
            }
            set
            {
                _nameSuffix = value;
            }
        }

        /// <summary>
        /// Acronyms for degrees and certifications, e.g., MD, PhD, FACP (repeat
        /// element for each acronym)
        /// </summary>
        [XmlElement("DegreeCert", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> DegreeCert
        {
            get
            {
                return _degreeCert;
            }
            set
            {
                _degreeCert = value;
            }
        }

        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool NamePrefixSpecified
        {
            get
            {
                return _namePrefixSpecified;
            }
            set
            {
                _namePrefixSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FirstNameSpecified
        {
            get
            {
                return _firstNameSpecified;
            }
            set
            {
                _firstNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MiddleNameSpecified
        {
            get
            {
                return _middleNameSpecified;
            }
            set
            {
                _middleNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LastNameSpecified
        {
            get
            {
                return _lastNameSpecified;
            }
            set
            {
                _lastNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool NameSuffixSpecified
        {
            get
            {
                return _nameSuffixSpecified;
            }
            set
            {
                _nameSuffixSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DegreeCertSpecified
        {
            get
            {
                return _degreeCertSpecified;
            }
            set
            {
                _degreeCertSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TitleSpecified
        {
            get
            {
                return _titleSpecified;
            }
            set
            {
                _titleSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("JobType")]
    public partial class JobType : ExtensionBaseType
    {
        #region Private fields
        private List<string_Stype> _jobTitle;
        private OrganizationType _organization;
        private date_Stype _startDate;
        private date_Stype _stopDate;
        private string_Stype _description;
        private bool _jobTitleSpecified;
        private bool _organizationSpecified;
        private bool _startDateSpecified;
        private bool _stopDateSpecified;
        private bool _descriptionSpecified;
        #endregion

        [XmlElement("JobTitle", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> JobTitle
        {
            get
            {
                return _jobTitle;
            }
            set
            {
                _jobTitle = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual OrganizationType Organization
        {
            get
            {
                return _organization;
            }
            set
            {
                _organization = value;
            }
        }

        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual date_Stype StartDate
        {
            get
            {
                return _startDate;
            }
            set
            {
                _startDate = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual date_Stype StopDate
        {
            get
            {
                return _stopDate;
            }
            set
            {
                _stopDate = value;
            }
        }

        /// <summary>
        /// Job Description
        /// </summary>
        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool JobTitleSpecified
        {
            get
            {
                return _jobTitleSpecified;
            }
            set
            {
                _jobTitleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OrganizationSpecified
        {
            get
            {
                return _organizationSpecified;
            }
            set
            {
                _organizationSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool StartDateSpecified
        {
            get
            {
                return _startDateSpecified;
            }
            set
            {
                _startDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool StopDateSpecified
        {
            get
            {
                return _stopDateSpecified;
            }
            set
            {
                _stopDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }
    }

    /// <summary>
    /// A code or id that identifies a person or organization or object according to a standard
    /// system such as CLIA or NPI. The system should be specified in the @system attribute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("IdentifierType")]
    public partial class IdentifierType : ExtensionBaseType
    {
        #region Private fields
        private string _system;
        private string _val;
        private bool _systemSpecified;
        private bool _valSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string system
        {
            get
            {
                return _system;
            }
            set
            {
                _system = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool systemSpecified
        {
            get
            {
                return _systemSpecified;
            }
            set
            {
                _systemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// ***Changed from BaseType to ExtensionBaseType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DestinationType")]
    public partial class DestinationType : ExtensionBaseType
    {
        #region Private fields
        private anyURI_Stype _endpoint;
        private string_Stype _endpointDescription;
        private List<string_Stype> _submissionTechnology;
        private OrganizationType _organization;
        private bool _endpointSpecified;
        private bool _endpointDescriptionSpecified;
        private bool _submissionTechnologySpecified;
        private bool _organizationSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual anyURI_Stype Endpoint
        {
            get
            {
                if ((_endpoint == null))
                {
                    _endpoint = new anyURI_Stype();
                }
                return _endpoint;
            }
            set
            {
                _endpoint = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype EndpointDescription
        {
            get
            {
                if ((_endpointDescription == null))
                {
                    _endpointDescription = new string_Stype();
                }
                return _endpointDescription;
            }
            set
            {
                _endpointDescription = value;
            }
        }

        [XmlElement("SubmissionTechnology", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> SubmissionTechnology
        {
            get
            {
                return _submissionTechnology;
            }
            set
            {
                _submissionTechnology = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual OrganizationType Organization
        {
            get
            {
                return _organization;
            }
            set
            {
                _organization = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EndpointSpecified
        {
            get
            {
                return _endpointSpecified;
            }
            set
            {
                _endpointSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EndpointDescriptionSpecified
        {
            get
            {
                return _endpointDescriptionSpecified;
            }
            set
            {
                _endpointDescriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool SubmissionTechnologySpecified
        {
            get
            {
                return _submissionTechnologySpecified;
            }
            set
            {
                _submissionTechnologySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OrganizationSpecified
        {
            get
            {
                return _organizationSpecified;
            }
            set
            {
                _organizationSpecified = value;
            }
        }
    }

    /// <summary>
    /// information about where to submit a completed form
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("SubmissionRuleType")]
    public partial class SubmissionRuleType : ExtensionBaseType
    {
        #region Private fields
        private List<DestinationType> _destination;
        private string_Stype _ruleDescription;
        private string _formID;
        private string _ruleID;
        private bool _destinationSpecified;
        private bool _ruleDescriptionSpecified;
        private bool _formIDSpecified;
        private bool _ruleIDSpecified;
        #endregion

        [XmlElement("Destination", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<DestinationType> Destination
        {
            get
            {
                if ((_destination == null))
                {
                    _destination = new List<DestinationType>();
                }
                return _destination;
            }
            set
            {
                _destination = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype RuleDescription
        {
            get
            {
                return _ruleDescription;
            }
            set
            {
                _ruleDescription = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string formID
        {
            get
            {
                return _formID;
            }
            set
            {
                _formID = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string ruleID
        {
            get
            {
                return _ruleID;
            }
            set
            {
                _ruleID = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DestinationSpecified
        {
            get
            {
                return _destinationSpecified;
            }
            set
            {
                _destinationSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RuleDescriptionSpecified
        {
            get
            {
                return _ruleDescriptionSpecified;
            }
            set
            {
                _ruleDescriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool formIDSpecified
        {
            get
            {
                return _formIDSpecified;
            }
            set
            {
                _formIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ruleIDSpecified
        {
            get
            {
                return _ruleIDSpecified;
            }
            set
            {
                _ruleIDSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ProvenanceType")]
    public partial class ProvenanceType : ExtensionBaseType
    {
        #region Private fields
        private List<FileType> _replacedFile;
        private bool _replacedFileSpecified;
        #endregion

        [XmlElement("ReplacedFile", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<FileType> ReplacedFile
        {
            get
            {
                if ((_replacedFile == null))
                {
                    _replacedFile = new List<FileType>();
                }
                return _replacedFile;
            }
            set
            {
                _replacedFile = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ReplacedFileSpecified
        {
            get
            {
                return _replacedFileSpecified;
            }
            set
            {
                _replacedFileSpecified = value;
            }
        }
    }

    /// <summary>
    /// Information about a file, usually thought of as a binary byte stream stored on disk. A
    /// FileType can also represent a "virtual" file, such as an XML module in a larger XML document. Such a
    /// virtual file could theoretically be stored as a byte stream, as an independant file on disk or as a
    /// database record or set of records, even if this byte stream is never actually persisted as an
    /// independant disk file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("FileType")]
    public partial class FileType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _fileID;
        private anyURI_Stype _fileURI;
        private string_Stype _displayName;
        private string_Stype _title;
        private VersionType _version;
        private string_Stype _fileName;
        private string_Stype _fileExtension;
        private string_Stype _fileClass;
        private positiveInteger_Stype _fileSizeKB;
        private List<string_Stype> _description;
        private string_Stype _copyright;
        private string_Stype _termsofUse;
        private FileUsageType _usage;
        private FileDatesType _dates;
        private ContactsType _contacts;
        private List<ApprovalType> _approval;
        private FileHashType _fileHash;
        private List<LanguageType> _language;
        private AssociatedFilesType _associatedFiles;
        private ProvenanceType _provenance;
        private List<SubmissionRuleType> _defaultSubmissionRule;
        private List<ComplianceRuleType> _defaultComplianceRule;
        private bool _fileIDSpecified;
        private bool _fileURISpecified;
        private bool _displayNameSpecified;
        private bool _titleSpecified;
        private bool _versionSpecified;
        private bool _fileNameSpecified;
        private bool _fileExtensionSpecified;
        private bool _fileClassSpecified;
        private bool _fileSizeKBSpecified;
        private bool _descriptionSpecified;
        private bool _copyrightSpecified;
        private bool _termsofUseSpecified;
        private bool _usageSpecified;
        private bool _datesSpecified;
        private bool _contactsSpecified;
        private bool _approvalSpecified;
        private bool _fileHashSpecified;
        private bool _languageSpecified;
        private bool _associatedFilesSpecified;
        private bool _provenanceSpecified;
        private bool _defaultSubmissionRuleSpecified;
        private bool _defaultComplianceRuleSpecified;
        #endregion

        /// <summary>
        /// Internal/local File ID, not necessarily in the format of the FileURI used
        /// for all SDC FormDesign items.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype FileID
        {
            get
            {
                return _fileID;
            }
            set
            {
                _fileID = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual anyURI_Stype FileURI
        {
            get
            {
                if ((_fileURI == null))
                {
                    _fileURI = new anyURI_Stype();
                }
                return _fileURI;
            }
            set
            {
                _fileURI = value;
            }
        }

        /// <summary>
        /// Text to be displayed that encapulates the file contents. This may be the
        /// same as the internal Title of the file.
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype DisplayName
        {
            get
            {
                if ((_displayName == null))
                {
                    _displayName = new string_Stype();
                }
                return _displayName;
            }
            set
            {
                _displayName = value;
            }
        }

        /// <summary>
        /// Official title of the file.
        /// </summary>
        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }

        /// <summary>
        /// File version
        /// </summary>
        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual VersionType Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        /// <summary>
        /// The name of the file as saved on disk or other persistant
        /// storage.
        /// </summary>
        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype FileName
        {
            get
            {
                return _fileName;
            }
            set
            {
                _fileName = value;
            }
        }

        /// <summary>
        /// The file type extension that describes the file's internal format. This is
        /// usually the 3-4 character text that appears after the last period in the file name,
        /// e.g., txt, docx, etc.
        /// </summary>
        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype FileExtension
        {
            get
            {
                return _fileExtension;
            }
            set
            {
                _fileExtension = value;
            }
        }

        /// <summary>
        /// A short description of the class of file, such as "FormDesign
        /// XML"
        /// </summary>
        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype FileClass
        {
            get
            {
                return _fileClass;
            }
            set
            {
                _fileClass = value;
            }
        }

        [XmlElement(Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual positiveInteger_Stype FileSizeKB
        {
            get
            {
                return _fileSizeKB;
            }
            set
            {
                _fileSizeKB = value;
            }
        }

        /// <summary>
        /// Any additional information about the template or file. The type of
        /// information should be specified in the @type attribute.
        /// </summary>
        [XmlElement("Description", Order = 9)]
        [JsonProperty(Order = 9, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlElement(Order = 10)]
        [JsonProperty(Order = 10, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Copyright
        {
            get
            {
                return _copyright;
            }
            set
            {
                _copyright = value;
            }
        }

        [XmlElement(Order = 11)]
        [JsonProperty(Order = 11, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype TermsofUse
        {
            get
            {
                return _termsofUse;
            }
            set
            {
                _termsofUse = value;
            }
        }

        /// <summary>
        /// Guidance for when this file should be used, and when it should not be
        /// used.
        /// </summary>
        [XmlElement(Order = 12)]
        [JsonProperty(Order = 12, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual FileUsageType Usage
        {
            get
            {
                return _usage;
            }
            set
            {
                _usage = value;
            }
        }

        /// <summary>
        /// Various dates associated with the file release, versioning and
        /// usage.
        /// </summary>
        [XmlElement(Order = 13)]
        [JsonProperty(Order = 13, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual FileDatesType Dates
        {
            get
            {
                return _dates;
            }
            set
            {
                _dates = value;
            }
        }

        /// <summary>
        /// People and Organizations associated with the file. Specify the type of
        /// Contact in the @type attribute. Examples of @type include Curator, Author, and
        /// Authority.
        /// </summary>
        [XmlElement(Order = 14)]
        [JsonProperty(Order = 14, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ContactsType Contacts
        {
            get
            {
                return _contacts;
            }
            set
            {
                _contacts = value;
            }
        }

        /// <summary>
        /// Documentation of review and acceptance of the file for production
        /// usage.
        /// </summary>
        [XmlElement("Approval", Order = 15)]
        [JsonProperty(Order = 15, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ApprovalType> Approval
        {
            get
            {
                return _approval;
            }
            set
            {
                _approval = value;
            }
        }

        [XmlElement(Order = 16)]
        [JsonProperty(Order = 16, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual FileHashType FileHash
        {
            get
            {
                return _fileHash;
            }
            set
            {
                _fileHash = value;
            }
        }

        [XmlElement("Language", Order = 17)]
        [JsonProperty(Order = 17, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<LanguageType> Language
        {
            get
            {
                return _language;
            }
            set
            {
                _language = value;
            }
        }

        /// <summary>
        /// Link to any associated files, such as schemas, reference documents,
        /// manuals, etc.
        /// </summary>
        [XmlElement(Order = 18)]
        [JsonProperty(Order = 18, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual AssociatedFilesType AssociatedFiles
        {
            get
            {
                return _associatedFiles;
            }
            set
            {
                _associatedFiles = value;
            }
        }

        [XmlElement(Order = 19)]
        [JsonProperty(Order = 19, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ProvenanceType Provenance
        {
            get
            {
                return _provenance;
            }
            set
            {
                _provenance = value;
            }
        }

        [XmlElement("DefaultSubmissionRule", Order = 20)]
        [JsonProperty(Order = 20, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<SubmissionRuleType> DefaultSubmissionRule
        {
            get
            {
                return _defaultSubmissionRule;
            }
            set
            {
                _defaultSubmissionRule = value;
            }
        }

        [XmlElement("DefaultComplianceRule", Order = 21)]
        [JsonProperty(Order = 21, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ComplianceRuleType> DefaultComplianceRule
        {
            get
            {
                return _defaultComplianceRule;
            }
            set
            {
                _defaultComplianceRule = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileIDSpecified
        {
            get
            {
                return _fileIDSpecified;
            }
            set
            {
                _fileIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileURISpecified
        {
            get
            {
                return _fileURISpecified;
            }
            set
            {
                _fileURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DisplayNameSpecified
        {
            get
            {
                return _displayNameSpecified;
            }
            set
            {
                _displayNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TitleSpecified
        {
            get
            {
                return _titleSpecified;
            }
            set
            {
                _titleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool VersionSpecified
        {
            get
            {
                return _versionSpecified;
            }
            set
            {
                _versionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileNameSpecified
        {
            get
            {
                return _fileNameSpecified;
            }
            set
            {
                _fileNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileExtensionSpecified
        {
            get
            {
                return _fileExtensionSpecified;
            }
            set
            {
                _fileExtensionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileClassSpecified
        {
            get
            {
                return _fileClassSpecified;
            }
            set
            {
                _fileClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileSizeKBSpecified
        {
            get
            {
                return _fileSizeKBSpecified;
            }
            set
            {
                _fileSizeKBSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CopyrightSpecified
        {
            get
            {
                return _copyrightSpecified;
            }
            set
            {
                _copyrightSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TermsofUseSpecified
        {
            get
            {
                return _termsofUseSpecified;
            }
            set
            {
                _termsofUseSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageSpecified
        {
            get
            {
                return _usageSpecified;
            }
            set
            {
                _usageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DatesSpecified
        {
            get
            {
                return _datesSpecified;
            }
            set
            {
                _datesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ContactsSpecified
        {
            get
            {
                return _contactsSpecified;
            }
            set
            {
                _contactsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ApprovalSpecified
        {
            get
            {
                return _approvalSpecified;
            }
            set
            {
                _approvalSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileHashSpecified
        {
            get
            {
                return _fileHashSpecified;
            }
            set
            {
                _fileHashSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LanguageSpecified
        {
            get
            {
                return _languageSpecified;
            }
            set
            {
                _languageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AssociatedFilesSpecified
        {
            get
            {
                return _associatedFilesSpecified;
            }
            set
            {
                _associatedFilesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ProvenanceSpecified
        {
            get
            {
                return _provenanceSpecified;
            }
            set
            {
                _provenanceSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DefaultSubmissionRuleSpecified
        {
            get
            {
                return _defaultSubmissionRuleSpecified;
            }
            set
            {
                _defaultSubmissionRuleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DefaultComplianceRuleSpecified
        {
            get
            {
                return _defaultComplianceRuleSpecified;
            }
            set
            {
                _defaultComplianceRuleSpecified = value;
            }
        }
    }

    /// <summary>
    /// A generic structure for recording file version metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("VersionType")]
    public partial class VersionType : ExtensionBaseType
    {
        #region Private fields
        private FileType _versioningReference;
        private RichTextType _versionComments;
        private VersionTypeChanges _changes;
        private string _fullVersion;
        private string _versionRegExPattern;
        private string _versionLevel1;
        private string _versionLevel2;
        private string _versionLevel3;
        private string _versionLevel4;
        private string _versionLevel5;
        private bool _versioningReferenceSpecified;
        private bool _versionCommentsSpecified;
        private bool _changesSpecified;
        private bool _fullVersionSpecified;
        private bool _versionRegExPatternSpecified;
        private bool _versionLevel1Specified;
        private bool _versionLevel2Specified;
        private bool _versionLevel3Specified;
        private bool _versionLevel4Specified;
        private bool _versionLevel5Specified;
        #endregion

        /// <summary>
        /// Information about the document that describes the versioning methodology
        /// nomenclature.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual FileType VersioningReference
        {
            get
            {
                return _versioningReference;
            }
            set
            {
                _versioningReference = value;
            }
        }

        /// <summary>
        /// Comments about the changes in this version
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType VersionComments
        {
            get
            {
                return _versionComments;
            }
            set
            {
                _versionComments = value;
            }
        }

        /// <summary>
        /// Itemized list of changes in the new version
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual VersionTypeChanges Changes
        {
            get
            {
                return _changes;
            }
            set
            {
                _changes = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string fullVersion
        {
            get
            {
                return _fullVersion;
            }
            set
            {
                _fullVersion = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionRegExPattern
        {
            get
            {
                return _versionRegExPattern;
            }
            set
            {
                _versionRegExPattern = value;
            }
        }

        [XmlAttribute("versionLevel.1")]
        [JsonProperty("versionLevel.1", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionLevel1
        {
            get
            {
                return _versionLevel1;
            }
            set
            {
                _versionLevel1 = value;
            }
        }

        [XmlAttribute("versionLevel.2")]
        [JsonProperty("versionLevel.2", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionLevel2
        {
            get
            {
                return _versionLevel2;
            }
            set
            {
                _versionLevel2 = value;
            }
        }

        [XmlAttribute("versionLevel.3")]
        [JsonProperty("versionLevel.3", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionLevel3
        {
            get
            {
                return _versionLevel3;
            }
            set
            {
                _versionLevel3 = value;
            }
        }

        [XmlAttribute("versionLevel.4")]
        [JsonProperty("versionLevel.4", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionLevel4
        {
            get
            {
                return _versionLevel4;
            }
            set
            {
                _versionLevel4 = value;
            }
        }

        [XmlAttribute("versionLevel.5")]
        [JsonProperty("versionLevel.5", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionLevel5
        {
            get
            {
                return _versionLevel5;
            }
            set
            {
                _versionLevel5 = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool VersioningReferenceSpecified
        {
            get
            {
                return _versioningReferenceSpecified;
            }
            set
            {
                _versioningReferenceSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool VersionCommentsSpecified
        {
            get
            {
                return _versionCommentsSpecified;
            }
            set
            {
                _versionCommentsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangesSpecified
        {
            get
            {
                return _changesSpecified;
            }
            set
            {
                _changesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool fullVersionSpecified
        {
            get
            {
                return _fullVersionSpecified;
            }
            set
            {
                _fullVersionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionRegExPatternSpecified
        {
            get
            {
                return _versionRegExPatternSpecified;
            }
            set
            {
                _versionRegExPatternSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionLevel1Specified
        {
            get
            {
                return _versionLevel1Specified;
            }
            set
            {
                _versionLevel1Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionLevel2Specified
        {
            get
            {
                return _versionLevel2Specified;
            }
            set
            {
                _versionLevel2Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionLevel3Specified
        {
            get
            {
                return _versionLevel3Specified;
            }
            set
            {
                _versionLevel3Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionLevel4Specified
        {
            get
            {
                return _versionLevel4Specified;
            }
            set
            {
                _versionLevel4Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionLevel5Specified
        {
            get
            {
                return _versionLevel5Specified;
            }
            set
            {
                _versionLevel5Specified = value;
            }
        }
    }

    /// <summary>
    /// Representation of plain text with an option for HTML-formatting. Contains optional
    /// boilerplate metadata to aid programmatic manipulation.
    /// </summary>
    [XmlInclude(typeof(ActSendMessageType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RichTextType")]
    public partial class RichTextType : ExtensionBaseType
    {
        #region Private fields
        private HTML_Stype _richText;
        private string _val;
        private bool _richTextSpecified;
        private bool _valSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual HTML_Stype RichText
        {
            get
            {
                if ((_richText == null))
                {
                    _richText = new HTML_Stype();
                }
                return _richText;
            }
            set
            {
                _richText = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string val
        {
            get
            {
                return _val;
            }
            set
            {
                _val = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RichTextSpecified
        {
            get
            {
                return _richTextSpecified;
            }
            set
            {
                _richTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool valSpecified
        {
            get
            {
                return _valSpecified;
            }
            set
            {
                _valSpecified = value;
            }
        }
    }

    /// <summary>
    /// Send a message to any endpoint. Messages may include alerts of various
    /// types. The default datatype for messages is string.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSendMessageType")]
    public partial class ActSendMessageType : RichTextType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private string _messageType;
        private bool _itemsSpecified;
        private bool _messageTypeSpecified;
        #endregion

        [XmlElement("Email", typeof(EmailAddressType), Order = 0)]
        [XmlElement("Fax", typeof(PhoneNumberType), Order = 0)]
        [XmlElement("WebService", typeof(CallFuncActionType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string messageType
        {
            get
            {
                return _messageType;
            }
            set
            {
                _messageType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool messageTypeSpecified
        {
            get
            {
                return _messageTypeSpecified;
            }
            set
            {
                _messageTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a string
    /// value.
    /// </summary>
    [XmlInclude(typeof(LookupEndPointType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CallFuncActionType")]
    public partial class CallFuncActionType : CallFuncType
    {
        #region Private fields
        private PredActionType _conditionalActions;
        private bool _conditionalActionsSpecified;
        #endregion

        /// <summary>
        /// Actions to take, usually based on the return @val
        /// value of the function. Condiitons may be specified for each action.
        /// Conditions may be combined by Boolean operators and nested to any
        /// level.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PredActionType ConditionalActions
        {
            get
            {
                return _conditionalActions;
            }
            set
            {
                _conditionalActions = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ConditionalActionsSpecified
        {
            get
            {
                return _conditionalActionsSpecified;
            }
            set
            {
                _conditionalActionsSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a string value.
    /// </summary>
    [XmlInclude(typeof(CallFuncActionType))]
    [XmlInclude(typeof(LookupEndPointType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CallFuncType")]
    public abstract partial class CallFuncType : CallFuncBaseType
    {
        #region Private fields
        private string _dataType;
        private bool _dataTypeSpecified;
        #endregion

        /// <summary>
        /// CallFuncType class constructor
        /// </summary>
        public CallFuncType()
        {
            _dataType = "string";
        }

        [XmlAttribute]
        [DefaultValue("string")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string dataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dataTypeSpecified
        {
            get
            {
                return _dataTypeSpecified;
            }
            set
            {
                _dataTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a string value.
    /// </summary>
    [XmlInclude(typeof(CallFuncBoolType))]
    [XmlInclude(typeof(CallFuncBoolActionType))]
    [XmlInclude(typeof(CallFuncType))]
    [XmlInclude(typeof(CallFuncActionType))]
    [XmlInclude(typeof(LookupEndPointType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CallFuncBaseType")]
    public abstract partial class CallFuncBaseType : ExtensionBaseType
    {
        #region Private fields
        private anyURI_Stype _item;
        private ItemChoiceType1 _itemElementName;
        private RichTextType _security;
        private List<ExtensionBaseType> _items;
        private bool _returnList;
        private string _listDelimiter;
        private string _objectTypeName;
        private string _objectFormat;
        private bool _allowNull;
        private string _returnVal;
        private bool _itemSpecified;
        private bool _itemElementNameSpecified;
        private bool _securitySpecified;
        private bool _itemsSpecified;
        private bool _returnListSpecified;
        private bool _listDelimiterSpecified;
        private bool _objectTypeNameSpecified;
        private bool _objectFormatSpecified;
        private bool _allowNullSpecified;
        private bool _returnValSpecified;
        #endregion

        /// <summary>
        /// CallFuncBaseType class constructor
        /// </summary>
        public CallFuncBaseType()
        {
            _returnList = false;
            _listDelimiter = "|";
            _allowNull = true;
        }

        [XmlElement("FunctionURI", typeof(anyURI_Stype), Order = 0)]
        [XmlElement("LocalFunctionName", typeof(anyURI_Stype), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public virtual anyURI_Stype Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElement(Order = 1)]
        [XmlIgnore]
        public virtual ItemChoiceType1 ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        /// <summary>
        /// Information about securly accessing the web service.  More detailed service patterns may be required.
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType Security
        {
            get
            {
                return _security;
            }
            set
            {
                _security = value;
            }
        }

        [XmlElement("ListItemParameterRef", typeof(ListItemParameterType), Order = 3)]
        [XmlElement("ParameterRef", typeof(ParameterItemType), Order = 3)]
        [XmlElement("ParameterValue", typeof(ParameterValueType), Order = 3)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool returnList
        {
            get
            {
                return _returnList;
            }
            set
            {
                _returnList = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("|")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string listDelimiter
        {
            get
            {
                return _listDelimiter;
            }
            set
            {
                _listDelimiter = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string objectTypeName
        {
            get
            {
                return _objectTypeName;
            }
            set
            {
                _objectTypeName = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string objectFormat
        {
            get
            {
                return _objectFormat;
            }
            set
            {
                _objectFormat = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowNull
        {
            get
            {
                return _allowNull;
            }
            set
            {
                _allowNull = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string returnVal
        {
            get
            {
                return _returnVal;
            }
            set
            {
                _returnVal = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemElementNameSpecified
        {
            get
            {
                return _itemElementNameSpecified;
            }
            set
            {
                _itemElementNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool SecuritySpecified
        {
            get
            {
                return _securitySpecified;
            }
            set
            {
                _securitySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool returnListSpecified
        {
            get
            {
                return _returnListSpecified;
            }
            set
            {
                _returnListSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool listDelimiterSpecified
        {
            get
            {
                return _listDelimiterSpecified;
            }
            set
            {
                _listDelimiterSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool objectTypeNameSpecified
        {
            get
            {
                return _objectTypeNameSpecified;
            }
            set
            {
                _objectTypeNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool objectFormatSpecified
        {
            get
            {
                return _objectFormatSpecified;
            }
            set
            {
                _objectFormatSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowNullSpecified
        {
            get
            {
                return _allowNullSpecified;
            }
            set
            {
                _allowNullSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool returnValSpecified
        {
            get
            {
                return _returnValSpecified;
            }
            set
            {
                _returnValSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemChoiceType1
    {
        FunctionURI,
        LocalFunctionName,
    }

    /// <summary>
    /// Parameters are named, uniquely identifiable, instances of form attributes (e.g., @selected).  They are fed into expressions, which are then used as part of a rule within the form.  Parameters can also be fed into URI expressions used inside a Lookup Endpoint, i.e., URIs that call web services to supply list items (e.g., a list of SNOMED-coded items) to a question.
    /// 
    /// Parameters using this construct are derived from other locations in the XML instance document, including user-entered Response values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ParameterItemType")]
    public partial class ParameterItemType : ExtensionBaseType
    {
        #region Private fields
        private string _dataType;
        private string _paramName;
        private string _sourceItemName;
        private string _sourceItemAttribute;
        private bool _dataTypeSpecified;
        private bool _paramNameSpecified;
        private bool _sourceItemNameSpecified;
        private bool _sourceItemAttributeSpecified;
        #endregion

        /// <summary>
        /// ParameterItemType class constructor
        /// </summary>
        public ParameterItemType()
        {
            _dataType = "string";
            _sourceItemAttribute = "val";
        }

        [XmlAttribute]
        [DefaultValue("string")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string dataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }

        /// <summary>
        /// A locally useful name that describes the parameter
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string paramName
        {
            get
            {
                return _paramName;
            }
            set
            {
                _paramName = value;
            }
        }

        /// <summary>
        /// The @name of an item in the current form that holds the @itemAttribute value that will become the parameter value.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string sourceItemName
        {
            get
            {
                return _sourceItemName;
            }
            set
            {
                _sourceItemName = value;
            }
        }

        /// <summary>
        /// The name of any XML attribute on a named element.  The property value is the parameter's value.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [DefaultValue("val")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string sourceItemAttribute
        {
            get
            {
                return _sourceItemAttribute;
            }
            set
            {
                _sourceItemAttribute = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dataTypeSpecified
        {
            get
            {
                return _dataTypeSpecified;
            }
            set
            {
                _dataTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool paramNameSpecified
        {
            get
            {
                return _paramNameSpecified;
            }
            set
            {
                _paramNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool sourceItemNameSpecified
        {
            get
            {
                return _sourceItemNameSpecified;
            }
            set
            {
                _sourceItemNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool sourceItemAttributeSpecified
        {
            get
            {
                return _sourceItemAttributeSpecified;
            }
            set
            {
                _sourceItemAttributeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a string value.
    /// </summary>
    [XmlInclude(typeof(CallFuncBoolActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CallFuncBoolType")]
    public partial class CallFuncBoolType : CallFuncBaseType
    {
        #region Private fields
        private bool _not;
        private string _validationMessage;
        private bool _notSpecified;
        private bool _validationMessageSpecified;
        #endregion

        /// <summary>
        /// CallFuncBoolType class constructor
        /// </summary>
        public CallFuncBoolType()
        {
            _not = false;
        }

        /// <summary>
        /// If @not="true" then the logical value of the conditions of the parent element is negated; true becomes false and false becomes true.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        /// <summary>
        /// Optional message that appears when the rule evaluates to true
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string validationMessage
        {
            get
            {
                return _validationMessage;
            }
            set
            {
                _validationMessage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validationMessageSpecified
        {
            get
            {
                return _validationMessageSpecified;
            }
            set
            {
                _validationMessageSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a string
    /// value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CallFuncBoolActionType")]
    public partial class CallFuncBoolActionType : CallFuncBoolType
    {
        #region Private fields
        private ExtensionBaseType[] _items1;
        private Items1ChoiceType[] _items1ElementName;
        private bool _items1Specified;
        private bool _items1ElementNameSpecified;
        #endregion

        [XmlElement("Actions", typeof(ActionsType), Order = 0)]
        [XmlElement("ConditionalActions", typeof(PredActionType), Order = 0)]
        [XmlElement("Else", typeof(PredActionType), Order = 0)]
        [XmlChoiceIdentifierAttribute("Items1ElementName")]
        public virtual ExtensionBaseType[] Items1
        {
            get
            {
                return _items1;
            }
            set
            {
                _items1 = value;
            }
        }

        [XmlElement("Items1ElementName", Order = 1)]
        [XmlIgnore]
        public virtual Items1ChoiceType[] Items1ElementName
        {
            get
            {
                return _items1ElementName;
            }
            set
            {
                _items1ElementName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool Items1Specified
        {
            get
            {
                return _items1Specified;
            }
            set
            {
                _items1Specified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool Items1ElementNameSpecified
        {
            get
            {
                return _items1ElementNameSpecified;
            }
            set
            {
                _items1ElementNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum Items1ChoiceType
    {
        Actions,
        ConditionalActions,
        Else,
    }

    /// <summary>
    /// LookupEndPointType represents list items that are derived from a web
    /// service call of some type, instead of an explicit set of ListItem nodes specified in
    /// the FormDesign XML. The endpoint must return a list separated into individual list
    /// items by the @colTextDelimiter value specified in the parent
    /// ListFieldType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("LookupEndPointType")]
    public partial class LookupEndPointType : CallFuncActionType
    {
        #region Private fields
        private List<CodingType> _responseValue;
        private bool _includesHeaderRow;
        private bool _responseValueSpecified;
        private bool _includesHeaderRowSpecified;
        #endregion

        /// <summary>
        /// LookupEndPointType class constructor
        /// </summary>
        public LookupEndPointType()
        {
            _includesHeaderRow = false;
        }

        /// <summary>
        /// The user's response to the lookup list. The response
        /// is recorded as a coding, terminology, classification, keyword, or
        /// local value. Multiple selections from the lookup list may be
        /// allowed.
        /// </summary>
        [XmlElement("ResponseValue", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<CodingType> ResponseValue
        {
            get
            {
                return _responseValue;
            }
            set
            {
                _responseValue = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool includesHeaderRow
        {
            get
            {
                return _includesHeaderRow;
            }
            set
            {
                _includesHeaderRow = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ResponseValueSpecified
        {
            get
            {
                return _responseValueSpecified;
            }
            set
            {
                _responseValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool includesHeaderRowSpecified
        {
            get
            {
                return _includesHeaderRowSpecified;
            }
            set
            {
                _includesHeaderRowSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type represents any type of coding, terminology, classification, keyword, or local
    /// value system that may be applied to any displayable item in a FormDesign template.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CodingType")]
    public partial class CodingType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _code;
        private DataTypes_SType _typedValue;
        private RichTextType _codeText;
        private CodeMatchType _codeMatch;
        private CodeSystemType _codeSystem;
        private anyURI_Stype _codeURI;
        private UnitsType _units;
        private bool _codeSpecified;
        private bool _typedValueSpecified;
        private bool _codeTextSpecified;
        private bool _codeMatchSpecified;
        private bool _codeSystemSpecified;
        private bool _codeURISpecified;
        private bool _unitsSpecified;
        #endregion

        /// <summary>
        /// A standard code, or a local value from a custom coding system, that can be
        /// used to consistently identify, or provide a standard value for, the coded
        /// item.
        /// </summary>
        [XmlElement(IsNullable = true, Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Code
        {
            get
            {
                if ((_code == null))
                {
                    _code = new string_Stype();
                }
                return _code;
            }
            set
            {
                _code = value;
            }
        }

        /// <summary>
        /// Data type enumeration derived from W3C XML Schema. If the code is derived
        /// from a local value system (e.g., numbered answer choices such as clock positions, tumor
        /// grades, or clinical scoring systems), then the data type of the local value may be
        /// specified here. This may be important if the code value will need to be manipulated
        /// mathematically.
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_SType TypedValue
        {
            get
            {
                return _typedValue;
            }
            set
            {
                _typedValue = value;
            }
        }

        /// <summary>
        /// The human readable text that accompanies the assigned code and represents
        /// the code's precise meaning (semantics) or usage.
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType CodeText
        {
            get
            {
                return _codeText;
            }
            set
            {
                _codeText = value;
            }
        }

        /// <summary>
        /// Degree of match between the mapped item and the assigned code -
        /// @codeMatchType holds an entry from an enumerated list of match types.
        /// </summary>
        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CodeMatchType CodeMatch
        {
            get
            {
                return _codeMatch;
            }
            set
            {
                _codeMatch = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CodeSystemType CodeSystem
        {
            get
            {
                return _codeSystem;
            }
            set
            {
                _codeSystem = value;
            }
        }

        /// <summary>
        /// NEW: Web resource that provides information about the
        /// code
        /// </summary>
        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual anyURI_Stype CodeURI
        {
            get
            {
                return _codeURI;
            }
            set
            {
                _codeURI = value;
            }
        }

        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual UnitsType Units
        {
            get
            {
                return _units;
            }
            set
            {
                _units = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeSpecified
        {
            get
            {
                return _codeSpecified;
            }
            set
            {
                _codeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TypedValueSpecified
        {
            get
            {
                return _typedValueSpecified;
            }
            set
            {
                _typedValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeTextSpecified
        {
            get
            {
                return _codeTextSpecified;
            }
            set
            {
                _codeTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeMatchSpecified
        {
            get
            {
                return _codeMatchSpecified;
            }
            set
            {
                _codeMatchSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeSystemSpecified
        {
            get
            {
                return _codeSystemSpecified;
            }
            set
            {
                _codeSystemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeURISpecified
        {
            get
            {
                return _codeURISpecified;
            }
            set
            {
                _codeURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UnitsSpecified
        {
            get
            {
                return _unitsSpecified;
            }
            set
            {
                _unitsSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type represents information about the coding system used in CodingType. It may refer
    /// to any type of coding, terminology, classification, keyword, or local value system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("CodeSystemType")]
    public partial class CodeSystemType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _codeSystemName;
        private dateTime_Stype _releaseDate;
        private string_Stype _version;
        private string_Stype _oID;
        private anyURI_Stype _codeSystemURI;
        private bool _codeSystemNameSpecified;
        private bool _releaseDateSpecified;
        private bool _versionSpecified;
        private bool _oIDSpecified;
        private bool _codeSystemURISpecified;
        #endregion

        /// <summary>
        /// The name of the coding system, as recommended by the coding system
        /// curators, or as recommended by the agency that creates standards for the code map in
        /// use.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype CodeSystemName
        {
            get
            {
                if ((_codeSystemName == null))
                {
                    _codeSystemName = new string_Stype();
                }
                return _codeSystemName;
            }
            set
            {
                _codeSystemName = value;
            }
        }

        /// <summary>
        /// The day that the selected version of the coding system was released for
        /// general use by the coding system curators.
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype ReleaseDate
        {
            get
            {
                return _releaseDate;
            }
            set
            {
                _releaseDate = value;
            }
        }

        /// <summary>
        /// Version of the coding system, using the version format defined by the
        /// coding system
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        /// <summary>
        /// The ISO object identifier (OID) for the coding system, as found at the HL7
        /// OID Registry: https://www.hl7.org/oid/index.cfm
        /// </summary>
        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype OID
        {
            get
            {
                return _oID;
            }
            set
            {
                _oID = value;
            }
        }

        /// <summary>
        /// Web resource that uniquely identifies the coding system
        /// </summary>
        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual anyURI_Stype CodeSystemURI
        {
            get
            {
                return _codeSystemURI;
            }
            set
            {
                _codeSystemURI = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeSystemNameSpecified
        {
            get
            {
                return _codeSystemNameSpecified;
            }
            set
            {
                _codeSystemNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ReleaseDateSpecified
        {
            get
            {
                return _releaseDateSpecified;
            }
            set
            {
                _releaseDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool VersionSpecified
        {
            get
            {
                return _versionSpecified;
            }
            set
            {
                _versionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OIDSpecified
        {
            get
            {
                return _oIDSpecified;
            }
            set
            {
                _oIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeSystemURISpecified
        {
            get
            {
                return _codeSystemURISpecified;
            }
            set
            {
                _codeSystemURISpecified = value;
            }
        }
    }

    /// <summary>
    /// A generic structure for recording file version metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("VersionTypeChanges")]
    public partial class VersionTypeChanges : ExtensionBaseType
    {
        #region Private fields
        private List<ChangeLogType> _change;
        private bool _changeSpecified;
        #endregion

        [XmlElement("Change", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ChangeLogType> Change
        {
            get
            {
                if ((_change == null))
                {
                    _change = new List<ChangeLogType>();
                }
                return _change;
            }
            set
            {
                _change = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeSpecified
        {
            get
            {
                return _changeSpecified;
            }
            set
            {
                _changeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Inforamtion about changes to file or part of a file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ChangeLogType")]
    public partial class ChangeLogType : ExtensionBaseType
    {
        #region Private fields
        private ChangedFieldType _changedField;
        private DataTypes_SType _changedTo;
        private DataTypes_SType _changedFrom;
        private List<string_Stype> _changeType;
        private ReplacedIDsType _replaces;
        private dateTime_Stype _changeDate;
        private string_Stype _changeDescription;
        private ContactsType _editors;
        private ChangeTrackingType _changeTracking;
        private bool _changedFieldSpecified;
        private bool _changedToSpecified;
        private bool _changedFromSpecified;
        private bool _changeTypeSpecified;
        private bool _replacesSpecified;
        private bool _changeDateSpecified;
        private bool _changeDescriptionSpecified;
        private bool _editorsSpecified;
        private bool _changeTrackingSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ChangedFieldType ChangedField
        {
            get
            {
                if ((_changedField == null))
                {
                    _changedField = new ChangedFieldType();
                }
                return _changedField;
            }
            set
            {
                _changedField = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_SType ChangedTo
        {
            get
            {
                if ((_changedTo == null))
                {
                    _changedTo = new DataTypes_SType();
                }
                return _changedTo;
            }
            set
            {
                _changedTo = value;
            }
        }

        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_SType ChangedFrom
        {
            get
            {
                if ((_changedFrom == null))
                {
                    _changedFrom = new DataTypes_SType();
                }
                return _changedFrom;
            }
            set
            {
                _changedFrom = value;
            }
        }

        [XmlElement("ChangeType", Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> ChangeType
        {
            get
            {
                if ((_changeType == null))
                {
                    _changeType = new List<string_Stype>();
                }
                return _changeType;
            }
            set
            {
                _changeType = value;
            }
        }

        /// <summary>
        /// The retired/deprecated item that is being replaced.
        /// </summary>
        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ReplacedIDsType Replaces
        {
            get
            {
                return _replaces;
            }
            set
            {
                _replaces = value;
            }
        }

        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype ChangeDate
        {
            get
            {
                if ((_changeDate == null))
                {
                    _changeDate = new dateTime_Stype();
                }
                return _changeDate;
            }
            set
            {
                _changeDate = value;
            }
        }

        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype ChangeDescription
        {
            get
            {
                return _changeDescription;
            }
            set
            {
                _changeDescription = value;
            }
        }

        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ContactsType Editors
        {
            get
            {
                return _editors;
            }
            set
            {
                _editors = value;
            }
        }

        [XmlElement(Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ChangeTrackingType ChangeTracking
        {
            get
            {
                return _changeTracking;
            }
            set
            {
                _changeTracking = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangedFieldSpecified
        {
            get
            {
                return _changedFieldSpecified;
            }
            set
            {
                _changedFieldSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangedToSpecified
        {
            get
            {
                return _changedToSpecified;
            }
            set
            {
                _changedToSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangedFromSpecified
        {
            get
            {
                return _changedFromSpecified;
            }
            set
            {
                _changedFromSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeTypeSpecified
        {
            get
            {
                return _changeTypeSpecified;
            }
            set
            {
                _changeTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ReplacesSpecified
        {
            get
            {
                return _replacesSpecified;
            }
            set
            {
                _replacesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeDateSpecified
        {
            get
            {
                return _changeDateSpecified;
            }
            set
            {
                _changeDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeDescriptionSpecified
        {
            get
            {
                return _changeDescriptionSpecified;
            }
            set
            {
                _changeDescriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EditorsSpecified
        {
            get
            {
                return _editorsSpecified;
            }
            set
            {
                _editorsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ChangeTrackingSpecified
        {
            get
            {
                return _changeTrackingSpecified;
            }
            set
            {
                _changeTrackingSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ChangedFieldType")]
    public partial class ChangedFieldType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("TargetItemID", typeof(TargetItemIDType), Order = 0)]
        [XmlElement("TargetItemName", typeof(TargetItemNameType), Order = 0)]
        [XmlElement("TargetItemXPath", typeof(TargetItemXPathType), Order = 0)]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ContactsType")]
    public partial class ContactsType : ExtensionBaseType
    {
        #region Private fields
        private List<ContactType> _contact;
        private bool _contactSpecified;
        #endregion

        [XmlElement("Contact", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ContactType> Contact
        {
            get
            {
                if ((_contact == null))
                {
                    _contact = new List<ContactType>();
                }
                return _contact;
            }
            set
            {
                _contact = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ContactSpecified
        {
            get
            {
                return _contactSpecified;
            }
            set
            {
                _contactSpecified = value;
            }
        }
    }

    /// <summary>
    /// A model structure for a Person or Organization that generally performs a particular stated
    /// role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ContactType")]
    public partial class ContactType : ExtensionBaseType
    {
        #region Private fields
        private PersonType _person;
        private OrganizationType _organization;
        private bool _personSpecified;
        private bool _organizationSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PersonType Person
        {
            get
            {
                return _person;
            }
            set
            {
                _person = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual OrganizationType Organization
        {
            get
            {
                return _organization;
            }
            set
            {
                _organization = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PersonSpecified
        {
            get
            {
                return _personSpecified;
            }
            set
            {
                _personSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OrganizationSpecified
        {
            get
            {
                return _organizationSpecified;
            }
            set
            {
                _organizationSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("FileUsageType")]
    public partial class FileUsageType : ExtensionBaseType
    {
        #region Private fields
        private List<CodingType> _included;
        private List<CodingType> _excluded;
        private List<string_Stype> _description;
        private bool _includedSpecified;
        private bool _excludedSpecified;
        private bool _descriptionSpecified;
        #endregion

        /// <summary>
        /// Reasons to use the file
        /// </summary>
        [XmlElement("Included", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<CodingType> Included
        {
            get
            {
                return _included;
            }
            set
            {
                _included = value;
            }
        }

        /// <summary>
        /// Reasons to not use the file
        /// </summary>
        [XmlElement("Excluded", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<CodingType> Excluded
        {
            get
            {
                return _excluded;
            }
            set
            {
                _excluded = value;
            }
        }

        /// <summary>
        /// Non-coded text describing usage criteria.
        /// </summary>
        [XmlElement("Description", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IncludedSpecified
        {
            get
            {
                return _includedSpecified;
            }
            set
            {
                _includedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ExcludedSpecified
        {
            get
            {
                return _excludedSpecified;
            }
            set
            {
                _excludedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }
    }

    /// <summary>
    /// List of standard kinds of dates that may apply to a file or its usage.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("FileDatesType")]
    public partial class FileDatesType : ExtensionBaseType
    {
        #region Private fields
        private dateTime_Stype _fileDate;
        private List<dateTime_Stype> _previousRevisionDate;
        private dateTime_Stype _releaseDate;
        private dateTime_Stype _effectiveDate;
        private dateTime_Stype _firstReleaseDate;
        private dateTime_Stype _usageStartDate;
        private dateTime_Stype _retirementDate;
        private List<dateTime_Stype> _otherDate;
        private bool _fileDateSpecified;
        private bool _previousRevisionDateSpecified;
        private bool _releaseDateSpecified;
        private bool _effectiveDateSpecified;
        private bool _firstReleaseDateSpecified;
        private bool _usageStartDateSpecified;
        private bool _retirementDateSpecified;
        private bool _otherDateSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype FileDate
        {
            get
            {
                return _fileDate;
            }
            set
            {
                _fileDate = value;
            }
        }

        [XmlElement("PreviousRevisionDate", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<dateTime_Stype> PreviousRevisionDate
        {
            get
            {
                return _previousRevisionDate;
            }
            set
            {
                _previousRevisionDate = value;
            }
        }

        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype ReleaseDate
        {
            get
            {
                return _releaseDate;
            }
            set
            {
                _releaseDate = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype EffectiveDate
        {
            get
            {
                return _effectiveDate;
            }
            set
            {
                _effectiveDate = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype FirstReleaseDate
        {
            get
            {
                return _firstReleaseDate;
            }
            set
            {
                _firstReleaseDate = value;
            }
        }

        [XmlElement(Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype UsageStartDate
        {
            get
            {
                return _usageStartDate;
            }
            set
            {
                _usageStartDate = value;
            }
        }

        [XmlElement(Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual dateTime_Stype RetirementDate
        {
            get
            {
                return _retirementDate;
            }
            set
            {
                _retirementDate = value;
            }
        }

        [XmlElement("OtherDate", Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<dateTime_Stype> OtherDate
        {
            get
            {
                return _otherDate;
            }
            set
            {
                _otherDate = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileDateSpecified
        {
            get
            {
                return _fileDateSpecified;
            }
            set
            {
                _fileDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool PreviousRevisionDateSpecified
        {
            get
            {
                return _previousRevisionDateSpecified;
            }
            set
            {
                _previousRevisionDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ReleaseDateSpecified
        {
            get
            {
                return _releaseDateSpecified;
            }
            set
            {
                _releaseDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool EffectiveDateSpecified
        {
            get
            {
                return _effectiveDateSpecified;
            }
            set
            {
                _effectiveDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FirstReleaseDateSpecified
        {
            get
            {
                return _firstReleaseDateSpecified;
            }
            set
            {
                _firstReleaseDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool UsageStartDateSpecified
        {
            get
            {
                return _usageStartDateSpecified;
            }
            set
            {
                _usageStartDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool RetirementDateSpecified
        {
            get
            {
                return _retirementDateSpecified;
            }
            set
            {
                _retirementDateSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OtherDateSpecified
        {
            get
            {
                return _otherDateSpecified;
            }
            set
            {
                _otherDateSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ApprovalType")]
    public partial class ApprovalType : ExtensionBaseType
    {
        #region Private fields
        private List<ContactType> _approvalContact;
        private List<string_Stype> _description;
        private bool _approvalContactSpecified;
        private bool _descriptionSpecified;
        #endregion

        [XmlElement("ApprovalContact", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ContactType> ApprovalContact
        {
            get
            {
                return _approvalContact;
            }
            set
            {
                _approvalContact = value;
            }
        }

        /// <summary>
        /// Non-structured text describing file approval.
        /// </summary>
        [XmlElement("Description", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<string_Stype> Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ApprovalContactSpecified
        {
            get
            {
                return _approvalContactSpecified;
            }
            set
            {
                _approvalContactSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }
    }

    /// <summary>
    /// A generic structure for recording languages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("LanguageType")]
    public partial class LanguageType : ExtensionBaseType
    {
        #region Private fields
        private string_Stype _language;
        private LanguageCodeISO6393_Type _languageCodeISO6393;
        private bool _languageSpecified;
        private bool _languageCodeISO6393Specified;
        #endregion

        /// <summary>
        /// The language used for text in SDC templates.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string_Stype Language
        {
            get
            {
                return _language;
            }
            set
            {
                _language = value;
            }
        }

        [XmlElement("LanguageCode.ISO.639.3", Order = 1)]
        [JsonProperty("LanguageCode.ISO.639.3", Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual LanguageCodeISO6393_Type LanguageCodeISO6393
        {
            get
            {
                if ((_languageCodeISO6393 == null))
                {
                    _languageCodeISO6393 = new LanguageCodeISO6393_Type();
                }
                return _languageCodeISO6393;
            }
            set
            {
                _languageCodeISO6393 = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LanguageSpecified
        {
            get
            {
                return _languageSpecified;
            }
            set
            {
                _languageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LanguageCodeISO6393Specified
        {
            get
            {
                return _languageCodeISO6393Specified;
            }
            set
            {
                _languageCodeISO6393Specified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("AssociatedFilesType")]
    public partial class AssociatedFilesType : ExtensionBaseType
    {
        #region Private fields
        private List<FileType> _file;
        private bool _fileSpecified;
        #endregion

        [XmlElement("File", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<FileType> File
        {
            get
            {
                if ((_file == null))
                {
                    _file = new List<FileType>();
                }
                return _file;
            }
            set
            {
                _file = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool FileSpecified
        {
            get
            {
                return _fileSpecified;
            }
            set
            {
                _fileSpecified = value;
            }
        }
    }

    /// <summary>
    /// Test the data in the form for proper data types, rule integrity, and
    /// completeness of required questions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActValidateFormType")]
    public partial class ActValidateFormType : ExtensionBaseType
    {
        #region Private fields
        private CallFuncActionType _validationWebService;
        private bool _validateDataTypes;
        private bool _validateRules;
        private bool _validateCompleteness;
        private string _validationType;
        private bool _validationWebServiceSpecified;
        private bool _validateDataTypesSpecified;
        private bool _validateRulesSpecified;
        private bool _validateCompletenessSpecified;
        private bool _validationTypeSpecified;
        #endregion

        /// <summary>
        /// ActValidateFormType class constructor
        /// </summary>
        public ActValidateFormType()
        {
            _validateDataTypes = false;
            _validateRules = false;
            _validateCompleteness = false;
        }

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CallFuncActionType ValidationWebService
        {
            get
            {
                return _validationWebService;
            }
            set
            {
                _validationWebService = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool validateDataTypes
        {
            get
            {
                return _validateDataTypes;
            }
            set
            {
                _validateDataTypes = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool validateRules
        {
            get
            {
                return _validateRules;
            }
            set
            {
                _validateRules = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool validateCompleteness
        {
            get
            {
                return _validateCompleteness;
            }
            set
            {
                _validateCompleteness = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string validationType
        {
            get
            {
                return _validationType;
            }
            set
            {
                _validationType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ValidationWebServiceSpecified
        {
            get
            {
                return _validationWebServiceSpecified;
            }
            set
            {
                _validationWebServiceSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validateDataTypesSpecified
        {
            get
            {
                return _validateDataTypesSpecified;
            }
            set
            {
                _validateDataTypesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validateRulesSpecified
        {
            get
            {
                return _validateRulesSpecified;
            }
            set
            {
                _validateRulesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validateCompletenessSpecified
        {
            get
            {
                return _validateCompletenessSpecified;
            }
            set
            {
                _validateCompletenessSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validationTypeSpecified
        {
            get
            {
                return _validationTypeSpecified;
            }
            set
            {
                _validationTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Show a report preview, based on data in the current form. The
    /// following parameter may be used: reportID: points to a report definition in SDC
    /// format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActPreviewReportType")]
    public partial class ActPreviewReportType : ExtensionBaseType
    {
        #region Private fields
        private string _reportID;
        private string _displayState;
        private bool _reportIDSpecified;
        private bool _displayStateSpecified;
        #endregion

        /// <summary>
        /// This ID represents the report to be
        /// displayed.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportID
        {
            get
            {
                return _reportID;
            }
            set
            {
                _reportID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string displayState
        {
            get
            {
                return _displayState;
            }
            set
            {
                _displayState = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportIDSpecified
        {
            get
            {
                return _reportIDSpecified;
            }
            set
            {
                _reportIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool displayStateSpecified
        {
            get
            {
                return _displayStateSpecified;
            }
            set
            {
                _displayStateSpecified = value;
            }
        }
    }

    /// <summary>
    /// Show a stored report. The following parameters may be used: reportID:
    /// indicator of a report definition in SDC format. packageID: retrieve report as a
    /// package with ancillary information. reportInstanceGUID: retreive 1 or more report
    /// versions by using a report instance GUID. This may be used in conjunctions with a
    /// packageID. reportInstanceVersionGUID: retrieve a single version of a report
    /// representing the state of a report when it was saved. This may be used in
    /// conjunctions with a packageID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActShowReportType")]
    public partial class ActShowReportType : ExtensionBaseType
    {
        #region Private fields
        private string _reportID;
        private string _packageID;
        private string _reportInstanceGuid;
        private string _reportInstanceVersonGuid;
        private string _displayState;
        private bool _reportIDSpecified;
        private bool _packageIDSpecified;
        private bool _reportInstanceGuidSpecified;
        private bool _reportInstanceVersonGuidSpecified;
        private bool _displayStateSpecified;
        #endregion

        /// <summary>
        /// This ID represents the report to be
        /// displayed.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportID
        {
            get
            {
                return _reportID;
            }
            set
            {
                _reportID = value;
            }
        }

        /// <summary>
        /// This ID represents the Package that contains the report to
        /// be displayed.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string packageID
        {
            get
            {
                return _packageID;
            }
            set
            {
                _packageID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportInstanceGuid
        {
            get
            {
                return _reportInstanceGuid;
            }
            set
            {
                _reportInstanceGuid = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportInstanceVersonGuid
        {
            get
            {
                return _reportInstanceVersonGuid;
            }
            set
            {
                _reportInstanceVersonGuid = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string displayState
        {
            get
            {
                return _displayState;
            }
            set
            {
                _displayState = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportIDSpecified
        {
            get
            {
                return _reportIDSpecified;
            }
            set
            {
                _reportIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool packageIDSpecified
        {
            get
            {
                return _packageIDSpecified;
            }
            set
            {
                _packageIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportInstanceGuidSpecified
        {
            get
            {
                return _reportInstanceGuidSpecified;
            }
            set
            {
                _reportInstanceGuidSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportInstanceVersonGuidSpecified
        {
            get
            {
                return _reportInstanceVersonGuidSpecified;
            }
            set
            {
                _reportInstanceVersonGuidSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool displayStateSpecified
        {
            get
            {
                return _displayStateSpecified;
            }
            set
            {
                _displayStateSpecified = value;
            }
        }
    }

    /// <summary>
    /// Display a message to the form user, triggered by activity within the
    /// form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActShowMessageType")]
    public partial class ActShowMessageType : ExtensionBaseType
    {
        #region Private fields
        private List<RichTextType> _message;
        private string _alertLevel;
        private string _alertType;
        private string _messageType;
        private string _messageCode;
        private bool _messageSpecified;
        private bool _alertLevelSpecified;
        private bool _alertTypeSpecified;
        private bool _messageTypeSpecified;
        private bool _messageCodeSpecified;
        #endregion

        [XmlElement("Message", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<RichTextType> Message
        {
            get
            {
                if ((_message == null))
                {
                    _message = new List<RichTextType>();
                }
                return _message;
            }
            set
            {
                _message = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string alertLevel
        {
            get
            {
                return _alertLevel;
            }
            set
            {
                _alertLevel = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string alertType
        {
            get
            {
                return _alertType;
            }
            set
            {
                _alertType = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string messageType
        {
            get
            {
                return _messageType;
            }
            set
            {
                _messageType = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string messageCode
        {
            get
            {
                return _messageCode;
            }
            set
            {
                _messageCode = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MessageSpecified
        {
            get
            {
                return _messageSpecified;
            }
            set
            {
                _messageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool alertLevelSpecified
        {
            get
            {
                return _alertLevelSpecified;
            }
            set
            {
                _alertLevelSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool alertTypeSpecified
        {
            get
            {
                return _alertTypeSpecified;
            }
            set
            {
                _alertTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool messageTypeSpecified
        {
            get
            {
                return _messageTypeSpecified;
            }
            set
            {
                _messageTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool messageCodeSpecified
        {
            get
            {
                return _messageCodeSpecified;
            }
            set
            {
                _messageCodeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Show an external form to interact with the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActShowFormType")]
    public partial class ActShowFormType : ExtensionBaseType
    {
        #region Private fields
        private string _formID;
        private string _packageID;
        private string _displayState;
        private bool _formIDSpecified;
        private bool _packageIDSpecified;
        private bool _displayStateSpecified;
        #endregion

        /// <summary>
        /// This ID represents the form to be
        /// displayed.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string formID
        {
            get
            {
                return _formID;
            }
            set
            {
                _formID = value;
            }
        }

        /// <summary>
        /// This ID represents the Package that contains the form to
        /// be displayed.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string packageID
        {
            get
            {
                return _packageID;
            }
            set
            {
                _packageID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string displayState
        {
            get
            {
                return _displayState;
            }
            set
            {
                _displayState = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool formIDSpecified
        {
            get
            {
                return _formIDSpecified;
            }
            set
            {
                _formIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool packageIDSpecified
        {
            get
            {
                return _packageIDSpecified;
            }
            set
            {
                _packageIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool displayStateSpecified
        {
            get
            {
                return _displayStateSpecified;
            }
            set
            {
                _displayStateSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type is used to act upon the value of common item attributes. If
    /// an "act" attribute (a type with the "act" prefix) has no value assigned, it is
    /// ignored. If it has a value, then that attribute on the target item(s) assume(s) that
    /// stated value when an attached Boolean condition evaluates to true. The attached
    /// condition may be an "If" statement or any expression that evaluates to a Boolean
    /// value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSetAttributeType")]
    public partial class ActSetAttributeType : ExtensionBaseType
    {
        #region Private fields
        private string _targetNames;
        private bool? _actVisible;
        private bool? _actEnable;
        private string _actMinCard;
        private string _actMaxCard;
        private bool? _actActivate;
        private bool? _actSelect;
        private bool? _actDeleteResponse;
        private bool? _actReadOnly;
        private string _actType;
        private string _actStyleClass;
        private string _actSetTitleText;
        private byte[] _actSetBase64HTML;
        private string _actSetCode;
        private string _actSetCodeSystem;
        private string _actSetVal;
        private string _actSetAssociatedValue;
        private string _actSetValFromRef;
        private string _actSetAssociatedValueFromRef;
        private bool _targetNamesSpecified;
        private bool _actMinCardSpecified;
        private bool _actMaxCardSpecified;
        private bool _actTypeSpecified;
        private bool _actStyleClassSpecified;
        private bool _actSetTitleTextSpecified;
        private bool _actSetBase64HTMLSpecified;
        private bool _actSetCodeSpecified;
        private bool _actSetCodeSystemSpecified;
        private bool _actSetValSpecified;
        private bool _actSetAssociatedValueSpecified;
        private bool _actSetValFromRefSpecified;
        private bool _actSetAssociatedValueFromRefSpecified;
        #endregion

        /// <summary>
        /// The names of the items affected by property
        /// actions
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetNames
        {
            get
            {
                return _targetNames;
            }
            set
            {
                _targetNames = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actVisible
        {
            get
            {
                if (_actVisible.HasValue)
                {
                    return _actVisible.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actVisible = value;
            }
        }

        [XmlIgnore]
        public virtual bool actVisibleSpecified
        {
            get
            {
                return _actVisible.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actVisible = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actEnable
        {
            get
            {
                if (_actEnable.HasValue)
                {
                    return _actEnable.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actEnable = value;
            }
        }

        [XmlIgnore]
        public virtual bool actEnableSpecified
        {
            get
            {
                return _actEnable.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actEnable = null;
                }
            }
        }

        /// <summary>
        /// Controls requirement to answer the question and the
        /// minimum number of repeats.
        /// </summary>
        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actMinCard
        {
            get
            {
                return _actMinCard;
            }
            set
            {
                _actMinCard = value;
            }
        }

        /// <summary>
        /// Controls requirement to answer the
        /// question
        /// </summary>
        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actMaxCard
        {
            get
            {
                return _actMaxCard;
            }
            set
            {
                _actMaxCard = value;
            }
        }

        /// <summary>
        /// Toggle visible and enabled together. Setting this to false
        /// will de-activate all descendents but will not change their enabled or
        /// visible properties.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actActivate
        {
            get
            {
                if (_actActivate.HasValue)
                {
                    return _actActivate.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actActivate = value;
            }
        }

        [XmlIgnore]
        public virtual bool actActivateSpecified
        {
            get
            {
                return _actActivate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actActivate = null;
                }
            }
        }

        /// <summary>
        /// Toggle selection of a List Item; not applicable to other
        /// items.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actSelect
        {
            get
            {
                if (_actSelect.HasValue)
                {
                    return _actSelect.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actSelect = value;
            }
        }

        [XmlIgnore]
        public virtual bool actSelectSpecified
        {
            get
            {
                return _actSelect.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actSelect = null;
                }
            }
        }

        /// <summary>
        /// Delete any response in a Response field on a question or
        /// ListItem. Not applicable to other item types.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actDeleteResponse
        {
            get
            {
                if (_actDeleteResponse.HasValue)
                {
                    return _actDeleteResponse.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actDeleteResponse = value;
            }
        }

        [XmlIgnore]
        public virtual bool actDeleteResponseSpecified
        {
            get
            {
                return _actDeleteResponse.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actDeleteResponse = null;
                }
            }
        }

        /// <summary>
        /// Delete any response in a Response field on a question or
        /// ListItem. Not applicable to other item types.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool actReadOnly
        {
            get
            {
                if (_actReadOnly.HasValue)
                {
                    return _actReadOnly.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _actReadOnly = value;
            }
        }

        [XmlIgnore]
        public virtual bool actReadOnlySpecified
        {
            get
            {
                return _actReadOnly.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _actReadOnly = null;
                }
            }
        }

        /// <summary>
        /// Set the @type attribute value
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actType
        {
            get
            {
                return _actType;
            }
            set
            {
                _actType = value;
            }
        }

        /// <summary>
        /// Set the @styleClass attribute value
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actStyleClass
        {
            get
            {
                return _actStyleClass;
            }
            set
            {
                _actStyleClass = value;
            }
        }

        /// <summary>
        /// Set the @title text on an item.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetTitleText
        {
            get
            {
                return _actSetTitleText;
            }
            set
            {
                _actSetTitleText = value;
            }
        }

        /// <summary>
        /// Set HTML as base-64-encoded binary
        /// </summary>
        [XmlAttribute(DataType = "base64Binary")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte[] actSetBase64HTML
        {
            get
            {
                return _actSetBase64HTML;
            }
            set
            {
                _actSetBase64HTML = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetCode
        {
            get
            {
                return _actSetCode;
            }
            set
            {
                _actSetCode = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetCodeSystem
        {
            get
            {
                return _actSetCodeSystem;
            }
            set
            {
                _actSetCodeSystem = value;
            }
        }

        /// <summary>
        /// Set a @val attribute with a supplied value. The correct
        /// data type must be used if applicable.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetVal
        {
            get
            {
                return _actSetVal;
            }
            set
            {
                _actSetVal = value;
            }
        }

        /// <summary>
        /// Set @associatedValue attribute of a ListItem with a
        /// supplied value. The correct data type must be used if
        /// applicable.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetAssociatedValue
        {
            get
            {
                return _actSetAssociatedValue;
            }
            set
            {
                _actSetAssociatedValue = value;
            }
        }

        /// <summary>
        /// Set a @val attribute. The correct data type must be used
        /// if applicable. Supply the @name of an element that has a non-null @val
        /// value of the correct datatype. Null values are
        /// ignored.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetValFromRef
        {
            get
            {
                return _actSetValFromRef;
            }
            set
            {
                _actSetValFromRef = value;
            }
        }

        /// <summary>
        /// Set @associatedValue attribute of a ListItem. The correct
        /// data type must be used if applicable. Supply the @name of an element
        /// that has a non-null @val value of the correct datatype. Null values are
        /// ignored.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string actSetAssociatedValueFromRef
        {
            get
            {
                return _actSetAssociatedValueFromRef;
            }
            set
            {
                _actSetAssociatedValueFromRef = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetNamesSpecified
        {
            get
            {
                return _targetNamesSpecified;
            }
            set
            {
                _targetNamesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actMinCardSpecified
        {
            get
            {
                return _actMinCardSpecified;
            }
            set
            {
                _actMinCardSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actMaxCardSpecified
        {
            get
            {
                return _actMaxCardSpecified;
            }
            set
            {
                _actMaxCardSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actTypeSpecified
        {
            get
            {
                return _actTypeSpecified;
            }
            set
            {
                _actTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actStyleClassSpecified
        {
            get
            {
                return _actStyleClassSpecified;
            }
            set
            {
                _actStyleClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetTitleTextSpecified
        {
            get
            {
                return _actSetTitleTextSpecified;
            }
            set
            {
                _actSetTitleTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetBase64HTMLSpecified
        {
            get
            {
                return _actSetBase64HTMLSpecified;
            }
            set
            {
                _actSetBase64HTMLSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetCodeSpecified
        {
            get
            {
                return _actSetCodeSpecified;
            }
            set
            {
                _actSetCodeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetCodeSystemSpecified
        {
            get
            {
                return _actSetCodeSystemSpecified;
            }
            set
            {
                _actSetCodeSystemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetValSpecified
        {
            get
            {
                return _actSetValSpecified;
            }
            set
            {
                _actSetValSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetAssociatedValueSpecified
        {
            get
            {
                return _actSetAssociatedValueSpecified;
            }
            set
            {
                _actSetAssociatedValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetValFromRefSpecified
        {
            get
            {
                return _actSetValFromRefSpecified;
            }
            set
            {
                _actSetValFromRefSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool actSetAssociatedValueFromRefSpecified
        {
            get
            {
                return _actSetAssociatedValueFromRefSpecified;
            }
            set
            {
                _actSetAssociatedValueFromRefSpecified = value;
            }
        }
    }

    /// <summary>
    /// Send a report to an endpoint, via email, fax or web service. The
    /// default report will be transmittted in SDCSubmitForm format, but may adopt a custom
    /// report type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSendReportType")]
    public partial class ActSendReportType : ExtensionBaseType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private string _reportID;
        private string _reportInstanceGuid;
        private string _reportInstanceVersonGuid;
        private bool _itemsSpecified;
        private bool _reportIDSpecified;
        private bool _reportInstanceGuidSpecified;
        private bool _reportInstanceVersonGuidSpecified;
        #endregion

        [XmlElement("Email", typeof(EmailAddressType), Order = 0)]
        [XmlElement("Fax", typeof(PhoneNumberType), Order = 0)]
        [XmlElement("WebService", typeof(CallFuncActionType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportID
        {
            get
            {
                return _reportID;
            }
            set
            {
                _reportID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportInstanceGuid
        {
            get
            {
                return _reportInstanceGuid;
            }
            set
            {
                _reportInstanceGuid = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string reportInstanceVersonGuid
        {
            get
            {
                return _reportInstanceVersonGuid;
            }
            set
            {
                _reportInstanceVersonGuid = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportIDSpecified
        {
            get
            {
                return _reportIDSpecified;
            }
            set
            {
                _reportIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportInstanceGuidSpecified
        {
            get
            {
                return _reportInstanceGuidSpecified;
            }
            set
            {
                _reportInstanceGuidSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool reportInstanceVersonGuidSpecified
        {
            get
            {
                return _reportInstanceVersonGuidSpecified;
            }
            set
            {
                _reportInstanceVersonGuidSpecified = value;
            }
        }
    }

    /// <summary>
    /// Save the form's responses to the default persistance layer(s). The
    /// default format is SDCSubmitForm, but other formats may be defined and
    /// used.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSaveResponsesType")]
    public partial class ActSaveResponsesType : ExtensionBaseType
    {
        #region Private fields
        private RichTextType _messageText;
        private bool _messageTextSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType MessageText
        {
            get
            {
                if ((_messageText == null))
                {
                    _messageText = new RichTextType();
                }
                return _messageText;
            }
            set
            {
                _messageText = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MessageTextSpecified
        {
            get
            {
                return _messageTextSpecified;
            }
            set
            {
                _messageTextSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule selects/unselects ListItems based on the selected status of
    /// other ListItems. This declarative rule determines (guards) when target ListItems
    /// should be selected or unselected. The guard rule may optionally select/unselect
    /// multiple target ListItems with a single rule. The target ListItem(s) to
    /// select/unselect are listed in targetNameSelectList. In the simplest case, this rule
    /// operates as follows: A list of ListItems is provided (selectedItemWatchList). If all
    /// the items in the list are selected (or unselected - see below) as specified in the
    /// selectedItemWatchList list, then the guard evaluates to true, and the
    /// targetNameSelectList items are selected. In some cases, we may wish to watch
    /// unselected items in the selectedItemWatchList. This is indicated by prefixing the
    /// name of the watched item with a minus sign/dash ("-"). In some cases, we may wish to
    /// unselect items in the targetNameSelectList list when the selectedItemWatchList
    /// evaluated to true. In this case, the target item is prefixed with a dash ("-").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RuleAutoSelectType")]
    public partial class RuleAutoSelectType : ExtensionBaseType
    {
        #region Private fields
        private string _selectedItemSet;
        private bool _onlyIf;
        private string _targetNameSelectList;
        private bool _selectedItemSetSpecified;
        private bool _onlyIfSpecified;
        private bool _targetNameSelectListSpecified;
        #endregion

        /// <summary>
        /// RuleAutoSelectType class constructor
        /// </summary>
        public RuleAutoSelectType()
        {
            _onlyIf = false;
        }

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string selectedItemSet
        {
            get
            {
                return _selectedItemSet;
            }
            set
            {
                _selectedItemSet = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool onlyIf
        {
            get
            {
                return _onlyIf;
            }
            set
            {
                _onlyIf = value;
            }
        }

        /// <summary>
        /// This list contains the @names of ListItems that will be
        /// automatically selected or deselected when the @selectedItemSet evaluates
        /// to true. If a @name is prefixed with a hyphen (-), then the item will be
        /// deselected when @selectedItemSet evaluates to true. If @not = true, then
        /// the Boolean rule evaluation is negated, and thus the rule works in
        /// reverse. If @onlyIf is true, then the above rule is reversed when
        /// @selectedItemSet evaluates to false. In other words, named items will be
        /// deselected, and hyphen-prefixed items will be selected when
        /// @selectedItemSet is false.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetNameSelectList
        {
            get
            {
                return _targetNameSelectList;
            }
            set
            {
                _targetNameSelectList = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectedItemSetSpecified
        {
            get
            {
                return _selectedItemSetSpecified;
            }
            set
            {
                _selectedItemSetSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool onlyIfSpecified
        {
            get
            {
                return _onlyIfSpecified;
            }
            set
            {
                _onlyIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetNameSelectListSpecified
        {
            get
            {
                return _targetNameSelectListSpecified;
            }
            set
            {
                _targetNameSelectListSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule sets the activation status of Items based on the selection
    /// status of other ListItems. This declarative rule determines (guards) when target
    /// Items should be activated or deactivated. The rule may optionally
    /// activate/deactivate multiple target items with a single rule. The target item(s) to
    /// activate/deactivate are listed in targetNameList. In the simplest case, this rule
    /// operates as follows: A list of ListItems is provided (selectedItemWatchList). If all
    /// the items in the list are selected (or unselected - see below) as specified in the
    /// selectedItemWatchList list, then the guard evaluates to true, and the targetNameList
    /// items are activated/deactivated. In some cases, we may wish to watch unselected
    /// items in the selectedItemWatchList. This is indicated by prefixing the name of the
    /// watched item with a minus sign/dash ("-"). In some cases, we may wish to deactivate
    /// items in the targetNameSelectList list when the selectedItemWatchList evaluated to
    /// true. In this case, the target item is prefixed with a dash ("-").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RuleAutoActivateType")]
    public partial class RuleAutoActivateType : ExtensionBaseType
    {
        #region Private fields
        private string _selectedItemSet;
        private bool _onlyIf;
        private string _targetNameActivationList;
        private toggleType _setVisibility;
        private toggleType _setEnabled;
        private toggleType _setExpanded;
        private bool _x_removeResponsesWhenDeactivated;
        private bool _selectedItemSetSpecified;
        private bool _onlyIfSpecified;
        private bool _targetNameActivationListSpecified;
        private bool _setVisibilitySpecified;
        private bool _setEnabledSpecified;
        private bool _setExpandedSpecified;
        private bool _x_removeResponsesWhenDeactivatedSpecified;
        #endregion

        /// <summary>
        /// RuleAutoActivateType class constructor
        /// </summary>
        public RuleAutoActivateType()
        {
            _onlyIf = false;
            _setVisibility = toggleType.@true;
            _setEnabled = toggleType.@true;
            _setExpanded = toggleType.@true;
            _x_removeResponsesWhenDeactivated = false;
        }

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string selectedItemSet
        {
            get
            {
                return _selectedItemSet;
            }
            set
            {
                _selectedItemSet = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool onlyIf
        {
            get
            {
                return _onlyIf;
            }
            set
            {
                _onlyIf = value;
            }
        }

        /// <summary>
        /// This list contains the @names of Identified Items that
        /// will be automatically activated or deactivated when the @selectedItemSet
        /// evaluates to true. If a @name is prefixed with a hyphen (-), then the
        /// item will be deactivated when @selectedItemSet evaluates to true. If
        /// @not = true, then the Boolean rule evaluation is negated, and thus the
        /// rule works in reverse. If @onlyIf is true, then the above rule is
        /// reversed when @selectedItemSet evaluates to false. In other words, named
        /// items will be deactivated, and hyphen-prefixed items will be activated
        /// when @selectedItemSet is false.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetNameActivationList
        {
            get
            {
                return _targetNameActivationList;
            }
            set
            {
                _targetNameActivationList = value;
            }
        }

        /// <summary>
        /// Make target items visible when activated and vice versa.
        /// Default = false. All descendants are affected in the same
        /// way.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(toggleType.@true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual toggleType setVisibility
        {
            get
            {
                return _setVisibility;
            }
            set
            {
                _setVisibility = value;
            }
        }

        /// <summary>
        /// Make target items enabled when activated and vice versa.
        /// Default = true. All descendants are affected in the same
        /// way.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(toggleType.@true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual toggleType setEnabled
        {
            get
            {
                return _setEnabled;
            }
            set
            {
                _setEnabled = value;
            }
        }

        /// <summary>
        /// Expand target items when activated and collapse item when
        /// deactivated. Default = false. All descendants are affected in the same
        /// way.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(toggleType.@true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual toggleType setExpanded
        {
            get
            {
                return _setExpanded;
            }
            set
            {
                _setExpanded = value;
            }
        }

        /// <summary>
        /// Delete all user selections, responses and comments when
        /// the item is deactivated. Applies to all descendant items as well. User
        /// should be warned before deleting anything, with an option to preserve
        /// the responses in the disabled items. Disabled item responses should not
        /// be saved with the form data.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool X_removeResponsesWhenDeactivated
        {
            get
            {
                return _x_removeResponsesWhenDeactivated;
            }
            set
            {
                _x_removeResponsesWhenDeactivated = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectedItemSetSpecified
        {
            get
            {
                return _selectedItemSetSpecified;
            }
            set
            {
                _selectedItemSetSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool onlyIfSpecified
        {
            get
            {
                return _onlyIfSpecified;
            }
            set
            {
                _onlyIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetNameActivationListSpecified
        {
            get
            {
                return _targetNameActivationListSpecified;
            }
            set
            {
                _targetNameActivationListSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool setVisibilitySpecified
        {
            get
            {
                return _setVisibilitySpecified;
            }
            set
            {
                _setVisibilitySpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool setEnabledSpecified
        {
            get
            {
                return _setEnabledSpecified;
            }
            set
            {
                _setEnabledSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool setExpandedSpecified
        {
            get
            {
                return _setExpandedSpecified;
            }
            set
            {
                _setExpandedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool X_removeResponsesWhenDeactivatedSpecified
        {
            get
            {
                return _x_removeResponsesWhenDeactivatedSpecified;
            }
            set
            {
                _x_removeResponsesWhenDeactivatedSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum toggleType
    {
        @true,
        @false,
        toggle,
        ignore,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ValidationType")]
    public partial class ValidationType : ExtensionBaseType
    {
        #region Private fields
        private List<FuncBoolBaseType> _items;
        private bool _itemsSpecified;
        #endregion

        [XmlElement("ItemAlternatives", typeof(PredAlternativesType), Order = 0)]
        [XmlElement("SelectionSets", typeof(ValidationTypeSelectionSets), Order = 0)]
        [XmlElement("SelectionTest", typeof(ValidationTypeSelectionTest), Order = 0)]
        public virtual List<FuncBoolBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<FuncBoolBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule tests if one (or more) items in a list of items has received
    /// a a valid user response (answer). In the simplest case, this Rule allows a user to
    /// answer only one of several alternative questions (named in the @itemNames list), and
    /// still save a successfully-validated form. In more complex cases, a user can be
    /// required to produce a valid response to a specific minimum and maximum number of
    /// Questions, Sections, ListItems or Injected parts. The minCard value on each of the
    /// alternative items should be set to "0" (i.e., optional) to avoid validation
    /// conflicts when minCard greater than 0. The list of Item @name values is contained in
    /// @itemNames. The list must contain at least 2 @name values. The minimum number of
    /// items to answer is contained in @minAnswered (default value = 1). If there is a
    /// maximum number of items to answer, the value is contained in @maxAnswered (default
    /// value = 0 meaning unlimited).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredAlternativesType")]
    public partial class PredAlternativesType : FuncBoolBaseType
    {
        #region Private fields
        private bool _not;
        private int _minAnswered;
        private int _maxAnswered;
        private string _itemNames;
        private bool _notSpecified;
        private bool _minAnsweredSpecified;
        private bool _maxAnsweredSpecified;
        private bool _itemNamesSpecified;
        #endregion

        /// <summary>
        /// PredAlternativesType class constructor
        /// </summary>
        public PredAlternativesType()
        {
            _not = false;
            _minAnswered = 1;
            _maxAnswered = 0;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(1)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int minAnswered
        {
            get
            {
                return _minAnswered;
            }
            set
            {
                _minAnswered = value;
            }
        }

        /// <summary>
        /// @maxAnswered must be 0 or greater than or equal to
        /// @minAnswered.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(0)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual int maxAnswered
        {
            get
            {
                return _maxAnswered;
            }
            set
            {
                _maxAnswered = value;
            }
        }

        /// <summary>
        /// List of names of Sections, Questions, ListItems and/or
        /// InjectedItems. Each of the named items will evaluate to true or false,
        /// based on the following validation rules: If the name points to a
        /// Section, then the Section evaluates to true (valid) if all of its
        /// descendant items are answered correctly, according to their metadata. If
        /// the name points to a Question then the Question evaluates to true
        /// (valid) if it is correctly answered according to its metadata, and also,
        /// all descendant items are answered correctly, according to their
        /// metadata. If the name points to a ListItem then the ListItem evaluates
        /// to true (valid) if it is selected, and also, all descendant items are
        /// answered correctly according to their metadata. If the name points to an
        /// InjectedItem then the InjectedItem evaluates to true (valid) if all
        /// descendant items are answered correctly, according to their metadata.
        /// The number of true responses are added together. If they satisfy the
        /// minAnswered and maxAnswered attribute values, then this type returns
        /// true. Otherwise it returns false.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string itemNames
        {
            get
            {
                return _itemNames;
            }
            set
            {
                _itemNames = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minAnsweredSpecified
        {
            get
            {
                return _minAnsweredSpecified;
            }
            set
            {
                _minAnsweredSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxAnsweredSpecified
        {
            get
            {
                return _maxAnsweredSpecified;
            }
            set
            {
                _maxAnsweredSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool itemNamesSpecified
        {
            get
            {
                return _itemNamesSpecified;
            }
            set
            {
                _itemNamesSpecified = value;
            }
        }
    }

    /// <summary>
    /// Function or web service that returns a Boolean value.  Items that inherit from this class must test the result for being a Boolean true/false value or null.
    /// </summary>
    [XmlInclude(typeof(PredAlternativesType))]
    [XmlInclude(typeof(PredGuardType))]
    [XmlInclude(typeof(PredMultiSelectionSetBoolType))]
    [XmlInclude(typeof(MultiSelectionsActionType))]
    [XmlInclude(typeof(PredEvalAttribValuesType))]
    [XmlInclude(typeof(AttributeEvalActionType))]
    [XmlInclude(typeof(PredActionType))]
    [XmlInclude(typeof(EventType))]
    [XmlInclude(typeof(OnEventType))]
    [XmlInclude(typeof(PredSingleSelectionSetsType))]
    [XmlInclude(typeof(SelectionSetsActionType))]
    [XmlInclude(typeof(PredSelectionTestType))]
    [XmlInclude(typeof(SelectionTestActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("FuncBoolBaseType")]
    public abstract partial class FuncBoolBaseType : ExtensionBaseType
    {
        #region Private fields
        private bool _allowNull;
        private string _validationMessage;
        private bool? _returnVal;
        private bool _allowNullSpecified;
        private bool _validationMessageSpecified;
        #endregion

        /// <summary>
        /// FuncBoolBaseType class constructor
        /// </summary>
        public FuncBoolBaseType()
        {
            _allowNull = true;
        }

        /// <summary>
        /// True means that null values are allowed in @returnVal.  This corresponds to an empty string in @val or a missing @returnVal attribute.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowNull
        {
            get
            {
                return _allowNull;
            }
            set
            {
                _allowNull = value;
            }
        }

        /// <summary>
        /// Optional message that appears when the rule evaluates to true
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string validationMessage
        {
            get
            {
                return _validationMessage;
            }
            set
            {
                _validationMessage = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool returnVal
        {
            get
            {
                if (_returnVal.HasValue)
                {
                    return _returnVal.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _returnVal = value;
            }
        }

        [XmlIgnore]
        public virtual bool returnValSpecified
        {
            get
            {
                return _returnVal.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _returnVal = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowNullSpecified
        {
            get
            {
                return _allowNullSpecified;
            }
            set
            {
                _allowNullSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validationMessageSpecified
        {
            get
            {
                return _validationMessageSpecified;
            }
            set
            {
                _validationMessageSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredGuardType")]
    public partial class PredGuardType : FuncBoolBaseType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private bool _not;
        private PredEvalAttribValuesTypeBoolOp _boolOp;
        private bool _itemsSpecified;
        private bool _notSpecified;
        private bool _boolOpSpecified;
        #endregion

        /// <summary>
        /// PredGuardType class constructor
        /// </summary>
        public PredGuardType()
        {
            _not = false;
            _boolOp = PredEvalAttribValuesTypeBoolOp.AND;
        }

        [XmlElement("AttributeEval", typeof(PredEvalAttribValuesType), Order = 0)]
        [XmlElement("CallBoolFunc", typeof(CallFuncBoolType), Order = 0)]
        [XmlElement("Group", typeof(PredGuardType), Order = 0)]
        [XmlElement("ItemAlternatives", typeof(PredAlternativesType), Order = 0)]
        [XmlElement("MultiSelections", typeof(PredMultiSelectionSetBoolType), Order = 0)]
        [XmlElement("ScriptBoolFunc", typeof(ScriptCodeBoolType), Order = 0)]
        [XmlElement("SelectionSets", typeof(PredGuardTypeSelectionSets), Order = 0)]
        [XmlElement("SelectionTest", typeof(PredSelectionTestType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(PredEvalAttribValuesTypeBoolOp.AND)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual PredEvalAttribValuesTypeBoolOp boolOp
        {
            get
            {
                return _boolOp;
            }
            set
            {
                _boolOp = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool boolOpSpecified
        {
            get
            {
                return _boolOpSpecified;
            }
            set
            {
                _boolOpSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule evaluates an arbitrary set of attribute values from any item
    /// and returns a Boolean summary value. In the PropertyValues condition, the contained
    /// Boolean attributed values are ANDed together (by default) to return a derived
    /// Boolean value. Default values are used if the attribute is not explicitly set to a
    /// value. For attributes without default values, omitted (null) values are ignored and
    /// are not used for null propagation.
    /// </summary>
    [XmlInclude(typeof(AttributeEvalActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredEvalAttribValuesType")]
    public partial class PredEvalAttribValuesType : FuncBoolBaseType
    {
        #region Private fields
        private bool _not;
        private PredEvalAttribValuesTypeBoolOp _boolOp;
        private string _itemNames;
        private bool? _isSelected;
        private bool? _isActive;
        private string _hasSelectionsGTE;
        private string _hasSelectionsLTE;
        private string _hasSelectionsExact;
        private bool? _hasResponse;
        private bool? _isVisible;
        private bool? _isEnabled;
        private bool? _isRequired;
        private bool? _isReadOnly;
        private string _hasType;
        private string _hasStyleClass;
        private bool? _hasValue;
        private string _supportDatesAndIntervals;
        private string _hasPattern;
        private string _hasValueEQ;
        private string _hasValueLT;
        private string _hasValueLTE;
        private string _hasValueGT;
        private string _hasValueGTE;
        private string _hasAssociatedValueEQ;
        private string _hasAssociatedValueLT;
        private string _hasAssociatedValueLTE;
        private string _hasAssociatedValueGT;
        private string _hasAssociatedValueGTE;
        private bool _notSpecified;
        private bool _boolOpSpecified;
        private bool _itemNamesSpecified;
        private bool _hasSelectionsGTESpecified;
        private bool _hasSelectionsLTESpecified;
        private bool _hasSelectionsExactSpecified;
        private bool _hasTypeSpecified;
        private bool _hasStyleClassSpecified;
        private bool _supportDatesAndIntervalsSpecified;
        private bool _hasPatternSpecified;
        private bool _hasValueEQSpecified;
        private bool _hasValueLTSpecified;
        private bool _hasValueLTESpecified;
        private bool _hasValueGTSpecified;
        private bool _hasValueGTESpecified;
        private bool _hasAssociatedValueEQSpecified;
        private bool _hasAssociatedValueLTSpecified;
        private bool _hasAssociatedValueLTESpecified;
        private bool _hasAssociatedValueGTSpecified;
        private bool _hasAssociatedValueGTESpecified;
        #endregion

        /// <summary>
        /// PredEvalAttribValuesType class constructor
        /// </summary>
        public PredEvalAttribValuesType()
        {
            _not = false;
            _boolOp = PredEvalAttribValuesTypeBoolOp.AND;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(PredEvalAttribValuesTypeBoolOp.AND)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual PredEvalAttribValuesTypeBoolOp boolOp
        {
            get
            {
                return _boolOp;
            }
            set
            {
                _boolOp = value;
            }
        }

        /// <summary>
        /// Required. This attribute holds the @name attributes of the
        /// item(s) (Section, Question, List Item) to interrogate. These named items
        /// will be searched for attribute values specified in this Type. If a named
        /// item does not have a particualr attribute, then the attribute condition
        /// is ignored for that named item. It does not generate an error or a null
        /// propagation response.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string itemNames
        {
            get
            {
                return _itemNames;
            }
            set
            {
                _itemNames = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isSelected
        {
            get
            {
                if (_isSelected.HasValue)
                {
                    return _isSelected.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isSelected = value;
            }
        }

        [XmlIgnore]
        public virtual bool isSelectedSpecified
        {
            get
            {
                return _isSelected.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isSelected = null;
                }
            }
        }

        /// <summary>
        /// If visible and enabled are both true, then isActive is
        /// true. Otherwise, it is false.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isActive
        {
            get
            {
                if (_isActive.HasValue)
                {
                    return _isActive.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isActive = value;
            }
        }

        [XmlIgnore]
        public virtual bool isActiveSpecified
        {
            get
            {
                return _isActive.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isActive = null;
                }
            }
        }

        /// <summary>
        /// Applies only to Questions that have selection lists
        /// (ListItems or LookupField). Evaluates to true if the number of selected
        /// items equals or exceeds the entered value.
        /// </summary>
        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasSelectionsGTE
        {
            get
            {
                return _hasSelectionsGTE;
            }
            set
            {
                _hasSelectionsGTE = value;
            }
        }

        /// <summary>
        /// Applies only to Questions that have selection lists
        /// (ListItems or LookupField). Evaluates to true if the number of selected
        /// items is less than or equal to the entered value.
        /// </summary>
        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasSelectionsLTE
        {
            get
            {
                return _hasSelectionsLTE;
            }
            set
            {
                _hasSelectionsLTE = value;
            }
        }

        /// <summary>
        /// Applies only to Questions that have selection lists
        /// (ListItems or LookupField). Evaluates to true if the number of selected
        /// items equals the entered value.
        /// </summary>
        [XmlAttribute(DataType = "nonNegativeInteger")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasSelectionsExact
        {
            get
            {
                return _hasSelectionsExact;
            }
            set
            {
                _hasSelectionsExact = value;
            }
        }

        /// <summary>
        /// Applies only to items that have Response Fields (Questions
        /// and ListItems). If the ListItem or Question has a Response Field, and
        /// that field has a value in it, this property returns true. If it does not
        /// have a value, it returns false. If no Response Field is present, it
        /// retuns null and is not used for Boolean comparisons.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool hasResponse
        {
            get
            {
                if (_hasResponse.HasValue)
                {
                    return _hasResponse.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _hasResponse = value;
            }
        }

        [XmlIgnore]
        public virtual bool hasResponseSpecified
        {
            get
            {
                return _hasResponse.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _hasResponse = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isVisible
        {
            get
            {
                if (_isVisible.HasValue)
                {
                    return _isVisible.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isVisible = value;
            }
        }

        [XmlIgnore]
        public virtual bool isVisibleSpecified
        {
            get
            {
                return _isVisible.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isVisible = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isEnabled
        {
            get
            {
                if (_isEnabled.HasValue)
                {
                    return _isEnabled.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isEnabled = value;
            }
        }

        [XmlIgnore]
        public virtual bool isEnabledSpecified
        {
            get
            {
                return _isEnabled.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isEnabled = null;
                }
            }
        }

        /// <summary>
        /// If the minCard value is greater than 0, then isRequired =
        /// "true" If the minCard = "0" then isRequired = "false"
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isRequired
        {
            get
            {
                if (_isRequired.HasValue)
                {
                    return _isRequired.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isRequired = value;
            }
        }

        [XmlIgnore]
        public virtual bool isRequiredSpecified
        {
            get
            {
                return _isRequired.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isRequired = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool isReadOnly
        {
            get
            {
                if (_isReadOnly.HasValue)
                {
                    return _isReadOnly.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _isReadOnly = value;
            }
        }

        [XmlIgnore]
        public virtual bool isReadOnlySpecified
        {
            get
            {
                return _isReadOnly.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _isReadOnly = null;
                }
            }
        }

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasType
        {
            get
            {
                return _hasType;
            }
            set
            {
                _hasType = value;
            }
        }

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasStyleClass
        {
            get
            {
                return _hasStyleClass;
            }
            set
            {
                _hasStyleClass = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool hasValue
        {
            get
            {
                if (_hasValue.HasValue)
                {
                    return _hasValue.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _hasValue = value;
            }
        }

        [XmlIgnore]
        public virtual bool hasValueSpecified
        {
            get
            {
                return _hasValue.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _hasValue = null;
                }
            }
        }

        [XmlAttribute("supportDatesAndIntervals...")]
        [JsonProperty("supportDatesAndIntervals...", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string supportDatesAndIntervals
        {
            get
            {
                return _supportDatesAndIntervals;
            }
            set
            {
                _supportDatesAndIntervals = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasPattern
        {
            get
            {
                return _hasPattern;
            }
            set
            {
                _hasPattern = value;
            }
        }

        /// <summary>
        /// If the value is peceded by a colon (:) sign, then it is a
        /// reference to the @val attribute of another element. References can refer
        /// to any element with an @val attribute or @propVal on a Property. The
        /// datatype must be cast to the appropriate target
        /// datatype.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasValueEQ
        {
            get
            {
                return _hasValueEQ;
            }
            set
            {
                _hasValueEQ = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasValueLT
        {
            get
            {
                return _hasValueLT;
            }
            set
            {
                _hasValueLT = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasValueLTE
        {
            get
            {
                return _hasValueLTE;
            }
            set
            {
                _hasValueLTE = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasValueGT
        {
            get
            {
                return _hasValueGT;
            }
            set
            {
                _hasValueGT = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasValueGTE
        {
            get
            {
                return _hasValueGTE;
            }
            set
            {
                _hasValueGTE = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasAssociatedValueEQ
        {
            get
            {
                return _hasAssociatedValueEQ;
            }
            set
            {
                _hasAssociatedValueEQ = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasAssociatedValueLT
        {
            get
            {
                return _hasAssociatedValueLT;
            }
            set
            {
                _hasAssociatedValueLT = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasAssociatedValueLTE
        {
            get
            {
                return _hasAssociatedValueLTE;
            }
            set
            {
                _hasAssociatedValueLTE = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasAssociatedValueGT
        {
            get
            {
                return _hasAssociatedValueGT;
            }
            set
            {
                _hasAssociatedValueGT = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string hasAssociatedValueGTE
        {
            get
            {
                return _hasAssociatedValueGTE;
            }
            set
            {
                _hasAssociatedValueGTE = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool boolOpSpecified
        {
            get
            {
                return _boolOpSpecified;
            }
            set
            {
                _boolOpSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool itemNamesSpecified
        {
            get
            {
                return _itemNamesSpecified;
            }
            set
            {
                _itemNamesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasSelectionsGTESpecified
        {
            get
            {
                return _hasSelectionsGTESpecified;
            }
            set
            {
                _hasSelectionsGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasSelectionsLTESpecified
        {
            get
            {
                return _hasSelectionsLTESpecified;
            }
            set
            {
                _hasSelectionsLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasSelectionsExactSpecified
        {
            get
            {
                return _hasSelectionsExactSpecified;
            }
            set
            {
                _hasSelectionsExactSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasTypeSpecified
        {
            get
            {
                return _hasTypeSpecified;
            }
            set
            {
                _hasTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasStyleClassSpecified
        {
            get
            {
                return _hasStyleClassSpecified;
            }
            set
            {
                _hasStyleClassSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool supportDatesAndIntervalsSpecified
        {
            get
            {
                return _supportDatesAndIntervalsSpecified;
            }
            set
            {
                _supportDatesAndIntervalsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasPatternSpecified
        {
            get
            {
                return _hasPatternSpecified;
            }
            set
            {
                _hasPatternSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasValueEQSpecified
        {
            get
            {
                return _hasValueEQSpecified;
            }
            set
            {
                _hasValueEQSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasValueLTSpecified
        {
            get
            {
                return _hasValueLTSpecified;
            }
            set
            {
                _hasValueLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasValueLTESpecified
        {
            get
            {
                return _hasValueLTESpecified;
            }
            set
            {
                _hasValueLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasValueGTSpecified
        {
            get
            {
                return _hasValueGTSpecified;
            }
            set
            {
                _hasValueGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasValueGTESpecified
        {
            get
            {
                return _hasValueGTESpecified;
            }
            set
            {
                _hasValueGTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasAssociatedValueEQSpecified
        {
            get
            {
                return _hasAssociatedValueEQSpecified;
            }
            set
            {
                _hasAssociatedValueEQSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasAssociatedValueLTSpecified
        {
            get
            {
                return _hasAssociatedValueLTSpecified;
            }
            set
            {
                _hasAssociatedValueLTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasAssociatedValueLTESpecified
        {
            get
            {
                return _hasAssociatedValueLTESpecified;
            }
            set
            {
                _hasAssociatedValueLTESpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasAssociatedValueGTSpecified
        {
            get
            {
                return _hasAssociatedValueGTSpecified;
            }
            set
            {
                _hasAssociatedValueGTSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool hasAssociatedValueGTESpecified
        {
            get
            {
                return _hasAssociatedValueGTESpecified;
            }
            set
            {
                _hasAssociatedValueGTESpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum PredEvalAttribValuesTypeBoolOp
    {
        AND,
        OR,
        XOR,
    }

    /// <summary>
    /// This Rule component evaluates the @selected status of any set of
    /// ListItems at runtime, and returns a true or false value based on the @selected
    /// status of each ListItem.
    /// </summary>
    [XmlInclude(typeof(MultiSelectionsActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredMultiSelectionSetBoolType")]
    public partial class PredMultiSelectionSetBoolType : FuncBoolBaseType
    {
        #region Private fields
        private string _selectedItemSet;
        private bool _selectedItemSetSpecified;
        #endregion

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string selectedItemSet
        {
            get
            {
                return _selectedItemSet;
            }
            set
            {
                _selectedItemSet = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectedItemSetSpecified
        {
            get
            {
                return _selectedItemSetSpecified;
            }
            set
            {
                _selectedItemSetSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("MultiSelectionsActionType")]
    public partial class MultiSelectionsActionType : PredMultiSelectionSetBoolType
    {
        #region Private fields
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }
    }

    /// <summary>
    /// Programming code or pseudocode that describes a calculation.  The code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
    /// </summary>
    [XmlInclude(typeof(ScriptBoolFuncActionType))]
    [XmlInclude(typeof(ActSetBoolAttributeValueCodeType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ScriptCodeBoolType")]
    public partial class ScriptCodeBoolType : ScriptCodeBaseType
    {
        #region Private fields
        private bool _not;
        private string _validationMessage;
        private bool _notSpecified;
        private bool _validationMessageSpecified;
        #endregion

        /// <summary>
        /// ScriptCodeBoolType class constructor
        /// </summary>
        public ScriptCodeBoolType()
        {
            _not = false;
        }

        /// <summary>
        /// If @not="true" then the logical value of the conditions of the parent element is negated; true becomes false and false becomes true.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        /// <summary>
        /// Optional message that appears when the rule evaluates to true
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string validationMessage
        {
            get
            {
                return _validationMessage;
            }
            set
            {
                _validationMessage = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool validationMessageSpecified
        {
            get
            {
                return _validationMessageSpecified;
            }
            set
            {
                _validationMessageSpecified = value;
            }
        }
    }

    /// <summary>
    /// Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
    /// </summary>
    [XmlInclude(typeof(ScriptCodeAnyType))]
    [XmlInclude(typeof(ActSetAttrValueScriptType))]
    [XmlInclude(typeof(ScriptCodeBoolType))]
    [XmlInclude(typeof(ScriptBoolFuncActionType))]
    [XmlInclude(typeof(ActSetBoolAttributeValueCodeType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ScriptCodeBaseType")]
    public abstract partial class ScriptCodeBaseType : ExtensionBaseType
    {
        #region Private fields
        private bool _returnList;
        private string _listDelimiter;
        private string _objectTypeName;
        private string _objectFormat;
        private bool _allowNull;
        private string _returnVal;
        private string _language;
        private string _code;
        private bool _returnListSpecified;
        private bool _listDelimiterSpecified;
        private bool _objectTypeNameSpecified;
        private bool _objectFormatSpecified;
        private bool _allowNullSpecified;
        private bool _returnValSpecified;
        private bool _languageSpecified;
        private bool _codeSpecified;
        #endregion

        /// <summary>
        /// ScriptCodeBaseType class constructor
        /// </summary>
        public ScriptCodeBaseType()
        {
            _returnList = false;
            _listDelimiter = "|";
            _allowNull = true;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool returnList
        {
            get
            {
                return _returnList;
            }
            set
            {
                _returnList = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("|")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string listDelimiter
        {
            get
            {
                return _listDelimiter;
            }
            set
            {
                _listDelimiter = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string objectTypeName
        {
            get
            {
                return _objectTypeName;
            }
            set
            {
                _objectTypeName = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string objectFormat
        {
            get
            {
                return _objectFormat;
            }
            set
            {
                _objectFormat = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool allowNull
        {
            get
            {
                return _allowNull;
            }
            set
            {
                _allowNull = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string returnVal
        {
            get
            {
                return _returnVal;
            }
            set
            {
                _returnVal = value;
            }
        }

        /// <summary>
        /// Programming language.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string language
        {
            get
            {
                return _language;
            }
            set
            {
                _language = value;
            }
        }

        /// <summary>
        /// Script contents.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string code
        {
            get
            {
                return _code;
            }
            set
            {
                _code = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool returnListSpecified
        {
            get
            {
                return _returnListSpecified;
            }
            set
            {
                _returnListSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool listDelimiterSpecified
        {
            get
            {
                return _listDelimiterSpecified;
            }
            set
            {
                _listDelimiterSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool objectTypeNameSpecified
        {
            get
            {
                return _objectTypeNameSpecified;
            }
            set
            {
                _objectTypeNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool objectFormatSpecified
        {
            get
            {
                return _objectFormatSpecified;
            }
            set
            {
                _objectFormatSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool allowNullSpecified
        {
            get
            {
                return _allowNullSpecified;
            }
            set
            {
                _allowNullSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool returnValSpecified
        {
            get
            {
                return _returnValSpecified;
            }
            set
            {
                _returnValSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool languageSpecified
        {
            get
            {
                return _languageSpecified;
            }
            set
            {
                _languageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool codeSpecified
        {
            get
            {
                return _codeSpecified;
            }
            set
            {
                _codeSpecified = value;
            }
        }
    }

    /// <summary>
    /// Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
    /// </summary>
    [XmlInclude(typeof(ActSetAttrValueScriptType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ScriptCodeAnyType")]
    public partial class ScriptCodeAnyType : ScriptCodeBaseType
    {
        #region Private fields
        private string _dataType;
        private bool _dataTypeSpecified;
        #endregion

        /// <summary>
        /// ScriptCodeAnyType class constructor
        /// </summary>
        public ScriptCodeAnyType()
        {
            _dataType = "string";
        }

        [XmlAttribute]
        [DefaultValue("string")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string dataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool dataTypeSpecified
        {
            get
            {
                return _dataTypeSpecified;
            }
            set
            {
                _dataTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type is used to act upon the value of common item properties. If
    /// an "act" property (a property with the "act" prefix) has no value assigned, it is
    /// ignored. If it has a value, then that property on the target item(s) assume(s) that
    /// stated value when an attached Boolean condition evaluates to true. The attached
    /// condition may be an "If" statement or any expression that evaluates to a Boolean
    /// value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSetAttrValueScriptType")]
    public partial class ActSetAttrValueScriptType : ScriptCodeAnyType
    {
        #region Private fields
        private ItemNameAttributeType _target;
        private bool _targetSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ItemNameAttributeType Target
        {
            get
            {
                if ((_target == null))
                {
                    _target = new ItemNameAttributeType();
                }
                return _target;
            }
            set
            {
                _target = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TargetSpecified
        {
            get
            {
                return _targetSpecified;
            }
            set
            {
                _targetSpecified = value;
            }
        }
    }

    /// <summary>
    /// Moved from SDCFormDesign The type is a standard way to point to a named item anywhere in a
    /// FormDesign template. A named item is any element that has the @name attribute set to a unique
    /// value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ItemNameAttributeType")]
    public partial class ItemNameAttributeType : ItemNameType
    {
        #region Private fields
        private string _attributeName;
        private bool _attributeNameSpecified;
        #endregion

        /// <summary>
        /// ItemNameAttributeType class constructor
        /// </summary>
        public ItemNameAttributeType()
        {
            _attributeName = "val";
        }

        [XmlAttribute(DataType = "NCName")]
        [DefaultValue("val")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string attributeName
        {
            get
            {
                return _attributeName;
            }
            set
            {
                _attributeName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool attributeNameSpecified
        {
            get
            {
                return _attributeNameSpecified;
            }
            set
            {
                _attributeNameSpecified = value;
            }
        }
    }

    /// <summary>
    /// Moved from SDCFormDesign The type is a standard way to point to a named item anywhere in a
    /// FormDesign template. A named item is any element that has the @name attribute set to a unique
    /// value.
    /// </summary>
    [XmlInclude(typeof(ActAddCodeType))]
    [XmlInclude(typeof(ItemNameAttributeType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ItemNameType")]
    public partial class ItemNameType : ExtensionBaseType
    {
        #region Private fields
        private string _itemName;
        private bool _itemNameSpecified;
        #endregion

        /// <summary>
        /// The @name attribute of the referenced element.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string itemName
        {
            get
            {
                return _itemName;
            }
            set
            {
                _itemName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool itemNameSpecified
        {
            get
            {
                return _itemNameSpecified;
            }
            set
            {
                _itemNameSpecified = value;
            }
        }
    }

    /// <summary>
    /// Add all or part of a coding section to the designated target
    /// site.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActAddCodeType")]
    public partial class ActAddCodeType : ItemNameType
    {
        #region Private fields
        private CodingType _code;
        private bool _codeSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CodingType Code
        {
            get
            {
                if ((_code == null))
                {
                    _code = new CodingType();
                }
                return _code;
            }
            set
            {
                _code = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodeSpecified
        {
            get
            {
                return _codeSpecified;
            }
            set
            {
                _codeSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ScriptBoolFuncActionType")]
    public partial class ScriptBoolFuncActionType : ScriptCodeBoolType
    {
        #region Private fields
        private ExtensionBaseType[] _items;
        private ItemsChoiceType[] _itemsElementName;
        private bool _itemsSpecified;
        private bool _itemsElementNameSpecified;
        #endregion

        [XmlElement("Actions", typeof(ActionsType), Order = 0)]
        [XmlElement("ConditionalActions", typeof(PredActionType), Order = 0)]
        [XmlElement("Else", typeof(PredActionType), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public virtual ExtensionBaseType[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlElement("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public virtual ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsElementNameSpecified
        {
            get
            {
                return _itemsElementNameSpecified;
            }
            set
            {
                _itemsElementNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemsChoiceType
    {
        Actions,
        ConditionalActions,
        Else,
    }

    /// <summary>
    /// Sets the value of any named attribute. However, it is primarily
    /// designed for Response element(s) on a Question or ListItem. The value may be
    /// determined by a literal value with a defined data type, the value at another named
    /// Response item, an expression written in a specified scripting or programming
    /// language, or the value of a named code listed in the same
    /// template.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActSetBoolAttributeValueCodeType")]
    public partial class ActSetBoolAttributeValueCodeType : ScriptCodeBoolType
    {
        #region Private fields
        private string _elementName;
        private string _attributeName;
        private string _x_targetNames;
        private bool _elementNameSpecified;
        private bool _attributeNameSpecified;
        private bool _x_targetNamesSpecified;
        #endregion

        /// <summary>
        /// ActSetBoolAttributeValueCodeType class constructor
        /// </summary>
        public ActSetBoolAttributeValueCodeType()
        {
            _attributeName = "val";
        }

        /// <summary>
        /// The @name attribute of the referenced
        /// element.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string elementName
        {
            get
            {
                return _elementName;
            }
            set
            {
                _elementName = value;
            }
        }

        /// <summary>
        /// The name of any attribute on a named
        /// element.
        /// </summary>
        [XmlAttribute(DataType = "NCName")]
        [DefaultValue("val")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string attributeName
        {
            get
            {
                return _attributeName;
            }
            set
            {
                _attributeName = value;
            }
        }

        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string X_targetNames
        {
            get
            {
                return _x_targetNames;
            }
            set
            {
                _x_targetNames = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool elementNameSpecified
        {
            get
            {
                return _elementNameSpecified;
            }
            set
            {
                _elementNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool attributeNameSpecified
        {
            get
            {
                return _attributeNameSpecified;
            }
            set
            {
                _attributeNameSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool X_targetNamesSpecified
        {
            get
            {
                return _x_targetNamesSpecified;
            }
            set
            {
                _x_targetNamesSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredGuardTypeSelectionSets")]
    public partial class PredGuardTypeSelectionSets : PredSingleSelectionSetsType
    {
        #region Private fields
        private bool _not;
        private bool _notSpecified;
        #endregion

        /// <summary>
        /// PredGuardTypeSelectionSets class constructor
        /// </summary>
        public PredGuardTypeSelectionSets()
        {
            _not = false;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule tests combinations of co-selected ListItems (answers). If
    /// more than X items in the @listItemNames list are selected, then the result returns
    /// the value of true. Otherwise it is false. X is specified in @maxSelections, and the
    /// default is 1. The most common use is to detect ListItem combinations that may not be
    /// selected together. In most cases, all ListItems should be children of one
    /// multi-select question. Delete this: Legal ("allowed") selections evaluate to false
    /// Illegal selections evaluate to true These values can be reversed if @not is set to
    /// true Renamed from: IllegalSelectionSets
    /// </summary>
    [XmlInclude(typeof(SelectionSetsActionType))]
    [XmlInclude(typeof(PredSelectionTestType))]
    [XmlInclude(typeof(SelectionTestActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredSingleSelectionSetsType")]
    public partial class PredSingleSelectionSetsType : FuncBoolBaseType
    {
        #region Private fields
        private string _listItemNames;
        private short _maxSelections;
        private bool _listItemNamesSpecified;
        private bool _maxSelectionsSpecified;
        #endregion

        /// <summary>
        /// PredSingleSelectionSetsType class constructor
        /// </summary>
        public PredSingleSelectionSetsType()
        {
            _maxSelections = ((short)(1));
        }

        /// <summary>
        /// Set of @name references for a set ListItems, delimited by
        /// spaces.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string listItemNames
        {
            get
            {
                return _listItemNames;
            }
            set
            {
                _listItemNames = value;
            }
        }

        /// <summary>
        /// The maximum number of ListItems in @listItemNames that may
        /// be selected at one time.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(short), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual short maxSelections
        {
            get
            {
                return _maxSelections;
            }
            set
            {
                _maxSelections = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool listItemNamesSpecified
        {
            get
            {
                return _listItemNamesSpecified;
            }
            set
            {
                _listItemNamesSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxSelectionsSpecified
        {
            get
            {
                return _maxSelectionsSpecified;
            }
            set
            {
                _maxSelectionsSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("SelectionSetsActionType")]
    public partial class SelectionSetsActionType : PredSingleSelectionSetsType
    {
        #region Private fields
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _not;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        private bool _notSpecified;
        #endregion

        /// <summary>
        /// SelectionSetsActionType class constructor
        /// </summary>
        public SelectionSetsActionType()
        {
            _not = false;
        }

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }
    }

    /// <summary>
    /// This Rule specifies a set of ListItems that cannot be selected
    /// (@listItemNames) when a test ListItem (@testItemName) is selected. If any selection
    /// occurs in @listItemNames when @testItemName is selected, the rule evaluate to true.
    /// In all other cases, the rule evaluates to false. Multiple selections in
    /// @listItemNames are acceptable as long as @testItemName is unselected, and in this
    /// case, the rule evaluates to false. "Legal" (allowed) selections evaluate to false
    /// "Illegal" selections evaluate to true Renamed from:
    /// IllegalSelectionTest
    /// </summary>
    [XmlInclude(typeof(SelectionTestActionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("PredSelectionTestType")]
    public partial class PredSelectionTestType : PredSingleSelectionSetsType
    {
        #region Private fields
        private string _testItemName;
        private bool _testItemNameSpecified;
        #endregion

        /// <summary>
        /// The ListItem that is being evaluated for the presence of
        /// disallowed selections (in @listItemNames). This attributes contains the
        /// @name of one ListItem.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKEN")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string testItemName
        {
            get
            {
                return _testItemName;
            }
            set
            {
                _testItemName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool testItemNameSpecified
        {
            get
            {
                return _testItemNameSpecified;
            }
            set
            {
                _testItemNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("SelectionTestActionType")]
    public partial class SelectionTestActionType : PredSelectionTestType
    {
        #region Private fields
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ValidationTypeSelectionSets")]
    public partial class ValidationTypeSelectionSets : PredSingleSelectionSetsType
    {
        #region Private fields
        private bool _not;
        private bool _notSpecified;
        #endregion

        /// <summary>
        /// ValidationTypeSelectionSets class constructor
        /// </summary>
        public ValidationTypeSelectionSets()
        {
            _not = false;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ValidationTypeSelectionTest")]
    public partial class ValidationTypeSelectionTest : PredSelectionTestType
    {
        #region Private fields
        private bool _not;
        private bool _notSpecified;
        #endregion

        /// <summary>
        /// ValidationTypeSelectionTest class constructor
        /// </summary>
        public ValidationTypeSelectionTest()
        {
            _not = false;
        }

        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool not
        {
            get
            {
                return _not;
            }
            set
            {
                _not = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool notSpecified
        {
            get
            {
                return _notSpecified;
            }
            set
            {
                _notSpecified = value;
            }
        }
    }

    /// <summary>
    /// Rules are procedures that affect form behaviour. They are usually
    /// triggered by changes to the form by a form user. They may also be triggered by other
    /// rules or changes to form metadata (e.g., change to @visible). SDC decarative form
    /// rules consist of several types: Assertions are "predicate" expressions that evaulate
    /// to true or false, based upon the state of answers/responses or metadata within a
    /// form. An asserion is equivalent to the "If" part of an If-Then block. The
    /// implementation framework must assign a fucntion to handle any assertion that
    /// evaluates to False. Assertions are no handled by the form itself. If-Then-Else
    /// blocks run a "Then" action if the "If block evaluated to true, and an "Else" block
    /// if the "If" block evaluates to false. An AutoSelection rule automatically selects an
    /// answer choice (ListItem) when another answer (or set of answers) is selected or
    /// unselected. IllegalSelectionTest evaluates to true if a disallowed set of answer
    /// choices is selected at the same time. The implementation should take an action
    /// (alert user, cancel inout, etc) when a true result occurs. IllegalSelection Set
    /// restricts combinations of co-selected ListItems (answers). In other words, only zero
    /// or one item in this list may be selected at a time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RulesType")]
    public partial class RulesType : ExtensionBaseType
    {
        #region Private fields
        private List<ExtensionBaseType> _items;
        private bool _itemsSpecified;
        #endregion

        [XmlElement("AutoActivation", typeof(RuleAutoActivateType), Order = 0)]
        [XmlElement("AutoSelection", typeof(RuleAutoSelectType), Order = 0)]
        [XmlElement("ConditionalActions", typeof(PredActionType), Order = 0)]
        [XmlElement("ExternalRule", typeof(CallFuncActionType), Order = 0)]
        [XmlElement("ScriptedRule", typeof(ScriptCodeAnyType), Order = 0)]
        [XmlElement("SelectMatchingListItems", typeof(RuleSelectMatchingListItemsType), Order = 0)]
        [XmlElement("Validation", typeof(ValidationType), Order = 0)]
        public virtual List<ExtensionBaseType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<ExtensionBaseType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RuleSelectMatchingListItemsType")]
    public partial class RuleSelectMatchingListItemsType : ExtensionBaseType
    {
        #region Private fields
        private ItemNameAttributeType _matchSource;
        private RuleListItemMatchTargetsType _listItemMatchTargets;
        private bool _matchSourceSpecified;
        private bool _listItemMatchTargetsSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ItemNameAttributeType MatchSource
        {
            get
            {
                if ((_matchSource == null))
                {
                    _matchSource = new ItemNameAttributeType();
                }
                return _matchSource;
            }
            set
            {
                _matchSource = value;
            }
        }

        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RuleListItemMatchTargetsType ListItemMatchTargets
        {
            get
            {
                if ((_listItemMatchTargets == null))
                {
                    _listItemMatchTargets = new RuleListItemMatchTargetsType();
                }
                return _listItemMatchTargets;
            }
            set
            {
                _listItemMatchTargets = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MatchSourceSpecified
        {
            get
            {
                return _matchSourceSpecified;
            }
            set
            {
                _matchSourceSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ListItemMatchTargetsSpecified
        {
            get
            {
                return _listItemMatchTargetsSpecified;
            }
            set
            {
                _listItemMatchTargetsSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RuleListItemMatchTargetsType")]
    public partial class RuleListItemMatchTargetsType : ExtensionBaseType
    {
        #region Private fields
        private string _matchListItems;
        private string _matchQuestions;
        private RuleListItemMatchTargetsTypeAttributeToMatch _attributeToMatch;
        private bool _matchListItemsSpecified;
        private bool _matchQuestionsSpecified;
        private bool _attributeToMatchSpecified;
        #endregion

        /// <summary>
        /// RuleListItemMatchTargetsType class constructor
        /// </summary>
        public RuleListItemMatchTargetsType()
        {
            _attributeToMatch = RuleListItemMatchTargetsTypeAttributeToMatch.associatedValue;
        }

        /// <summary>
        /// Takes the @name of one or more target ListItem elements.
        /// If the source value matches the match supplied attribute criteria, then
        /// the ListItem(s) should be selcted. The named Question and target
        /// ListItem must be activated (visible and enabled) in order for it to be
        /// selected. Read-only ListItems can be selected in the same manner.
        /// Multiple ListItem names may be specified, separated by
        /// spaces.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string MatchListItems
        {
            get
            {
                return _matchListItems;
            }
            set
            {
                _matchListItems = value;
            }
        }

        /// <summary>
        /// Takes the @name of a Question element with ListItems. If
        /// the source value matches the @associatedValue (or other
        /// @attributeToMatch) of one or more ListItems, then the ListItem(s) should
        /// be selcted. The named Question and target ListItem must be activated
        /// (visible and enabled) in order for it to be selected. Read-only
        /// Questions/ListItems can be selected in the same manner. Multiple Queston
        /// names may be specified, separated by spaces.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string MatchQuestions
        {
            get
            {
                return _matchQuestions;
            }
            set
            {
                _matchQuestions = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(RuleListItemMatchTargetsTypeAttributeToMatch.associatedValue)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual RuleListItemMatchTargetsTypeAttributeToMatch attributeToMatch
        {
            get
            {
                return _attributeToMatch;
            }
            set
            {
                _attributeToMatch = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MatchListItemsSpecified
        {
            get
            {
                return _matchListItemsSpecified;
            }
            set
            {
                _matchListItemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool MatchQuestionsSpecified
        {
            get
            {
                return _matchQuestionsSpecified;
            }
            set
            {
                _matchQuestionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool attributeToMatchSpecified
        {
            get
            {
                return _attributeToMatchSpecified;
            }
            set
            {
                _attributeToMatchSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum RuleListItemMatchTargetsTypeAttributeToMatch
    {
        associatedValue,
        Code,
        TypeValue,
    }

    /// <summary>
    /// This type represents a list of specified answer choices. CHANGED
    /// 9/20/2016: Fix for serialization error which aggregated all DisplayedItems at the
    /// top of the ListItems. A Schematron (or similar validation tool) will be required to
    /// ensure that at least 2 ListItems are present for single-select questions, and one
    /// ListItem for multi-select questions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListType")]
    public partial class ListType : ExtensionBaseType
    {
        #region Private fields
        private List<DisplayedType> _items;
        private bool _itemsSpecified;
        #endregion

        [XmlElement("DisplayedItem", typeof(DisplayedType), Order = 0)]
        [XmlElement("ListItem", typeof(ListItemType), Order = 0)]
        public virtual List<DisplayedType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<DisplayedType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type represents any object that is designed to have a visual
    /// presence on a form, e.g., Sections, Questions, ListItems, Notes and Blobs. (Other
    /// items not inheriting this type may use an optional styleClass
    /// attribute.)
    /// </summary>
    [XmlInclude(typeof(ButtonItemType))]
    [XmlInclude(typeof(RepeatingType))]
    [XmlInclude(typeof(QuestionItemBaseType))]
    [XmlInclude(typeof(QuestionItemType))]
    [XmlInclude(typeof(SectionBaseType))]
    [XmlInclude(typeof(SectionItemType))]
    [XmlInclude(typeof(ListItemBaseType))]
    [XmlInclude(typeof(ListItemType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DisplayedType")]
    public partial class DisplayedType : IdentifiedExtensionType
    {
        #region Private fields
        private List<LinkType> _link;
        private List<BlobType> _blobContent;
        private List<ContactType> _contact;
        private List<CodingType> _codedValue;
        private List<EventType> _onEnter;
        private List<EventType> _onExit;
        private List<OnEventType> _onEvent;
        private PredGuardType _activateIf;
        private PredGuardType _deActivateIf;
        private string _title;
        private bool _enabled;
        private bool _visible;
        private bool _mustImplement;
        private DisplayedTypeShowInReport _showInReport;
        private bool _linkSpecified;
        private bool _blobContentSpecified;
        private bool _contactSpecified;
        private bool _codedValueSpecified;
        private bool _onEnterSpecified;
        private bool _onExitSpecified;
        private bool _onEventSpecified;
        private bool _activateIfSpecified;
        private bool _deActivateIfSpecified;
        private bool _titleSpecified;
        private bool _enabledSpecified;
        private bool _visibleSpecified;
        private bool _mustImplementSpecified;
        private bool _showInReportSpecified;
        #endregion

        /// <summary>
        /// DisplayedType class constructor
        /// </summary>
        public DisplayedType()
        {
            _enabled = true;
            _visible = true;
            _mustImplement = true;
            _showInReport = DisplayedTypeShowInReport.True;
        }

        /// <summary>
        /// Link to external information.
        /// </summary>
        [XmlElement("Link", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<LinkType> Link
        {
            get
            {
                return _link;
            }
            set
            {
                _link = value;
            }
        }

        /// <summary>
        /// Blob information associated with the current
        /// DisplayedType. The blob may contain any type of special media, but
        /// must be base 64 encoded.
        /// </summary>
        [XmlElement("BlobContent", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<BlobType> BlobContent
        {
            get
            {
                return _blobContent;
            }
            set
            {
                _blobContent = value;
            }
        }

        /// <summary>
        /// Any desired contact information regarding, e.g., the
        /// form item, authoring process, certifications, code or coding
        /// processs.
        /// </summary>
        [XmlElement("Contact", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<ContactType> Contact
        {
            get
            {
                return _contact;
            }
            set
            {
                _contact = value;
            }
        }

        /// <summary>
        /// Coding, terminology, classification, keyword, or local
        /// values
        /// </summary>
        [XmlElement("CodedValue", Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<CodingType> CodedValue
        {
            get
            {
                return _codedValue;
            }
            set
            {
                _codedValue = value;
            }
        }

        [XmlElement("OnEnter", Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> OnEnter
        {
            get
            {
                return _onEnter;
            }
            set
            {
                _onEnter = value;
            }
        }

        [XmlElement("OnExit", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> OnExit
        {
            get
            {
                return _onExit;
            }
            set
            {
                _onExit = value;
            }
        }

        /// <summary>
        /// Generic event handler - eventName must be
        /// specified.
        /// </summary>
        [XmlElement("OnEvent", Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<OnEventType> OnEvent
        {
            get
            {
                return _onEvent;
            }
            set
            {
                _onEvent = value;
            }
        }

        /// <summary>
        /// Activate the DisplayedType item if the guard
        /// conditions are met.
        /// </summary>
        [XmlElement(Order = 7)]
        [JsonProperty(Order = 7, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PredGuardType ActivateIf
        {
            get
            {
                return _activateIf;
            }
            set
            {
                _activateIf = value;
            }
        }

        /// <summary>
        /// DeActivate the DisplayedType item if the guard
        /// conditions are met.
        /// </summary>
        [XmlElement(Order = 8)]
        [JsonProperty(Order = 8, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PredGuardType DeActivateIf
        {
            get
            {
                return _deActivateIf;
            }
            set
            {
                _deActivateIf = value;
            }
        }

        /// <summary>
        /// The primary text to show on the form. Also known as
        /// "prompt" or "label" or "visibleText" or "caption"
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }

        /// <summary>
        /// Determines whether the user can interact with the
        /// displayed item when the form is first displayed. All disabled items are
        /// treated as read-only: they are visible but may not be edited. The
        /// attribute value is inherited by descendants.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool enabled
        {
            get
            {
                return _enabled;
            }
            set
            {
                _enabled = value;
            }
        }

        /// <summary>
        /// Determines whether the item should be visible on a
        /// computer screen when the form is first displayed. The attribute value is
        /// inherited by descendants.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool visible
        {
            get
            {
                return _visible;
            }
            set
            {
                _visible = value;
            }
        }

        /// <summary>
        /// If this attribute is set to "true" (the default), then the
        /// form implementation must make this item available for use on the form.
        /// If this attribute is set to "false" on a parent or ancestor item, then
        /// all child/descendant items inherit this "false" setting, even if they
        /// have this attribute set to "true." In other words, the child/descendent
        /// items do not need to be implemented if any parent/ancestor item has this
        /// attribute set to false.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool mustImplement
        {
            get
            {
                return _mustImplement;
            }
            set
            {
                _mustImplement = value;
            }
        }

        /// <summary>
        /// CHANGED to T/F/Optional If @showInReport on a Question is
        /// false, then the Question and its ListItems (if any) should not be
        /// present in a typical report derived from this template. If this
        /// attribute appears on a ListItem, then the entire question and all
        /// ListItems should be omitted from the report. If this attribute appears
        /// on a Section, then the entire Section and all Section contents
        /// (descendents) should be omitted from the report. If @showInReport
        /// appears on a DisplayedItem, then the DisplayedItem should be omitted
        /// from the report. This attribute is usually set to false when a Question
        /// is used to control form behavior (e.g., skip logic), or when the
        /// Question provides unhelpful "negative" information about actions that
        /// did not occur or were not performed, or things that were not
        /// observed.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(DisplayedTypeShowInReport.True)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual DisplayedTypeShowInReport showInReport
        {
            get
            {
                return _showInReport;
            }
            set
            {
                _showInReport = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LinkSpecified
        {
            get
            {
                return _linkSpecified;
            }
            set
            {
                _linkSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool BlobContentSpecified
        {
            get
            {
                return _blobContentSpecified;
            }
            set
            {
                _blobContentSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ContactSpecified
        {
            get
            {
                return _contactSpecified;
            }
            set
            {
                _contactSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool CodedValueSpecified
        {
            get
            {
                return _codedValueSpecified;
            }
            set
            {
                _codedValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnEnterSpecified
        {
            get
            {
                return _onEnterSpecified;
            }
            set
            {
                _onEnterSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnExitSpecified
        {
            get
            {
                return _onExitSpecified;
            }
            set
            {
                _onExitSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnEventSpecified
        {
            get
            {
                return _onEventSpecified;
            }
            set
            {
                _onEventSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActivateIfSpecified
        {
            get
            {
                return _activateIfSpecified;
            }
            set
            {
                _activateIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DeActivateIfSpecified
        {
            get
            {
                return _deActivateIfSpecified;
            }
            set
            {
                _deActivateIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool titleSpecified
        {
            get
            {
                return _titleSpecified;
            }
            set
            {
                _titleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool enabledSpecified
        {
            get
            {
                return _enabledSpecified;
            }
            set
            {
                _enabledSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool visibleSpecified
        {
            get
            {
                return _visibleSpecified;
            }
            set
            {
                _visibleSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool mustImplementSpecified
        {
            get
            {
                return _mustImplementSpecified;
            }
            set
            {
                _mustImplementSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool showInReportSpecified
        {
            get
            {
                return _showInReportSpecified;
            }
            set
            {
                _showInReportSpecified = value;
            }
        }
    }

    /// <summary>
    /// A hyperlink to an Internet endpoint such as a web page or web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("LinkType")]
    public partial class LinkType : ExtensionBaseType
    {
        #region Private fields
        private RichTextType _linkText;
        private anyURI_Stype _linkURI;
        private bool _linkTextSpecified;
        private bool _linkURISpecified;
        #endregion

        /// <summary>
        /// A description of the URI link, usually for display
        /// purposes.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType LinkText
        {
            get
            {
                return _linkText;
            }
            set
            {
                _linkText = value;
            }
        }

        /// <summary>
        /// Link to external information.
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual anyURI_Stype LinkURI
        {
            get
            {
                if ((_linkURI == null))
                {
                    _linkURI = new anyURI_Stype();
                }
                return _linkURI;
            }
            set
            {
                _linkURI = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LinkTextSpecified
        {
            get
            {
                return _linkTextSpecified;
            }
            set
            {
                _linkTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool LinkURISpecified
        {
            get
            {
                return _linkURISpecified;
            }
            set
            {
                _linkURISpecified = value;
            }
        }
    }

    /// <summary>
    /// Standard structure for including Binary Large Objects (Blobs) in XML templates. Blobs can
    /// handle any type of binary media, such as images, audio, video, and data streams of any specified format
    /// (such as a MIME type).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("BlobType")]
    public partial class BlobType : ExtensionBaseType
    {
        #region Private fields
        private List<RichTextType> _description;
        private HashType _hash;
        private BaseType _item;
        private string _mediaType;
        private string _fileExtension;
        private bool _descriptionSpecified;
        private bool _hashSpecified;
        private bool _itemSpecified;
        private bool _mediaTypeSpecified;
        private bool _fileExtensionSpecified;
        #endregion

        [XmlElement("Description", Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<RichTextType> Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Binary hash of the blob data
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual HashType Hash
        {
            get
            {
                return _hash;
            }
            set
            {
                _hash = value;
            }
        }

        [XmlElement("BinaryMediaBase64", typeof(base64Binary_Stype), Order = 2)]
        [XmlElement("BlobURI", typeof(anyURI_Stype), Order = 2)]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        /// <summary>
        /// TBD: Must be a valid MIME type - needs enumeration
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string mediaType
        {
            get
            {
                return _mediaType;
            }
            set
            {
                _mediaType = value;
            }
        }

        /// <summary>
        /// Use a common file extension (e.g., docx) if there is no @MIME_Type
        /// available
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string fileExtension
        {
            get
            {
                return _fileExtension;
            }
            set
            {
                _fileExtension = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DescriptionSpecified
        {
            get
            {
                return _descriptionSpecified;
            }
            set
            {
                _descriptionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool HashSpecified
        {
            get
            {
                return _hashSpecified;
            }
            set
            {
                _hashSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool mediaTypeSpecified
        {
            get
            {
                return _mediaTypeSpecified;
            }
            set
            {
                _mediaTypeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool fileExtensionSpecified
        {
            get
            {
                return _fileExtensionSpecified;
            }
            set
            {
                _fileExtensionSpecified = value;
            }
        }
    }

    /// <summary>
    /// Add a custom event handler to a form item such as a question, section
    /// or list item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("OnEventType")]
    public partial class OnEventType : EventType
    {
        #region Private fields
        private string _eventName;
        private bool _eventNameSpecified;
        #endregion

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string eventName
        {
            get
            {
                return _eventName;
            }
            set
            {
                _eventName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool eventNameSpecified
        {
            get
            {
                return _eventNameSpecified;
            }
            set
            {
                _eventNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum DisplayedTypeShowInReport
    {
        True,
        False,
        Optional,
    }

    /// <summary>
    /// This is the base type for all subtypes that require a unique URI
    /// identifier.
    /// </summary>
    [XmlInclude(typeof(FormDesignType))]
    [XmlInclude(typeof(InjectFormType))]
    [XmlInclude(typeof(ActInjectType))]
    [XmlInclude(typeof(DisplayedType))]
    [XmlInclude(typeof(ButtonItemType))]
    [XmlInclude(typeof(RepeatingType))]
    [XmlInclude(typeof(QuestionItemBaseType))]
    [XmlInclude(typeof(QuestionItemType))]
    [XmlInclude(typeof(SectionBaseType))]
    [XmlInclude(typeof(SectionItemType))]
    [XmlInclude(typeof(ListItemBaseType))]
    [XmlInclude(typeof(ListItemType))]
    [XmlInclude(typeof(DataElementType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("IdentifiedExtensionType")]
    public abstract partial class IdentifiedExtensionType : ExtensionBaseType
    {
        #region Private fields
        private string _id;
        private string _baseURI;
        private bool _iDSpecified;
        private bool _baseURISpecified;
        #endregion

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string ID
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string baseURI
        {
            get
            {
                return _baseURI;
            }
            set
            {
                _baseURI = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IDSpecified
        {
            get
            {
                return _iDSpecified;
            }
            set
            {
                _iDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool baseURISpecified
        {
            get
            {
                return _baseURISpecified;
            }
            set
            {
                _baseURISpecified = value;
            }
        }
    }

    /// <summary>
    /// CHANGED: This type represents a form or portion of a form that is
    /// imported into the current form at a specific location. It allows the composition of
    /// forms from other forms or parts of other forms. In practice, using an injected
    /// section will requiresome or all of the injected FormDesignXML to be injected under
    /// this the InjectForm element. For that reason, the schema supports those elements to
    /// appear inline. However, in a "raw" form (not yet filled out), the FormDesign element
    /// would generally be empty; only the top-level InjectFormType attributes would be used
    /// to point to the parts to be later injected. Form parts to be injected are specified
    /// by packageID, not FormID. This allows an injected form to be assocaited with helper
    /// files, or to return previosuly completed form parts containing responses.
    /// </summary>
    [XmlInclude(typeof(ActInjectType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("InjectFormType")]
    public partial class InjectFormType : IdentifiedExtensionType
    {
        #region Private fields
        private IdentifiedExtensionType _item;
        private string _injectionSourceURI;
        private string _rootItemID;
        private string _serverURI;
        private string _repeat;
        private string _instanceGUID;
        private string _parentGUID;
        private string _x_fullURI;
        private string _x_pkgFullURI;
        private string _x_pkgBaseURI;
        private bool _itemSpecified;
        private bool _injectionSourceURISpecified;
        private bool _rootItemIDSpecified;
        private bool _serverURISpecified;
        private bool _repeatSpecified;
        private bool _instanceGUIDSpecified;
        private bool _parentGUIDSpecified;
        private bool _x_fullURISpecified;
        private bool _x_pkgFullURISpecified;
        private bool _x_pkgBaseURISpecified;
        #endregion

        /// <summary>
        /// InjectFormType class constructor
        /// </summary>
        public InjectFormType()
        {
            _repeat = "0";
        }

        [XmlElement("FormDesign", typeof(FormDesignType), Order = 0)]
        [XmlElement("Question", typeof(QuestionItemType), Order = 0)]
        [XmlElement("Section", typeof(SectionItemType), Order = 0)]
        public virtual IdentifiedExtensionType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        /// <summary>
        /// NEW (2/24/2022): The source of the SDC FormDesign, Section or Question to inject
        /// The URI is formed from :
        /// 
        /// serverURI + \packageID (as described in the SDC Technical Reference Guide [TRG])
        /// Retrieves a package containing no FDF responses (contains FDF(s) only)
        /// -OR-
        /// serverURI + \fullURI (as described in the TRG)
        /// Retrieves the latest package version with FDF responses (contains the latest FDF-R content)
        /// -OR-
        /// serverURI +\instanceVersionURI (as described in the TRG)
        /// Retrieves a specific package version with FDF responses  (contains the FDF-R content from a specific point in time)
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string InjectionSourceURI
        {
            get
            {
                return _injectionSourceURI;
            }
            set
            {
                _injectionSourceURI = value;
            }
        }

        /// <summary>
        /// The rootItemID is the ID of the form or form part that
        /// will be injected. It must point to a valid FormDesign, Section or
        /// Question element.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string rootItemID
        {
            get
            {
                return _rootItemID;
            }
            set
            {
                _rootItemID = value;
            }
        }

        /// <summary>
        /// The server from which the injected package will be
        /// retrieved. Former name "pkgManagerURI"
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string serverURI
        {
            get
            {
                return _serverURI;
            }
            set
            {
                _serverURI = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [DefaultValue("0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string repeat
        {
            get
            {
                return _repeat;
            }
            set
            {
                _repeat = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string instanceGUID
        {
            get
            {
                return _instanceGUID;
            }
            set
            {
                _instanceGUID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string parentGUID
        {
            get
            {
                return _parentGUID;
            }
            set
            {
                _parentGUID = value;
            }
        }

        /// <summary>
        /// NEW: The full URI that uniquely identifies the current package instance.
        /// This URI does not vary with updated versions of the package instance.
        /// This URI does not include the server address, from which the package is retrieved (the Form Manager).
        /// (The Form Manager server address is found in pkgManagerURI).
        /// Removed 2/24/2022
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string X_fullURI
        {
            get
            {
                return _x_fullURI;
            }
            set
            {
                _x_fullURI = value;
            }
        }

        /// <summary>
        /// The injected package is retrieved form pkgManagerURI + "/" + pkgFullURI.
        /// If pkgFullURI is null, then then current FormDesign is used as the source for injection.
        /// Removed 2/24/2022
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string X_pkgFullURI
        {
            get
            {
                return _x_pkgFullURI;
            }
            set
            {
                _x_pkgFullURI = value;
            }
        }

        /// <summary>
        /// DRAFT: The baseURI of the package, which indicates the
        /// home source of the package.
        /// 
        /// pkgManagerURI + /pkgBaseURI + /pkgID
        /// are concatenated to retrieve an empty form, wrapped in SDCPackage.
        /// 
        /// pkgManagerURI + /pkgBaseURI + /pkgInstanceVersionURI
        /// are concatenated to retrieve a specific version of
        /// a populated form, wrapped in SDCPackage.
        /// 
        /// pkgManagerURI + /pkgBaseURI + /pkgInstanceURI
        /// are concatenated to retrieve the latest instance of a
        /// populated form, wrapped in SDCPackage.
        /// Removed 2/24/2022
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string X_pkgBaseURI
        {
            get
            {
                return _x_pkgBaseURI;
            }
            set
            {
                _x_pkgBaseURI = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool InjectionSourceURISpecified
        {
            get
            {
                return _injectionSourceURISpecified;
            }
            set
            {
                _injectionSourceURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool rootItemIDSpecified
        {
            get
            {
                return _rootItemIDSpecified;
            }
            set
            {
                _rootItemIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool serverURISpecified
        {
            get
            {
                return _serverURISpecified;
            }
            set
            {
                _serverURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool repeatSpecified
        {
            get
            {
                return _repeatSpecified;
            }
            set
            {
                _repeatSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool instanceGUIDSpecified
        {
            get
            {
                return _instanceGUIDSpecified;
            }
            set
            {
                _instanceGUIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool parentGUIDSpecified
        {
            get
            {
                return _parentGUIDSpecified;
            }
            set
            {
                _parentGUIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool X_fullURISpecified
        {
            get
            {
                return _x_fullURISpecified;
            }
            set
            {
                _x_fullURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool X_pkgFullURISpecified
        {
            get
            {
                return _x_pkgFullURISpecified;
            }
            set
            {
                _x_pkgFullURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool X_pkgBaseURISpecified
        {
            get
            {
                return _x_pkgBaseURISpecified;
            }
            set
            {
                _x_pkgBaseURISpecified = value;
            }
        }
    }

    /// <summary>
    /// Represents questions. Parent items may be Section, Question, and
    /// ListItem.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("QuestionItemType")]
    public partial class QuestionItemType : QuestionItemBaseType
    {
        #region Private fields
        private ChildItemsType _item1;
        private bool _item1Specified;
        #endregion

        [XmlElement("ChildItems", Order = 0)]
        [JsonProperty("ChildItems", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ChildItemsType Item1
        {
            get
            {
                if ((_item1 == null))
                {
                    _item1 = new ChildItemsType();
                }
                return _item1;
            }
            set
            {
                _item1 = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool Item1Specified
        {
            get
            {
                return _item1Specified;
            }
            set
            {
                _item1Specified = value;
            }
        }
    }

    /// <summary>
    /// ChildItems have descendants that are of type DisplayedType. They may
    /// include primary items of type SectionType, QuestionType, InjectFormType,
    /// DisplayedType and ButtonType, in any order. The ChildItem separates new child
    /// primary items from elements and attributes that are sub-parts of the parent primary
    /// item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ChildItemsType")]
    public partial class ChildItemsType : ExtensionBaseType
    {
        #region Private fields
        private List<IdentifiedExtensionType> _items;
        private bool _itemsSpecified;
        #endregion

        [XmlElement("ButtonAction", typeof(ButtonItemType), Order = 0)]
        [XmlElement("DisplayedItem", typeof(DisplayedType), Order = 0)]
        [XmlElement("InjectForm", typeof(InjectFormType), Order = 0)]
        [XmlElement("Question", typeof(QuestionItemType), Order = 0)]
        [XmlElement("Section", typeof(SectionItemType), Order = 0)]
        public virtual List<IdentifiedExtensionType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<IdentifiedExtensionType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }
    }

    /// <summary>
    /// The ButtonItem type represents a visual area for a user to click, and
    /// the click triggers a piece of "Action" code to run inside the form. The ButtonAction
    /// object may be represented with a visible button object, or some other type of visual
    /// paradigm. Other types of actions (e.g. key presses in a text field) may be handled
    /// with the form framework's event model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ButtonItemType")]
    public partial class ButtonItemType : DisplayedType
    {
        #region Private fields
        private List<EventType> _items;
        private bool _itemsSpecified;
        #endregion

        [XmlElement("OnClick", Order = 0)]
        [JsonProperty("OnClick", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<EventType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }
    }

    /// <summary>
    /// The Section is a grouper for all other types of objects. It may have a
    /// distinctive visual display (e.g. a box containing other displayed objects), and it
    /// may be used to treat Section descendants as a unit for special handling, such as
    /// hiding and showing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("SectionItemType")]
    public partial class SectionItemType : SectionBaseType
    {
        #region Private fields
        private ChildItemsType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("ChildItems", Order = 0)]
        [JsonProperty("ChildItems", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ChildItemsType Item
        {
            get
            {
                if ((_item == null))
                {
                    _item = new ChildItemsType();
                }
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    /// <summary>
    /// This base item is the same as the SectionItemType, except it lacks the
    /// recursion created by the inclusion of MainItems sub-group.
    /// </summary>
    [XmlInclude(typeof(SectionItemType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("SectionBaseType")]
    public abstract partial class SectionBaseType : RepeatingType
    {
        #region Private fields
        private bool _ordered;
        private bool? _changedData;
        private bool? _newData;
        private bool _orderedSpecified;
        #endregion

        /// <summary>
        /// SectionBaseType class constructor
        /// </summary>
        public SectionBaseType()
        {
            _ordered = true;
        }

        /// <summary>
        /// If false, then the form implementation may change the
        /// order of items in the section.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool ordered
        {
            get
            {
                return _ordered;
            }
            set
            {
                _ordered = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool changedData
        {
            get
            {
                if (_changedData.HasValue)
                {
                    return _changedData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _changedData = value;
            }
        }

        [XmlIgnore]
        public virtual bool changedDataSpecified
        {
            get
            {
                return _changedData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _changedData = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool newData
        {
            get
            {
                if (_newData.HasValue)
                {
                    return _newData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _newData = value;
            }
        }

        [XmlIgnore]
        public virtual bool newDataSpecified
        {
            get
            {
                return _newData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _newData = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool orderedSpecified
        {
            get
            {
                return _orderedSpecified;
            }
            set
            {
                _orderedSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type presents any display objects that may be repeated based upon
    /// on the user's interaction with the form objects. Items derived from this type
    /// include Sections and Questions.
    /// </summary>
    [XmlInclude(typeof(QuestionItemBaseType))]
    [XmlInclude(typeof(QuestionItemType))]
    [XmlInclude(typeof(SectionBaseType))]
    [XmlInclude(typeof(SectionItemType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("RepeatingType")]
    public abstract partial class RepeatingType : DisplayedType
    {
        #region Private fields
        private ushort _minCard;
        private ushort _maxCard;
        private string _repeat;
        private string _instanceGUID;
        private string _parentGUID;
        private bool _minCardSpecified;
        private bool _maxCardSpecified;
        private bool _repeatSpecified;
        private bool _instanceGUIDSpecified;
        private bool _parentGUIDSpecified;
        #endregion

        /// <summary>
        /// RepeatingType class constructor
        /// </summary>
        public RepeatingType()
        {
            _minCard = ((ushort)(1));
            _maxCard = ((ushort)(1));
            _repeat = "0";
        }

        /// <summary>
        /// @minCard is the minimum number of repetitions allowed for
        /// a section or question. The default value is 1, indicating that the user
        /// must answer any question(s) that has this attribute set. If @minCard is
        /// set to 0, then the item and all descendent questions are optional to
        /// answer.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(ushort), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort minCard
        {
            get
            {
                return _minCard;
            }
            set
            {
                _minCard = value;
            }
        }

        /// <summary>
        /// @maxCard is the maximum number of repetitions allowed for
        /// a section or question. The default value is 1, indicating that the
        /// section or question cannot be repeated on the data entry form. A value
        /// of 0 indicates that the number of repeats is unlimited. If @maxCard is
        /// not 0, then Must be greater than or equal to minCard.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(ushort), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort maxCard
        {
            get
            {
                return _maxCard;
            }
            set
            {
                _maxCard = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [DefaultValue("0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string repeat
        {
            get
            {
                return _repeat;
            }
            set
            {
                _repeat = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string instanceGUID
        {
            get
            {
                return _instanceGUID;
            }
            set
            {
                _instanceGUID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string parentGUID
        {
            get
            {
                return _parentGUID;
            }
            set
            {
                _parentGUID = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minCardSpecified
        {
            get
            {
                return _minCardSpecified;
            }
            set
            {
                _minCardSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxCardSpecified
        {
            get
            {
                return _maxCardSpecified;
            }
            set
            {
                _maxCardSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool repeatSpecified
        {
            get
            {
                return _repeatSpecified;
            }
            set
            {
                _repeatSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool instanceGUIDSpecified
        {
            get
            {
                return _instanceGUIDSpecified;
            }
            set
            {
                _instanceGUIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool parentGUIDSpecified
        {
            get
            {
                return _parentGUIDSpecified;
            }
            set
            {
                _parentGUIDSpecified = value;
            }
        }
    }

    /// <summary>
    /// Represents questions. Parent items may be Section, Question, and
    /// ListItem.
    /// </summary>
    [XmlInclude(typeof(QuestionItemType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("QuestionItemBaseType")]
    public abstract partial class QuestionItemBaseType : RepeatingType
    {
        #region Private fields
        private ExtensionBaseType _item;
        private bool _readOnly;
        private bool? _changedData;
        private bool? _newData;
        private bool _itemSpecified;
        private bool _readOnlySpecified;
        #endregion

        /// <summary>
        /// QuestionItemBaseType class constructor
        /// </summary>
        public QuestionItemBaseType()
        {
            _readOnly = false;
        }

        [XmlElement("ListField", typeof(ListFieldType), Order = 0)]
        [XmlElement("ResponseField", typeof(ResponseFieldType), Order = 0)]
        public virtual ExtensionBaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        /// <summary>
        /// If @readOnly is set to true, the this field may not be
        /// edited by the user, and any default values set by template should be
        /// considered part of the stored data set responses, and transmitted by the
        /// SubmitForm transaction.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool readOnly
        {
            get
            {
                return _readOnly;
            }
            set
            {
                _readOnly = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool changedData
        {
            get
            {
                if (_changedData.HasValue)
                {
                    return _changedData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _changedData = value;
            }
        }

        [XmlIgnore]
        public virtual bool changedDataSpecified
        {
            get
            {
                return _changedData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _changedData = null;
                }
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool newData
        {
            get
            {
                if (_newData.HasValue)
                {
                    return _newData.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _newData = value;
            }
        }

        [XmlIgnore]
        public virtual bool newDataSpecified
        {
            get
            {
                return _newData.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _newData = null;
                }
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool readOnlySpecified
        {
            get
            {
                return _readOnlySpecified;
            }
            set
            {
                _readOnlySpecified = value;
            }
        }
    }

    /// <summary>
    /// ListField is a grouper for list-like answer choices, which may be
    /// derived from either a set of answer choice lists (a List composed of ListItems) or
    /// or a list obtained from a LookupEndpoint URI.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListFieldType")]
    public partial class ListFieldType : ExtensionBaseType
    {
        #region Private fields
        private RichTextType _listHeaderText;
        private CodeSystemType _defaultCodeSystem;
        private ExtensionBaseType _item;
        private List<PredSelectionTestType> _illegalListItemPairings;
        private List<PredSingleSelectionSetsType> _illegalCoSelectedListItems;
        private List<EventType> _afterChange;
        private List<OnEventType> _onEvent;
        private string _colTextDelimiter;
        private byte _numCols;
        private byte _storedCol;
        private ushort _minSelections;
        private ushort _maxSelections;
        private bool _ordered;
        private string _defaultListItemDataType;
        private bool _listHeaderTextSpecified;
        private bool _defaultCodeSystemSpecified;
        private bool _itemSpecified;
        private bool _illegalListItemPairingsSpecified;
        private bool _illegalCoSelectedListItemsSpecified;
        private bool _afterChangeSpecified;
        private bool _onEventSpecified;
        private bool _colTextDelimiterSpecified;
        private bool _numColsSpecified;
        private bool _storedColSpecified;
        private bool _minSelectionsSpecified;
        private bool _maxSelectionsSpecified;
        private bool _orderedSpecified;
        private bool _defaultListItemDataTypeSpecified;
        #endregion

        /// <summary>
        /// ListFieldType class constructor
        /// </summary>
        public ListFieldType()
        {
            _colTextDelimiter = "|";
            _numCols = ((byte)(1));
            _storedCol = ((byte)(1));
            _minSelections = ((ushort)(1));
            _maxSelections = ((ushort)(1));
            _ordered = true;
        }

        /// <summary>
        /// The header row for a set of list items. If the list
        /// has more than one column, the column text is separated by the
        /// colTextDelimiter.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType ListHeaderText
        {
            get
            {
                return _listHeaderText;
            }
            set
            {
                _listHeaderText = value;
            }
        }

        /// <summary>
        /// If coded values are used for items in a List
        /// (including ListItem and LookupEndPoint lists), then the default
        /// coding system should be specified here. For ListItem nodes, any
        /// exceptions to the coding system may be specified on the individual
        /// ListItem nodes. For LookupEndPoints, the endpoint data can
        /// optionally specify any exceptions in a dedicated CodeSystem column
        /// in the returned list data.
        /// </summary>
        [XmlElement(Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual CodeSystemType DefaultCodeSystem
        {
            get
            {
                return _defaultCodeSystem;
            }
            set
            {
                _defaultCodeSystem = value;
            }
        }

        [XmlElement("List", typeof(ListType), Order = 2)]
        [XmlElement("LookupEndPoint", typeof(LookupEndPointType), Order = 2)]
        public virtual ExtensionBaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElement("IllegalListItemPairings", Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredSelectionTestType> IllegalListItemPairings
        {
            get
            {
                return _illegalListItemPairings;
            }
            set
            {
                _illegalListItemPairings = value;
            }
        }

        [XmlElement("IllegalCoSelectedListItems", Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredSingleSelectionSetsType> IllegalCoSelectedListItems
        {
            get
            {
                return _illegalCoSelectedListItems;
            }
            set
            {
                _illegalCoSelectedListItems = value;
            }
        }

        /// <summary>
        /// Event that occurs after List Field selections are
        /// changed.
        /// </summary>
        [XmlElement("AfterChange", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> AfterChange
        {
            get
            {
                return _afterChange;
            }
            set
            {
                _afterChange = value;
            }
        }

        [XmlElement("OnEvent", Order = 6)]
        [JsonProperty(Order = 6, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<OnEventType> OnEvent
        {
            get
            {
                return _onEvent;
            }
            set
            {
                _onEvent = value;
            }
        }

        /// <summary>
        /// Character in the DisplayText that separates the columns
        /// and rows in a single or multi-column list.
        /// </summary>
        [XmlAttribute]
        [DefaultValue("|")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string colTextDelimiter
        {
            get
            {
                return _colTextDelimiter;
            }
            set
            {
                _colTextDelimiter = value;
            }
        }

        /// <summary>
        /// Number of columns in the list
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(byte), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte numCols
        {
            get
            {
                return _numCols;
            }
            set
            {
                _numCols = value;
            }
        }

        /// <summary>
        /// Determines which column of the list is stored in a
        /// database. This list is one-based.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(byte), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual byte storedCol
        {
            get
            {
                return _storedCol;
            }
            set
            {
                _storedCol = value;
            }
        }

        /// <summary>
        /// Minimum number of answer choices (list items) that must be
        /// selected by the user. Default value is 1. NEW: changed minimum value to
        /// 1. Removed: If set to 0, then this question need not be answered by the
        /// user.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(ushort), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort minSelections
        {
            get
            {
                return _minSelections;
            }
            set
            {
                _minSelections = value;
            }
        }

        /// <summary>
        /// Maximum number of answer choices (list items) that can be
        /// selected by the user. Must be greater than or equal to minSelections,
        /// and no larger than the total number of list items. A value of 0
        /// indicates no limit to the number of selected list items (answers). This
        /// effectively means that the question is multi-select. (Abbreviated as QM)
        /// A value of 1 (the default) indicates that the question list is
        /// single-select. (Abbreviated as QS)
        /// </summary>
        [XmlAttribute]
        [DefaultValue(typeof(ushort), "1")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ushort maxSelections
        {
            get
            {
                return _maxSelections;
            }
            set
            {
                _maxSelections = value;
            }
        }

        /// <summary>
        /// If false, then the form implementation may change the
        /// order of items in the list.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(true)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool ordered
        {
            get
            {
                return _ordered;
            }
            set
            {
                _ordered = value;
            }
        }

        /// <summary>
        /// This attribute contains an SDC datatype enumeration. The
        /// selected value is the datatype of the content for all
        /// ListItem/@associatedValue content in the current List. It is used
        /// instead of associatedValueType. This element is used only if the
        /// ListItems are all associated with coded values from a single coding
        /// system. If associatedValueType on a ListItem has a datatype assigned,
        /// then the latter datatype overrides the content in
        /// defaultListItemDataType.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string defaultListItemDataType
        {
            get
            {
                return _defaultListItemDataType;
            }
            set
            {
                _defaultListItemDataType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ListHeaderTextSpecified
        {
            get
            {
                return _listHeaderTextSpecified;
            }
            set
            {
                _listHeaderTextSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DefaultCodeSystemSpecified
        {
            get
            {
                return _defaultCodeSystemSpecified;
            }
            set
            {
                _defaultCodeSystemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IllegalListItemPairingsSpecified
        {
            get
            {
                return _illegalListItemPairingsSpecified;
            }
            set
            {
                _illegalListItemPairingsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool IllegalCoSelectedListItemsSpecified
        {
            get
            {
                return _illegalCoSelectedListItemsSpecified;
            }
            set
            {
                _illegalCoSelectedListItemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AfterChangeSpecified
        {
            get
            {
                return _afterChangeSpecified;
            }
            set
            {
                _afterChangeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnEventSpecified
        {
            get
            {
                return _onEventSpecified;
            }
            set
            {
                _onEventSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool colTextDelimiterSpecified
        {
            get
            {
                return _colTextDelimiterSpecified;
            }
            set
            {
                _colTextDelimiterSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool numColsSpecified
        {
            get
            {
                return _numColsSpecified;
            }
            set
            {
                _numColsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool storedColSpecified
        {
            get
            {
                return _storedColSpecified;
            }
            set
            {
                _storedColSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool minSelectionsSpecified
        {
            get
            {
                return _minSelectionsSpecified;
            }
            set
            {
                _minSelectionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool maxSelectionsSpecified
        {
            get
            {
                return _maxSelectionsSpecified;
            }
            set
            {
                _maxSelectionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool orderedSpecified
        {
            get
            {
                return _orderedSpecified;
            }
            set
            {
                _orderedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool defaultListItemDataTypeSpecified
        {
            get
            {
                return _defaultListItemDataTypeSpecified;
            }
            set
            {
                _defaultListItemDataTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// This type is a template for a data entry field that accepts entries
    /// (responses or answers) of any data type, including text, numbers, dates, and Base 64
    /// - encoded blobs (images, sounds, video, other binary formats, etc.). This type
    /// cannot contain ListItems, but it may be a child of a Question or a
    /// ListItem.
    /// </summary>
    [XmlInclude(typeof(ListItemResponseFieldType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ResponseFieldType")]
    public partial class ResponseFieldType : ExtensionBaseType
    {
        #region Private fields
        private DataTypes_DEType _response;
        private ExtensionBaseType _item;
        private RichTextType _textAfterResponse;
        private UnitsType _responseUnits;
        private List<EventType> _afterChange;
        private List<OnEventType> _onEvent;
        private bool _responseSpecified;
        private bool _itemSpecified;
        private bool _textAfterResponseSpecified;
        private bool _responseUnitsSpecified;
        private bool _afterChangeSpecified;
        private bool _onEventSpecified;
        #endregion

        /// <summary>
        /// W3C Schema data type details
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual DataTypes_DEType Response
        {
            get
            {
                if ((_response == null))
                {
                    _response = new DataTypes_DEType();
                }
                return _response;
            }
            set
            {
                _response = value;
            }
        }

        [XmlElement("CallSetValue", typeof(CallFuncActionType), Order = 1)]
        [XmlElement("SetValue", typeof(ScriptCodeAnyType), Order = 1)]
        public virtual ExtensionBaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        /// <summary>
        /// TextAfterResponse is fixed text that appears after (to
        /// the right of) the user's response on the data entry form. This may
        /// be text for units such as "mm", "cm", etc.
        /// </summary>
        [XmlElement(Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual RichTextType TextAfterResponse
        {
            get
            {
                return _textAfterResponse;
            }
            set
            {
                _textAfterResponse = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual UnitsType ResponseUnits
        {
            get
            {
                return _responseUnits;
            }
            set
            {
                _responseUnits = value;
            }
        }

        /// <summary>
        /// Event that occurs after the Response value is changed,
        /// usually fired after a user leaves the Response
        /// field.
        /// </summary>
        [XmlElement("AfterChange", Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> AfterChange
        {
            get
            {
                return _afterChange;
            }
            set
            {
                _afterChange = value;
            }
        }

        [XmlElement("OnEvent", Order = 5)]
        [JsonProperty(Order = 5, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<OnEventType> OnEvent
        {
            get
            {
                return _onEvent;
            }
            set
            {
                _onEvent = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ResponseSpecified
        {
            get
            {
                return _responseSpecified;
            }
            set
            {
                _responseSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool TextAfterResponseSpecified
        {
            get
            {
                return _textAfterResponseSpecified;
            }
            set
            {
                _textAfterResponseSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ResponseUnitsSpecified
        {
            get
            {
                return _responseUnitsSpecified;
            }
            set
            {
                _responseUnitsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool AfterChangeSpecified
        {
            get
            {
                return _afterChangeSpecified;
            }
            set
            {
                _afterChangeSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnEventSpecified
        {
            get
            {
                return _onEventSpecified;
            }
            set
            {
                _onEventSpecified = value;
            }
        }
    }

    /// <summary>
    /// MOVED from SDCDataTypes: SDC datatypes for Data Entry (DE), based mostly on W3C
    /// specifications. Uses baseAttributes and Extension capability to enhance the list of Data Types. Includes
    /// additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of
    /// IHE RFD SubmitForm responses in XML instance documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("DataTypes_DEType")]
    public partial class DataTypes_DEType : ExtensionBaseType
    {
        #region Private fields
        private BaseType _item;
        private ItemChoiceType2 _itemElementName;
        private bool _itemSpecified;
        private bool _itemElementNameSpecified;
        #endregion

        [XmlElement("HTML", typeof(HTML_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("XML", typeof(XML_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("anyType", typeof(anyType_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("anyURI", typeof(anyURI_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("base64Binary", typeof(base64Binary_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("boolean", typeof(boolean_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("byte", typeof(byte_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("date", typeof(date_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("dateTime", typeof(dateTimeStamp_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("dateTimeStamp", typeof(dateTimeStamp_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("decimal", typeof(decimal_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("double", typeof(double_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("duration", typeof(duration_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("float", typeof(float_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gDay", typeof(gDay_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gMonth", typeof(gMonth_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gMonthDay", typeof(gMonthDay_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gYear", typeof(gYear_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("gYearMonth", typeof(gMonth_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("hexBinary", typeof(hexBinary_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("int", typeof(int_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("integer", typeof(integer_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("long", typeof(long_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("negativeInteger", typeof(negativeInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("nonNegativeInteger", typeof(nonNegativeInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("nonPositiveInteger", typeof(nonPositiveInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("positiveInteger", typeof(positiveInteger_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("short", typeof(short_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("string", typeof(string_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("time", typeof(time_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedByte", typeof(unsignedByte_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedInt", typeof(unsignedInt_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedLong", typeof(unsignedLong_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("unsignedShort", typeof(unsignedShort_DEtype), IsNullable = true, Order = 0)]
        [XmlElement("yearMonthDuration", typeof(yearMonthDuration_DEtype), IsNullable = true, Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public virtual BaseType Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElement(Order = 1)]
        [XmlIgnore]
        public virtual ItemChoiceType2 ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemElementNameSpecified
        {
            get
            {
                return _itemElementNameSpecified;
            }
            set
            {
                _itemElementNameSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemChoiceType2
    {
        HTML,
        XML,
        anyType,
        anyURI,
        base64Binary,
        boolean,
        @byte,
        date,
        dateTime,
        dateTimeStamp,
        @decimal,
        @double,
        duration,
        @float,
        gDay,
        gMonth,
        gMonthDay,
        gYear,
        gYearMonth,
        hexBinary,
        @int,
        integer,
        @long,
        negativeInteger,
        nonNegativeInteger,
        nonPositiveInteger,
        positiveInteger,
        @short,
        @string,
        time,
        unsignedByte,
        unsignedInt,
        unsignedLong,
        unsignedShort,
        yearMonthDuration,
    }

    /// <summary>
    /// This type represents a place to store a fill-in response associated
    /// directly with a selected ListItem. The response may be optional or
    /// required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListItemResponseFieldType")]
    public partial class ListItemResponseFieldType : ResponseFieldType
    {
        #region Private fields
        private bool _responseRequired;
        private bool _responseRequiredSpecified;
        #endregion

        /// <summary>
        /// ListItemResponseFieldType class constructor
        /// </summary>
        public ListItemResponseFieldType()
        {
            _responseRequired = false;
        }

        /// <summary>
        /// If @responseRequired is set to true, then the appropriate
        /// text or Blob must be entered in the data-entry field associated with
        /// this list item.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool responseRequired
        {
            get
            {
                return _responseRequired;
            }
            set
            {
                _responseRequired = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool responseRequiredSpecified
        {
            get
            {
                return _responseRequiredSpecified;
            }
            set
            {
                _responseRequiredSpecified = value;
            }
        }
    }

    /// <summary>
    /// Inject a form or part of a form at the specified location. The
    /// injected section may come from the current form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ActInjectType")]
    public partial class ActInjectType : InjectFormType
    {
        #region Private fields
        private string _targetNames;
        private bool _targetNamesSpecified;
        #endregion

        /// <summary>
        /// The names of the parent items that will have the form (or
        /// form section) injected as child node(s).
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string targetNames
        {
            get
            {
                return _targetNames;
            }
            set
            {
                _targetNames = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool targetNamesSpecified
        {
            get
            {
                return _targetNamesSpecified;
            }
            set
            {
                _targetNamesSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [XmlRootAttribute("DataElement", Namespace = "urn:ihe:qrph:sdc:2016", IsNullable = false)]
    [JsonObject("DataElementType")]
    public partial class DataElementType : IdentifiedExtensionType
    {
        #region Private fields
        private List<IdentifiedExtensionType> _items;
        private string _lineage;
        private string _version;
        private string _versionPrev;
        private string _fullURI;
        private string _basedOnURI;
        private string _filename;
        private bool _itemsSpecified;
        private bool _lineageSpecified;
        private bool _versionSpecified;
        private bool _versionPrevSpecified;
        private bool _fullURISpecified;
        private bool _basedOnURISpecified;
        private bool _filenameSpecified;
        #endregion

        [XmlElement("ButtonAction", typeof(ButtonItemType), Order = 0)]
        [XmlElement("DisplayedItem", typeof(DisplayedType), Order = 0)]
        [XmlElement("InjectForm", typeof(InjectFormType), Order = 0)]
        [XmlElement("Question", typeof(QuestionItemType), Order = 0)]
        [XmlElement("Section", typeof(SectionItemType), Order = 0)]
        public virtual List<IdentifiedExtensionType> Items
        {
            get
            {
                if ((_items == null))
                {
                    _items = new List<IdentifiedExtensionType>();
                }
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        /// <summary>
        /// NEW: A text identifier that is used to group multiple
        /// versions of a single DE. The lineage is constant for all versions of a
        /// single kind of DE. When appended to @baseURI, it can be used to retrieve
        /// all versions of one particular DE.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string lineage
        {
            get
            {
                return _lineage;
            }
            set
            {
                _lineage = value;
            }
        }

        /// <summary>
        /// NEW: @version contains the version text for the current
        /// DE. It is designed to be used in conjuction with @baseURI and
        /// @lineage.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        /// <summary>
        /// NEW: Identify the immediate previous version of the
        /// current DE. The format is the same as version. The primary role of this
        /// optional attribute is to allow automated comparisons between a current
        /// DE and the immediate previous DE version. This is often helpful when
        /// deciding whether to adopt a newer version of a DE.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string versionPrev
        {
            get
            {
                return _versionPrev;
            }
            set
            {
                _versionPrev = value;
            }
        }

        /// <summary>
        /// NEW: The full URI that uniquely identifies the current
        /// DE.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string fullURI
        {
            get
            {
                return _fullURI;
            }
            set
            {
                _fullURI = value;
            }
        }

        /// <summary>
        /// NEW: URI used to identify the DE that that this DE is
        /// based upon. In most cases, this should be a standard form that is
        /// modified and/or extended by the current DE. The current template reuses
        /// the basedOn IDs whenever the question/answer/semantic context is
        /// identical to the original.
        /// </summary>
        [XmlAttribute(DataType = "anyURI")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string basedOnURI
        {
            get
            {
                return _basedOnURI;
            }
            set
            {
                _basedOnURI = value;
            }
        }

        /// <summary>
        /// NEW: filename to use when the current FormDesign instance
        /// is saved as a file. For forms containing responses, the filename may
        /// include the formInstanceVersionURI, but the naming convention may be
        /// use-case-specific.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string filename
        {
            get
            {
                return _filename;
            }
            set
            {
                _filename = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return _itemsSpecified;
            }
            set
            {
                _itemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool lineageSpecified
        {
            get
            {
                return _lineageSpecified;
            }
            set
            {
                _lineageSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionSpecified
        {
            get
            {
                return _versionSpecified;
            }
            set
            {
                _versionSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool versionPrevSpecified
        {
            get
            {
                return _versionPrevSpecified;
            }
            set
            {
                _versionPrevSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool fullURISpecified
        {
            get
            {
                return _fullURISpecified;
            }
            set
            {
                _fullURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool basedOnURISpecified
        {
            get
            {
                return _basedOnURISpecified;
            }
            set
            {
                _basedOnURISpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool filenameSpecified
        {
            get
            {
                return _filenameSpecified;
            }
            set
            {
                _filenameSpecified = value;
            }
        }
    }

    /// <summary>
    /// This base element is the foundation for ListItems, but does not
    /// include the MainItems sub-group under each ListItem.
    /// </summary>
    [XmlInclude(typeof(ListItemType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListItemBaseType")]
    public abstract partial class ListItemBaseType : DisplayedType
    {
        #region Private fields
        private ListItemResponseFieldType _listItemResponseField;
        private List<EventType> _onSelect;
        private List<EventType> _onDeselect;
        private PredGuardType _selectIf;
        private PredGuardType _deselectIf;
        private bool _selected;
        private bool _selectionDisablesChildren;
        private string _selectionActivatesItems;
        private string _selectionSelectsListItems;
        private bool _selectionDeselectsSiblings;
        private bool _omitWhenSelected;
        private string _repeat;
        private string _instanceGUID;
        private string _parentGUID;
        private string _associatedValue;
        private string _associatedValueType;
        private bool _listItemResponseFieldSpecified;
        private bool _onSelectSpecified;
        private bool _onDeselectSpecified;
        private bool _selectIfSpecified;
        private bool _deselectIfSpecified;
        private bool _selectedSpecified;
        private bool _selectionDisablesChildrenSpecified;
        private bool _selectionActivatesItemsSpecified;
        private bool _selectionSelectsListItemsSpecified;
        private bool _selectionDeselectsSiblingsSpecified;
        private bool _omitWhenSelectedSpecified;
        private bool _repeatSpecified;
        private bool _instanceGUIDSpecified;
        private bool _parentGUIDSpecified;
        private bool _associatedValueSpecified;
        private bool _associatedValueTypeSpecified;
        #endregion

        /// <summary>
        /// ListItemBaseType class constructor
        /// </summary>
        public ListItemBaseType()
        {
            _selected = false;
            _selectionDisablesChildren = false;
            _selectionDeselectsSiblings = false;
            _omitWhenSelected = false;
            _repeat = "0";
        }

        /// <summary>
        /// A place to enter values (of any data type) that are
        /// directly associated with, and attached to, a selected answer
        /// choice.
        /// </summary>
        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ListItemResponseFieldType ListItemResponseField
        {
            get
            {
                return _listItemResponseField;
            }
            set
            {
                _listItemResponseField = value;
            }
        }

        [XmlElement("OnSelect", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> OnSelect
        {
            get
            {
                return _onSelect;
            }
            set
            {
                _onSelect = value;
            }
        }

        [XmlElement("OnDeselect", Order = 2)]
        [JsonProperty(Order = 2, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<EventType> OnDeselect
        {
            get
            {
                return _onDeselect;
            }
            set
            {
                _onDeselect = value;
            }
        }

        [XmlElement(Order = 3)]
        [JsonProperty(Order = 3, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PredGuardType SelectIf
        {
            get
            {
                return _selectIf;
            }
            set
            {
                _selectIf = value;
            }
        }

        [XmlElement(Order = 4)]
        [JsonProperty(Order = 4, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual PredGuardType DeselectIf
        {
            get
            {
                return _deselectIf;
            }
            set
            {
                _deselectIf = value;
            }
        }

        /// <summary>
        /// Represents the default value of the ListItem in the
        /// FormDesign template, or the user's response in selecting one or more
        /// ListItems. If @multiSelect='false' on ListField then only one item may
        /// be selected.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool selected
        {
            get
            {
                return _selected;
            }
            set
            {
                _selected = value;
            }
        }

        /// <summary>
        /// If set to true, then selecting this ListItem must
        /// deactivate all descendant parts of the form, and ignore any user-entered
        /// values in the deactivated part. Deselecting the ListItem should
        /// reactivate the descendant items in their state at the time the items
        /// were deactivated. If items are disabled, then any data stored in the
        /// disabled questions should be removed.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool selectionDisablesChildren
        {
            get
            {
                return _selectionDisablesChildren;
            }
            set
            {
                _selectionDisablesChildren = value;
            }
        }

        /// <summary>
        /// NEW Selecting the current ListItem will enable the named
        /// items in this attribute's content. Prefixing any named with a hyphen (-)
        /// will reverse the above behaviour (i.e., the named items will be
        /// disabled). Unselecting the ListItem will reverse this behaviour.
        /// Prefixing the name with a tilde (~) will supress this reversal behavior.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string selectionActivatesItems
        {
            get
            {
                return _selectionActivatesItems;
            }
            set
            {
                _selectionActivatesItems = value;
            }
        }

        /// <summary>
        /// NEW Selecting the current ListItem will select the named
        /// ListItems in this attribute's content. Prefixing any named with a hyphen
        /// (-) will reverse the above behaviour. Unselecting the ListItem will
        /// reverse this behaviour. Prefixing the name with a tilde (~) will
        /// suppress this reversal behavior.
        /// </summary>
        [XmlAttribute(DataType = "NMTOKENS")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string selectionSelectsListItems
        {
            get
            {
                return _selectionSelectsListItems;
            }
            set
            {
                _selectionSelectsListItems = value;
            }
        }

        /// <summary>
        /// If the ancestor ListField has @multiselect = 'true', then
        /// selecting this ListItem should de-select all other ListItem (sibling)
        /// nodes except the current one.
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool selectionDeselectsSiblings
        {
            get
            {
                return _selectionDeselectsSiblings;
            }
            set
            {
                _selectionDeselectsSiblings = value;
            }
        }

        /// <summary>
        /// If @omitWhenSelected is set to true, then the question and
        /// its response(s) should not be present in a typical report derived from
        /// this template. This attribute is usually set to true when the answer
        /// choice is used to control form behavior (e.g., skip logic), or when the
        /// question provides unhelpful "negative" information about actions that
        /// did not occur or were not performed, or things that were not observed or
        /// could not be assessed. If @omitWhenSelectedset is false (default) then
        /// the question and its response(s) should appear in the report. Added
        /// 11/29/15 to replace @reportAction
        /// </summary>
        [XmlAttribute]
        [DefaultValue(false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual bool omitWhenSelected
        {
            get
            {
                return _omitWhenSelected;
            }
            set
            {
                _omitWhenSelected = value;
            }
        }

        [XmlAttribute(DataType = "nonNegativeInteger")]
        [DefaultValue("0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string repeat
        {
            get
            {
                return _repeat;
            }
            set
            {
                _repeat = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string instanceGUID
        {
            get
            {
                return _instanceGUID;
            }
            set
            {
                _instanceGUID = value;
            }
        }

        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string parentGUID
        {
            get
            {
                return _parentGUID;
            }
            set
            {
                _parentGUID = value;
            }
        }

        /// <summary>
        /// A typed value (e.g., an integer) that is uniquely
        /// associated with a ListItem. An example is the integer 10 for a ListItem
        /// with title that reads "10 o'clock". Typically these values are set to be
        /// used in calculations or other algorithms. In general, they can be
        /// treated something like a user-entered response on a the
        /// ListItemResponseField of a selected ListItem. This field should not be
        /// used for terminologies or local codes. The CodedValue type should be
        /// used for these kinds of metadata. This field should also not be used
        /// other properties such as translations, usage, etc. The data type shoudl
        /// be specified in @AssociatedValueType
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string associatedValue
        {
            get
            {
                return _associatedValue;
            }
            set
            {
                _associatedValue = value;
            }
        }

        /// <summary>
        /// The data type of @AssociatedValue. Default is
        /// string.
        /// </summary>
        [XmlAttribute]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual string associatedValueType
        {
            get
            {
                return _associatedValueType;
            }
            set
            {
                _associatedValueType = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ListItemResponseFieldSpecified
        {
            get
            {
                return _listItemResponseFieldSpecified;
            }
            set
            {
                _listItemResponseFieldSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnSelectSpecified
        {
            get
            {
                return _onSelectSpecified;
            }
            set
            {
                _onSelectSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool OnDeselectSpecified
        {
            get
            {
                return _onDeselectSpecified;
            }
            set
            {
                _onDeselectSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool SelectIfSpecified
        {
            get
            {
                return _selectIfSpecified;
            }
            set
            {
                _selectIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool DeselectIfSpecified
        {
            get
            {
                return _deselectIfSpecified;
            }
            set
            {
                _deselectIfSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectedSpecified
        {
            get
            {
                return _selectedSpecified;
            }
            set
            {
                _selectedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectionDisablesChildrenSpecified
        {
            get
            {
                return _selectionDisablesChildrenSpecified;
            }
            set
            {
                _selectionDisablesChildrenSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectionActivatesItemsSpecified
        {
            get
            {
                return _selectionActivatesItemsSpecified;
            }
            set
            {
                _selectionActivatesItemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectionSelectsListItemsSpecified
        {
            get
            {
                return _selectionSelectsListItemsSpecified;
            }
            set
            {
                _selectionSelectsListItemsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool selectionDeselectsSiblingsSpecified
        {
            get
            {
                return _selectionDeselectsSiblingsSpecified;
            }
            set
            {
                _selectionDeselectsSiblingsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool omitWhenSelectedSpecified
        {
            get
            {
                return _omitWhenSelectedSpecified;
            }
            set
            {
                _omitWhenSelectedSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool repeatSpecified
        {
            get
            {
                return _repeatSpecified;
            }
            set
            {
                _repeatSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool instanceGUIDSpecified
        {
            get
            {
                return _instanceGUIDSpecified;
            }
            set
            {
                _instanceGUIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool parentGUIDSpecified
        {
            get
            {
                return _parentGUIDSpecified;
            }
            set
            {
                _parentGUIDSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool associatedValueSpecified
        {
            get
            {
                return _associatedValueSpecified;
            }
            set
            {
                _associatedValueSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool associatedValueTypeSpecified
        {
            get
            {
                return _associatedValueTypeSpecified;
            }
            set
            {
                _associatedValueTypeSpecified = value;
            }
        }
    }

    /// <summary>
    /// ListItem elements represent answer choices that may appear under a
    /// Question.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016")]
    [JsonObject("ListItemType")]
    public partial class ListItemType : ListItemBaseType
    {
        #region Private fields
        private ChildItemsType _item;
        private bool _itemSpecified;
        #endregion

        [XmlElement("ChildItems", Order = 0)]
        [JsonProperty("ChildItems", Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ChildItemsType Item
        {
            get
            {
                if ((_item == null))
                {
                    _item = new ChildItemsType();
                }
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ItemSpecified
        {
            get
            {
                return _itemSpecified;
            }
            set
            {
                _itemSpecified = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IncludeInSchema = false)]
    public enum ItemsChoiceType1
    {
        Action,
        AddCode,
        CallFunction,
        ConditionalGroupAction,
        Inject,
        PreviewReport,
        RunCode,
        Save,
        SelectMatchingListItems,
        SendMessage111,
        SendReport,
        SetAttributeValue,
        SetAttributeValueScript,
        SetBoolAttributeValueCode,
        ShowForm,
        ShowMessage,
        ShowReport,
        ShowURL,
        ValidateForm,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum FormDesignTypeApprovalStatus
    {
        inProcess,
        preliminary,
        approved,
        cancelled,
        retracted,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    public enum FormDesignTypeCompletionStatus
    {
        pending,
        incomplete,
        complete,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:ihe:qrph:sdc:2016")]
    [XmlRootAttribute(Namespace = "urn:ihe:qrph:sdc:2016", IsNullable = false)]
    [JsonObject("PredActionType2")]
    public partial class PredActionType2 : PredGuardType
    {
        #region Private fields
        private ActionsType _actions;
        private List<PredActionType> _else;
        private bool _actionsSpecified;
        private bool _elseSpecified;
        #endregion

        [XmlElement(Order = 0)]
        [JsonProperty(Order = 0, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual ActionsType Actions
        {
            get
            {
                if ((_actions == null))
                {
                    _actions = new ActionsType();
                }
                return _actions;
            }
            set
            {
                _actions = value;
            }
        }

        [XmlElement("Else", Order = 1)]
        [JsonProperty(Order = 1, NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public virtual List<PredActionType> Else
        {
            get
            {
                if ((_else == null))
                {
                    _else = new List<PredActionType>();
                }
                return _else;
            }
            set
            {
                _else = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ActionsSpecified
        {
            get
            {
                return _actionsSpecified;
            }
            set
            {
                _actionsSpecified = value;
            }
        }

        [JsonIgnore]
        [XmlIgnore()]
        public bool ElseSpecified
        {
            get
            {
                return _elseSpecified;
            }
            set
            {
                _elseSpecified = value;
            }
        }
    }
}
#pragma warning restore

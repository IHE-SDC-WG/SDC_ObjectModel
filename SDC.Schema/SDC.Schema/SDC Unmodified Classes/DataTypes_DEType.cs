// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses base Attributes and Extension capability to enhance the list of Data Types. Includes additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of SDC form responses in SDC XML instance documents.
/// Must be one of the following:
/// --HTML (HTML_DEtype)
/// --XML (XML_DEtype)
/// --anyType (anyType_DEtype)
/// --anyURI (anyURI_DEtype)
/// --base64Binary (base64Binary_DEtype)
/// --boolean (boolean_DEtype)
/// --byte (byte_DEtype)
/// --date (date_DEtype)
/// --dateTime (dateTimeStamp_DEtype)
/// --dateTimeStamp (dateTimeStamp_DEtype)
/// --decimal (decimal_DEtype)
/// --double (double_DEtype)
/// --duration (duration_DEtype)
/// --float (float_DEtype)
/// --gDay (gDay_DEtype)
/// --gMonth (gMonth_DEtype)
/// --gMonthDay (gMonthDay_DEtype)
/// --gYear (gYear_DEtype)
/// --gYearMonth (gMonth_DEtype)
/// --hexBinary (hexBinary_DEtype)
/// --int (int_DEtype)
/// --integer (integer_DEtype)
/// --long (long_DEtype)
/// --negativeInteger (negativeInteger_DEtype)
/// --nonNegativeInteger (nonNegativeInteger_DEtype)
/// --nonPositiveInteger (nonPositiveInteger_DEtype)
/// --positiveInteger (positiveInteger_DEtype)
/// --short (short_DEtype)
/// --string (string_DEtype)
/// --time (time_DEtype)
/// --unsignedByte (unsignedByte_DEtype)
/// --unsignedInt (unsignedInt_DEtype)
/// --unsignedLong (unsignedLong_DEtype)
/// --unsignedShort (unsignedShort_DEtype)
/// --yearMonthDuration (yearMonthDuration_DEtype)
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[JsonObject("DataTypes_DEType")]
public partial class DataTypes_DEType : ExtensionBaseType
{
    #region Private fields
    protected internal bool _shouldSerializeItemElementName;
    private BaseType _item;
    private ItemChoiceType2 _itemElementName;
    #endregion
    
    [XmlElement("HTML", typeof(HTML_DEtype), IsNullable=true, Order=0)]
    [XmlElement("XML", typeof(XML_DEtype), IsNullable=true, Order=0)]
    [XmlElement("anyType", typeof(anyType_DEtype), IsNullable=true, Order=0)]
    [XmlElement("anyURI", typeof(anyURI_DEtype), IsNullable=true, Order=0)]
    [XmlElement("base64Binary", typeof(base64Binary_DEtype), IsNullable=true, Order=0)]
    [XmlElement("boolean", typeof(boolean_DEtype), IsNullable=true, Order=0)]
    [XmlElement("byte", typeof(byte_DEtype), IsNullable=true, Order=0)]
    [XmlElement("date", typeof(date_DEtype), IsNullable=true, Order=0)]
    [XmlElement("dateTime", typeof(dateTimeStamp_DEtype), IsNullable=true, Order=0)]
    [XmlElement("dateTimeStamp", typeof(dateTimeStamp_DEtype), IsNullable=true, Order=0)]
    [XmlElement("decimal", typeof(decimal_DEtype), IsNullable=true, Order=0)]
    [XmlElement("double", typeof(double_DEtype), IsNullable=true, Order=0)]
    [XmlElement("duration", typeof(duration_DEtype), IsNullable=true, Order=0)]
    [XmlElement("float", typeof(float_DEtype), IsNullable=true, Order=0)]
    [XmlElement("gDay", typeof(gDay_DEtype), IsNullable=true, Order=0)]
    [XmlElement("gMonth", typeof(gMonth_DEtype), IsNullable=true, Order=0)]
    [XmlElement("gMonthDay", typeof(gMonthDay_DEtype), IsNullable=true, Order=0)]
    [XmlElement("gYear", typeof(gYear_DEtype), IsNullable=true, Order=0)]
    [XmlElement("gYearMonth", typeof(gMonth_DEtype), IsNullable=true, Order=0)]
    [XmlElement("hexBinary", typeof(hexBinary_DEtype), IsNullable=true, Order=0)]
    [XmlElement("int", typeof(int_DEtype), IsNullable=true, Order=0)]
    [XmlElement("integer", typeof(integer_DEtype), IsNullable=true, Order=0)]
    [XmlElement("long", typeof(long_DEtype), IsNullable=true, Order=0)]
    [XmlElement("negativeInteger", typeof(negativeInteger_DEtype), IsNullable=true, Order=0)]
    [XmlElement("nonNegativeInteger", typeof(nonNegativeInteger_DEtype), IsNullable=true, Order=0)]
    [XmlElement("nonPositiveInteger", typeof(nonPositiveInteger_DEtype), IsNullable=true, Order=0)]
    [XmlElement("positiveInteger", typeof(positiveInteger_DEtype), IsNullable=true, Order=0)]
    [XmlElement("short", typeof(short_DEtype), IsNullable=true, Order=0)]
    [XmlElement("string", typeof(string_DEtype), IsNullable=true, Order=0)]
    [XmlElement("time", typeof(time_DEtype), IsNullable=true, Order=0)]
    [XmlElement("unsignedByte", typeof(unsignedByte_DEtype), IsNullable=true, Order=0)]
    [XmlElement("unsignedInt", typeof(unsignedInt_DEtype), IsNullable=true, Order=0)]
    [XmlElement("unsignedLong", typeof(unsignedLong_DEtype), IsNullable=true, Order=0)]
    [XmlElement("unsignedShort", typeof(unsignedShort_DEtype), IsNullable=true, Order=0)]
    [XmlElement("yearMonthDuration", typeof(yearMonthDuration_DEtype), IsNullable=true, Order=0)]
    [XmlChoiceIdentifierAttribute("ItemElementName")]
    public virtual BaseType Item
    {
        get
        {
            return _item;
        }
        set
        {
            if ((_item == value))
            {
                return;
            }
            if (((_item == null) 
                        || (_item.Equals(value) != true)))
            {
                _item = value;
                OnPropertyChanged("Item", value);
            }
        }
    }
    
    [XmlElement(Order=1)]
    [XmlIgnore]
    public virtual ItemChoiceType2 ItemElementName
    {
        get
        {
            return _itemElementName;
        }
        set
        {
            if ((_itemElementName.Equals(value) != true))
            {
                _itemElementName = value;
                OnPropertyChanged("ItemElementName", value);
            }
            _shouldSerializeItemElementName = true;
        }
    }
    
    /// <summary>
    /// Test whether ItemElementName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItemElementName()
    {
        if (_shouldSerializeItemElementName)
        {
            return true;
        }
        return (_itemElementName != default(ItemChoiceType2));
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
}
}
#pragma warning restore

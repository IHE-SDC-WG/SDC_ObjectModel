// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.64.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Globalization;
using System.Xml;
using Newtonsoft.Json.Bson;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using MsgPack.Serialization;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
    using System.Xml.Linq;

    /// <summary>
    /// May hold one  or more of the following:
    /// --ButtonAction (ButtonItemType),
    /// --DisplayedItem (DisplayedType),
    /// --InjectForm (InjectFormType),
    /// --Question (QuestionItemType),
    /// --Section(SectionItemType)
    /// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[XmlRootAttribute("DataElement", Namespace="urn:ihe:qrph:sdc:2016", IsNullable=false)]
[JsonObject("DataElementType")]
public partial class DataElementType : IdentifiedExtensionType
{
    #region Private fields
    private List<IdentifiedExtensionType> _items;
    private string _lineage;
    private string _version;
    private string _versionPrev;
    private string _fullURI;
    private string _basedOnURI;
    private string _filename;
    #endregion
    
    [XmlElement("ButtonAction", typeof(ButtonItemType), Order=0)]
    [XmlElement("DisplayedItem", typeof(DisplayedType), Order=0)]
    [XmlElement("InjectForm", typeof(InjectFormType), Order=0)]
    [XmlElement("Question", typeof(QuestionItemType), Order=0)]
    [XmlElement("Section", typeof(SectionItemType), Order=0)]
        /// <summary>
        /// May hold one  or more of the following:
        /// --ButtonAction (ButtonItemType),
        /// --DisplayedItem (DisplayedType),
        /// --InjectForm (InjectFormType),
        /// --Question (QuestionItemType),
        /// --Section (SectionItemType)
        /// </summary>
        public virtual List<IdentifiedExtensionType> Items
    {
        get
        {
            return _items;
        }
        set
        {
            if ((_items == value))
            {
                return;
            }
            if (((_items == null) 
                        || (_items.Equals(value) != true)))
            {
                _items = value;
                OnPropertyChanged("Items", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: A text identifier that is used to group multiple
    /// versions of a single DE. The lineage is constant for all versions of a
    /// single kind of DE. When appended to @baseURI, it can be used to retrieve
    /// all versions of one particular DE.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string lineage
    {
        get
        {
            return _lineage;
        }
        set
        {
            if ((_lineage == value))
            {
                return;
            }
            if (((_lineage == null) 
                        || (_lineage.Equals(value) != true)))
            {
                _lineage = value;
                OnPropertyChanged("lineage", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: @version contains the version text for the current
    /// DE. It is designed to be used in conjuction with @baseURI and
    /// @lineage.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string version
    {
        get
        {
            return _version;
        }
        set
        {
            if ((_version == value))
            {
                return;
            }
            if (((_version == null) 
                        || (_version.Equals(value) != true)))
            {
                _version = value;
                OnPropertyChanged("version", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Identify the immediate previous version of the
    /// current DE. The format is the same as version. The primary role of this
    /// optional attribute is to allow automated comparisons between a current
    /// DE and the immediate previous DE version. This is often helpful when
    /// deciding whether to adopt a newer version of a DE.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string versionPrev
    {
        get
        {
            return _versionPrev;
        }
        set
        {
            if ((_versionPrev == value))
            {
                return;
            }
            if (((_versionPrev == null) 
                        || (_versionPrev.Equals(value) != true)))
            {
                _versionPrev = value;
                OnPropertyChanged("versionPrev", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: The full URI that uniquely identifies the current
    /// DE.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string fullURI
    {
        get
        {
            return _fullURI;
        }
        set
        {
            if ((_fullURI == value))
            {
                return;
            }
            if (((_fullURI == null) 
                        || (_fullURI.Equals(value) != true)))
            {
                _fullURI = value;
                OnPropertyChanged("fullURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: URI used to identify the DE that that this DE is
    /// based upon. In most cases, this should be a standard form that is
    /// modified and/or extended by the current DE. The current template reuses
    /// the basedOn IDs whenever the question/answer/semantic context is
    /// identical to the original.
    /// </summary>
    [XmlAttribute(DataType="anyURI")]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string basedOnURI
    {
        get
        {
            return _basedOnURI;
        }
        set
        {
            if ((_basedOnURI == value))
            {
                return;
            }
            if (((_basedOnURI == null) 
                        || (_basedOnURI.Equals(value) != true)))
            {
                _basedOnURI = value;
                OnPropertyChanged("basedOnURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: filename to use when the current FormDesign instance
    /// is saved as a file. For forms containing responses, the filename may
    /// include the formInstanceVersionURI, but the naming convention may be
    /// use-case-specific.
    /// </summary>
    [XmlAttribute]
    [JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
    public virtual string filename
    {
        get
        {
            return _filename;
        }
        set
        {
            if ((_filename == value))
            {
                return;
            }
            if (((_filename == null) 
                        || (_filename.Equals(value) != true)))
            {
                _filename = value;
                OnPropertyChanged("filename", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Items should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItems()
    {
        return Items != null && Items.Count > 0;
    }
    
    /// <summary>
    /// Test whether lineage should be serialized
    /// </summary>
    public virtual bool ShouldSerializelineage()
    {
        return !string.IsNullOrEmpty(lineage);
    }
    
    /// <summary>
    /// Test whether version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeversion()
    {
        return !string.IsNullOrEmpty(version);
    }
    
    /// <summary>
    /// Test whether versionPrev should be serialized
    /// </summary>
    public virtual bool ShouldSerializeversionPrev()
    {
        return !string.IsNullOrEmpty(versionPrev);
    }
    
    /// <summary>
    /// Test whether fullURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializefullURI()
    {
        return !string.IsNullOrEmpty(fullURI);
    }
    
    /// <summary>
    /// Test whether basedOnURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebasedOnURI()
    {
        return !string.IsNullOrEmpty(basedOnURI);
    }
    
    /// <summary>
    /// Test whether filename should be serialized
    /// </summary>
    public virtual bool ShouldSerializefilename()
    {
        return !string.IsNullOrEmpty(filename);
    }
}
}
#pragma warning restore
